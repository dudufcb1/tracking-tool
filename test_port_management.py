#!/usr/bin/env python3
"""
Script de prueba para demostrar el manejo autom√°tico de puertos en DevPipe Server.

Este script:
1. Inicia un proceso que ocupa el puerto 7845
2. Intenta iniciar el servidor DevPipe
3. Verifica que el servidor libere autom√°ticamente el puerto
4. Confirma que el servidor se inicia correctamente
"""

import subprocess
import time
import requests
import signal
import os
import sys

def test_port_management():
    """Prueba el manejo autom√°tico de puertos."""
    
    print("üß™ Iniciando prueba de manejo de puertos...")
    print("=" * 50)
    
    # Paso 1: Ocupar el puerto 7845
    print("1Ô∏è‚É£  Ocupando puerto 7845 con proceso dummy...")
    dummy_process = subprocess.Popen([
        'python', '-c', 
        "import socket; s = socket.socket(); s.bind(('localhost', 7845)); print('Puerto ocupado'); s.listen(1); input()"
    ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
    
    time.sleep(2)  # Dar tiempo para que el proceso se inicie
    
    # Verificar que el puerto est√° ocupado
    try:
        response = requests.get('http://localhost:7845', timeout=2)
        print("‚ùå El puerto deber√≠a estar ocupado por el proceso dummy")
        return False
    except requests.exceptions.ConnectionError:
        print("‚úÖ Puerto 7845 ocupado por proceso dummy")
    except Exception as e:
        print(f"‚ö†Ô∏è  Error inesperado: {e}")
    
    # Paso 2: Intentar iniciar el servidor DevPipe
    print("\n2Ô∏è‚É£  Iniciando servidor DevPipe (deber√≠a liberar el puerto autom√°ticamente)...")
    
    # Cambiar al directorio del proyecto
    project_dir = os.path.dirname(os.path.abspath(__file__))
    
    server_process = subprocess.Popen([
        'bash', '-c', 'source venv/bin/activate && python server/main.py'
    ], cwd=project_dir, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    
    # Dar tiempo para que el servidor se inicie
    time.sleep(5)
    
    # Paso 3: Verificar que el servidor est√° funcionando
    print("3Ô∏è‚É£  Verificando que el servidor DevPipe est√° funcionando...")
    
    try:
        response = requests.get('http://localhost:7845/config', timeout=5)
        if response.status_code == 200:
            print("‚úÖ Servidor DevPipe funcionando correctamente")
            print(f"üìä Respuesta del servidor: {response.json()['status']}")
            success = True
        else:
            print(f"‚ùå Servidor respondi√≥ con c√≥digo: {response.status_code}")
            success = False
    except requests.exceptions.ConnectionError:
        print("‚ùå No se pudo conectar al servidor DevPipe")
        success = False
    except Exception as e:
        print(f"‚ùå Error al verificar servidor: {e}")
        success = False
    
    # Paso 4: Limpiar procesos
    print("\n4Ô∏è‚É£  Limpiando procesos...")
    
    # Terminar servidor DevPipe
    try:
        server_process.terminate()
        server_process.wait(timeout=5)
        print("‚úÖ Servidor DevPipe terminado")
    except subprocess.TimeoutExpired:
        server_process.kill()
        print("üî• Servidor DevPipe forzado a terminar")
    except Exception as e:
        print(f"‚ö†Ô∏è  Error terminando servidor: {e}")
    
    # Verificar si el proceso dummy sigue corriendo
    if dummy_process.poll() is None:
        print("‚ö†Ô∏è  Proceso dummy fue terminado autom√°ticamente por el servidor")
        dummy_process.kill()
    else:
        print("‚úÖ Proceso dummy ya fue terminado")
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ PRUEBA EXITOSA: El manejo autom√°tico de puertos funciona correctamente")
        print("‚úÖ El servidor puede liberar autom√°ticamente el puerto 7845 cuando est√° ocupado")
    else:
        print("‚ùå PRUEBA FALLIDA: Hay problemas con el manejo de puertos")
    
    return success

def test_frontend_port_override():
    """Prueba la funcionalidad de override de puerto en el frontend."""
    
    print("\nüåê Probando funcionalidad de override de puerto en frontend...")
    print("=" * 50)
    
    print("üìù Para probar el override de puerto en el frontend:")
    print("1. Abre la consola del navegador en una p√°gina con devpipe.js cargado")
    print("2. Ejecuta: DevPipe.setPort(8080)")
    print("3. Verifica: DevPipe.getCurrentPort() // deber√≠a retornar 8080")
    print("4. Verifica: DevPipe.getServerUrl() // deber√≠a apuntar al puerto 8080")
    print("5. Para limpiar: DevPipe.clearPort()")
    print("6. Verifica: DevPipe.getCurrentPort() // deber√≠a retornar 7845")
    
    print("\nüí° El puerto se guarda en localStorage como 'devpipe_port'")
    print("üí° El cliente autom√°ticamente usar√° el puerto personalizado si est√° configurado")

if __name__ == '__main__':
    print("üöÄ DevPipe - Prueba de Manejo de Puertos")
    print("=" * 50)
    
    # Verificar que estamos en el directorio correcto
    if not os.path.exists('server/main.py'):
        print("‚ùå Error: Ejecuta este script desde el directorio ra√≠z del proyecto")
        sys.exit(1)
    
    # Verificar que el entorno virtual existe
    if not os.path.exists('venv/bin/activate'):
        print("‚ùå Error: No se encontr√≥ el entorno virtual. Ejecuta: python -m venv venv")
        sys.exit(1)
    
    try:
        # Probar manejo de puertos del servidor
        success = test_port_management()
        
        # Mostrar informaci√≥n sobre el frontend
        test_frontend_port_override()
        
        if success:
            print("\nüéØ RESUMEN:")
            print("‚úÖ Servidor Python: Manejo autom√°tico de puerto 7845 funcionando")
            print("‚úÖ Cliente JavaScript: Override de puerto via localStorage disponible")
            print("‚úÖ Sistema listo para uso en desarrollo")
        else:
            print("\n‚ùå Hay problemas que necesitan ser resueltos")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\nüõë Prueba interrumpida por el usuario")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        sys.exit(1)
