# Project: tracking-tool
# Generated on: 2025-07-15 01:47:18



arquitectura_migracion.md
=========================

# Arquitectura y L√≥gica de Negocio para Migraci√≥n DevPipe

## Objetivo General
Crear un sistema simple y robusto para monitoreo de logs en aplicaciones web, permitiendo la gesti√≥n y visualizaci√≥n centralizada desde un panel web.

## Componentes Principales

### 1. Cliente (devpipe.js)
- Script que se integra f√°cilmente en cualquier web.
- Captura autom√°ticamente logs de consola y errores JS.
- Env√≠a los logs al servidor mediante HTTP (fetch/ajax).

### 2. Servidor
- Recibe los logs enviados por el cliente.
- Guarda cada log en un archivo de texto plano (formato JSON por l√≠nea).
- Expone endpoints HTTP para:
  - Recibir logs.
  - Consultar logs recientes.
  - Limpiar logs.
  - Configurar filtros y ubicaci√≥n del archivo.

### 3. Panel Web (Admin)
- Permite visualizar los logs en tiempo real o por consulta.
- Permite configurar:
  - Ubicaci√≥n del archivo de logs.
  - Palabras clave/patrones para filtrar URLs (decidir qu√© logs aceptar).
  - Acciones administrativas (limpiar, descargar, etc).
- Muestra m√©tricas b√°sicas: cantidad de logs, tama√±o del archivo, √∫ltimas URLs, etc.

## Flujos de Negocio

1. **Integraci√≥n:** El usuario integra devpipe.js en su web.
2. **Captura:** El script intercepta logs y errores, los env√≠a al servidor.
3. **Recepci√≥n:** El servidor recibe y almacena los logs en el archivo configurado.
4. **Visualizaci√≥n:** El panel web permite ver los logs, aplicar filtros y gestionar el archivo.
5. **Configuraci√≥n:** El usuario puede cambiar la ubicaci√≥n del archivo y los filtros de URL desde el panel.
6. **Administraci√≥n:** El usuario puede limpiar logs, descargar el archivo, y ver m√©tricas desde el panel.

## Requisitos Clave
- Facilidad de integraci√≥n (1 l√≠nea de JS).
- Configuraci√≥n flexible de filtros y archivo.
- Panel web intuitivo y r√°pido.
- Persistencia simple (archivo de texto).
- Seguridad b√°sica (acceso restringido al panel).

## Consideraciones para la Migraci√≥n
- Mantener la l√≥gica de negocio, simplificando la arquitectura y eliminando dependencias innecesarias.
- Priorizar la estabilidad y facilidad de mantenimiento.
- Usar Flask para el backend por su simplicidad y robustez.
- Mantener la carpeta `client` y el script devpipe.js como base para la nueva versi√≥n.

---
Este documento servir√° como gu√≠a para la migraci√≥n y redise√±o del sistema DevPipe.



INTEGRACION_COMPLETADA.md
=========================

# ‚úÖ Integraci√≥n API Frontend-Backend Completada

## üéâ Estado Actual

### ‚úÖ **COMPLETADO**
- **Backend Flask**: Funcionando en puerto 7845 con manejo autom√°tico de puertos
- **Frontend React**: Funcionando en puerto 5173 con integraci√≥n API completa
- **API Client**: Implementado con axios y manejo de errores
- **Componentes UI**: Actualizados para usar shadcn/ui en lugar de Material-UI
- **P√°ginas funcionales**: Config y Monitor completamente integradas

### üîß **Funcionalidades Implementadas**

#### 1. API Client (`client/src/lib/api.ts`)
- ‚úÖ Configuraci√≥n autom√°tica de puerto (7845 por defecto, con override via localStorage)
- ‚úÖ Interfaces TypeScript que coinciden con el servidor
- ‚úÖ Manejo de errores HTTP y timeouts
- ‚úÖ APIs para configuraci√≥n, logs y monitoreo

#### 2. P√°gina de Configuraci√≥n (`client/src/pages/Config.tsx`)
- ‚úÖ Carga configuraci√≥n desde servidor
- ‚úÖ Formulario completo con todos los campos del servidor
- ‚úÖ Validaci√≥n y feedback visual
- ‚úÖ Estado del servidor en tiempo real
- ‚úÖ Manejo de errores de conexi√≥n

#### 3. P√°gina de Monitor (`client/src/pages/Monitor.tsx`)
- ‚úÖ Lista de logs en tiempo real
- ‚úÖ Controles de monitoreo (Start/Pause/Stop)
- ‚úÖ Filtrado de logs por contenido
- ‚úÖ Formato visual mejorado con colores por nivel
- ‚úÖ Botones para actualizar y limpiar logs
- ‚úÖ Configuraci√≥n de l√≠mite de logs

#### 4. Layout y Navegaci√≥n
- ‚úÖ Sidebar responsivo con navegaci√≥n
- ‚úÖ Navbar con controles b√°sicos
- ‚úÖ Layout principal sin dependencias de Material-UI
- ‚úÖ Dise√±o responsive para m√≥vil y desktop

## üöÄ **C√≥mo Usar el Sistema**

### Iniciar el Sistema
```bash
# Terminal 1: Backend
source venv/bin/activate
python server/main.py

# Terminal 2: Frontend
cd client
npm run dev
```

### URLs
- **Backend API**: http://localhost:7845
- **Frontend**: http://localhost:5173

### Funcionalidades Disponibles

#### En el Frontend:
1. **P√°gina Monitor** (`/`):
   - Ver logs en tiempo real
   - Iniciar/pausar/detener monitoreo
   - Filtrar logs por contenido
   - Limpiar logs
   - Configurar l√≠mite de logs mostrados

2. **P√°gina Configuraci√≥n** (`/config`):
   - Ver estado del servidor
   - Configurar directorio de logs
   - Ajustar tama√±o m√°ximo de archivos
   - Configurar filtros de URL
   - Ajustar puerto del servidor
   - Configurar monitoreo autom√°tico

#### Desde la Consola del Navegador:
```javascript
// Configurar puerto personalizado
DevPipe.setPort(8080);

// Ver puerto actual
DevPipe.getCurrentPort();

// Limpiar puerto personalizado
DevPipe.clearPort();
```

## üß™ **Pruebas Realizadas**

### Backend API
- ‚úÖ GET /config - Obtener configuraci√≥n
- ‚úÖ POST /config - Actualizar configuraci√≥n
- ‚úÖ POST /log - Enviar logs
- ‚úÖ GET /logs - Obtener logs recientes
- ‚úÖ POST /logs/clear - Limpiar logs
- ‚úÖ POST /monitoring/start - Iniciar monitoreo
- ‚úÖ POST /monitoring/stop - Detener monitoreo

### Frontend
- ‚úÖ Carga inicial de configuraci√≥n
- ‚úÖ Guardado de configuraci√≥n
- ‚úÖ Visualizaci√≥n de logs en tiempo real
- ‚úÖ Filtrado de logs
- ‚úÖ Controles de monitoreo
- ‚úÖ Navegaci√≥n entre p√°ginas
- ‚úÖ Responsive design

### Integraci√≥n
- ‚úÖ Comunicaci√≥n frontend-backend
- ‚úÖ Manejo de errores de conexi√≥n
- ‚úÖ Actualizaci√≥n en tiempo real
- ‚úÖ Persistencia de configuraci√≥n

## üìä **Datos de Prueba Generados**

Se generaron logs de prueba con diferentes niveles:
- **INFO**: "‚úÖ Sistema iniciado correctamente"
- **ERROR**: "‚ùå Error de conexi√≥n con la base de datos"  
- **WARN**: "‚ö†Ô∏è Memoria alta detectada: 85%"

## üîß **Configuraci√≥n T√©cnica**

### Vite Config
- Configurado path alias `@` para imports
- Soporte para TypeScript
- Tailwind CSS integrado

### API Configuration
- Base URL autom√°tica basada en puerto
- Timeout de 5 segundos
- Interceptores para manejo de errores
- Soporte para puerto personalizado via localStorage

### TypeScript
- Interfaces completas para todas las APIs
- Tipos exportados para uso en componentes
- Validaci√≥n de tipos en tiempo de compilaci√≥n

## üéØ **Pr√≥ximos Pasos Sugeridos**

1. **Implementar comando clean en CLI** (scripts/devpipe.sh)
2. **Agregar m√°s pruebas automatizadas**
3. **Mejorar UI/UX con animaciones**
4. **Implementar tema oscuro completo**
5. **Agregar notificaciones push para errores cr√≠ticos**

## üìù **Archivos Modificados/Creados**

### Nuevos:
- `INTEGRACION_COMPLETADA.md` (este archivo)
- `test_port_management.py` (pruebas de puerto)
- `PUERTO_MANAGEMENT.md` (documentaci√≥n de puertos)
- `PENDIENTES.md` (tareas pendientes)

### Modificados:
- `client/src/lib/api.ts` - API client completo
- `client/src/pages/Config.tsx` - P√°gina de configuraci√≥n funcional
- `client/src/pages/Monitor.tsx` - P√°gina de monitor funcional
- `client/src/components/Layout/` - Componentes sin Material-UI
- `client/vite.config.ts` - Configuraci√≥n de path alias
- `server/main.py` - Manejo autom√°tico de puertos
- `client/devpipe.js` - Override de puerto via localStorage
- `progress.md` - Estado actualizado del proyecto

---

## üéâ **Resultado Final**

**El sistema DevPipe est√° ahora completamente funcional con integraci√≥n frontend-backend completa. Los usuarios pueden monitorear logs en tiempo real, configurar el sistema desde una interfaz web moderna, y el sistema maneja autom√°ticamente conflictos de puertos.**

**Progreso del proyecto: ~90% completado** ‚úÖ



PENDIENTES.md
=============

# üìã Tareas Pendientes - DevPipe

## üéØ Estado Actual del Proyecto

### ‚úÖ **COMPLETADO**
- **Servidor Flask**: Completamente funcional con API REST
- **Sistema de Puertos**: Manejo autom√°tico del puerto 7845 con liberaci√≥n de procesos
- **Cliente JavaScript**: Override de puerto via localStorage
- **CLI B√°sico**: Comandos start, stop, status
- **Estructura React**: Componentes UI b√°sicos y p√°ginas principales

### üîÑ **EN PROGRESO / PENDIENTE**

## 1. üåê Frontend React - Integraci√≥n API

### Prioridad: ALTA
**Estado**: Estructura creada, falta integraci√≥n completa

**Tareas Espec√≠ficas**:
- [ ] **Conectar p√°gina Config con API del servidor**
  - Integrar `client/src/pages/Config.tsx` con endpoints `/config`
  - Implementar carga y guardado de configuraci√≥n real
  - Agregar validaci√≥n de formularios
  - Feedback visual de operaciones

- [ ] **Implementar p√°gina Monitor funcional**
  - Crear polling para endpoint `/logs`
  - Mostrar logs en tiempo real
  - Implementar filtros de logs
  - Controles play/pause/stop para monitoreo

- [ ] **Cliente API completo**
  - Completar `client/src/api/` con todos los endpoints
  - Manejo de errores HTTP
  - Retry logic para conexiones fallidas
  - Tipos TypeScript para respuestas

**Archivos a modificar**:
- `client/src/pages/Config.tsx`
- `client/src/pages/Monitor.tsx`
- `client/src/api/` (crear archivos faltantes)

## 2. üîß CLI - Comando Clean

### Prioridad: MEDIA
**Estado**: Script existe, funci√≥n clean no implementada

**Tareas Espec√≠ficas**:
- [ ] **Implementar funci√≥n clean_logs() en devpipe.sh**
  - Limpiar archivos de logs del directorio `logs/`
  - Llamar endpoint `/logs/clear` del servidor
  - Confirmaci√≥n antes de limpiar
  - Feedback de operaci√≥n

**Archivos a modificar**:
- `scripts/devpipe.sh` (l√≠nea 47-49)

## 3. üìä Endpoints API Faltantes

### Prioridad: MEDIA
**Estado**: Algunos endpoints del plan original no est√°n implementados

**Seg√∫n plan.md, faltan**:
- [ ] `POST /files/select` - Seleccionar archivo externo
- [ ] `POST /files/combine` - Combinar logs
- [ ] `DELETE /logs` - Borrar logs (existe `/logs/clear`)

**Decisi√≥n necesaria**: ¬øSon realmente necesarios estos endpoints o el plan cambi√≥?

## 4. üé® UI/UX Mejoras

### Prioridad: BAJA
**Estado**: Funcionalidad b√°sica, falta pulimiento

**Tareas Espec√≠ficas**:
- [ ] **Dise√±o responsivo completo**
- [ ] **Tema claro/oscuro**
- [ ] **Animaciones y transiciones**
- [ ] **Feedback visual mejorado**
- [ ] **Manejo de estados de carga**

## 5. üß™ Testing y Documentaci√≥n

### Prioridad: MEDIA
**Estado**: Pruebas b√°sicas existen, falta cobertura completa

**Tareas Espec√≠ficas**:
- [ ] **Pruebas de integraci√≥n frontend-backend**
- [ ] **Pruebas E2E del flujo completo**
- [ ] **Documentaci√≥n de API actualizada**
- [ ] **Gu√≠a de usuario del panel web**

## üìÖ Roadmap Sugerido

### Sprint 1 (Pr√≥ximo) - Funcionalidad Core
1. **Conectar Config.tsx con API** (2-3 horas)
2. **Implementar Monitor.tsx b√°sico** (3-4 horas)
3. **Completar comando clean** (1 hora)

### Sprint 2 - Monitoreo en Tiempo Real
1. **Polling de logs en tiempo real** (2-3 horas)
2. **Filtros y controles de monitoreo** (2-3 horas)
3. **Manejo de errores y reconexi√≥n** (1-2 horas)

### Sprint 3 - Pulimiento
1. **UI/UX mejoras** (3-4 horas)
2. **Testing completo** (2-3 horas)
3. **Documentaci√≥n final** (1-2 horas)

## üöÄ Para Empezar Inmediatamente

### Tarea M√°s Cr√≠tica: Conectar Config.tsx

**Archivo**: `client/src/pages/Config.tsx`
**Problema**: Usa `configApi.getConfig()` y `configApi.updateConfig()` pero estos no est√°n implementados correctamente

**Soluci√≥n**:
1. Crear/completar `client/src/api/config.ts`
2. Implementar llamadas HTTP a `http://localhost:7845/config`
3. Manejar respuestas y errores
4. Actualizar tipos TypeScript

**C√≥digo ejemplo necesario**:
```typescript
// client/src/api/config.ts
export const configApi = {
  async getConfig() {
    const response = await fetch('http://localhost:7845/config');
    return response.json();
  },
  
  async updateConfig(config: any) {
    const response = await fetch('http://localhost:7845/config', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(config)
    });
    return response.json();
  }
};
```

## üîç An√°lisis de Dependencias

**Para completar el frontend se necesita**:
1. ‚úÖ Servidor funcionando (LISTO)
2. ‚úÖ Endpoints API (LISTOS)
3. ‚ùå Cliente API en React (FALTA)
4. ‚ùå Integraci√≥n en componentes (FALTA)

**Bloqueos actuales**:
- Frontend no puede funcionar sin cliente API
- Monitor no puede mostrar logs sin polling implementado
- Config no puede guardar sin integraci√≥n API

## üí° Recomendaciones

1. **Priorizar integraci√≥n API** antes que nuevas funcionalidades
2. **Usar el sistema de puertos ya implementado** para desarrollo
3. **Aprovechar la estructura React existente** que est√° bien organizada
4. **Mantener la simplicidad** del dise√±o actual

---

**√öltima actualizaci√≥n**: 2025-07-15
**Estado del proyecto**: ~75% completado, funcionalidad core lista, falta integraci√≥n frontend



plan.md
=======

# Plan de Implementaci√≥n DevPipe

## Estructura del Proyecto

```
tracking-tool/
‚îú‚îÄ‚îÄ server/
‚îÇ   ‚îú‚îÄ‚îÄ main.py           # Servidor Flask principal
‚îÇ   ‚îú‚îÄ‚îÄ api/              # Endpoints de la API
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ logs.py       # Endpoints para gesti√≥n de logs
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ config.py     # Endpoints para configuraci√≥n
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ files.py      # Endpoints para gesti√≥n de archivos
‚îÇ   ‚îú‚îÄ‚îÄ core/             # L√≥gica central
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ log_manager.py    # Gesti√≥n de logs y archivos
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ file_watcher.py   # Monitoreo de archivos externos
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ config_manager.py # Gesti√≥n de configuraci√≥n
‚îÇ   ‚îî‚îÄ‚îÄ utils/            # Utilidades
‚îÇ       ‚îî‚îÄ‚îÄ file_utils.py # Utilidades para manejo de archivos
‚îú‚îÄ‚îÄ client/
‚îÇ   ‚îî‚îÄ‚îÄ devpipe.js        # Cliente JavaScript (existente)
‚îú‚îÄ‚îÄ frontend/             # Panel web en React
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/   # Componentes React
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/       # P√°ginas principales
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ api/         # Cliente API
‚îÇ   ‚îî‚îÄ‚îÄ public/          # Recursos est√°ticos
‚îú‚îÄ‚îÄ scripts/
‚îÇ   ‚îî‚îÄ‚îÄ devpipe.sh       # Script para comandos CLI
‚îî‚îÄ‚îÄ config/
    ‚îî‚îÄ‚îÄ default.json     # Configuraci√≥n por defecto
```

## Componentes Principales

### 1. Servidor Flask

#### Endpoints API:
- `POST /log` - Recibir logs de devpipe.js
- `GET /logs` - Obtener logs recientes
- `POST /config` - Actualizar configuraci√≥n
- `GET /config` - Obtener configuraci√≥n actual
- `POST /files/select` - Seleccionar archivo externo
- `POST /files/combine` - Combinar logs
- `DELETE /logs` - Borrar logs

#### Estados del Servidor:
1. Servidor Activo (devpipe start)
2. Monitoreo Activo (iniciado desde panel)
3. Captura en Pausa (desde panel)

### 2. Panel Web (React)

#### Caracter√≠sticas:
- Selector de carpeta para logs
- Selector de archivo externo
- Panel de monitoreo en tiempo real
- Configuraci√≥n de filtros
- Botones de control (play/pause/stop)
- Vista combinada de logs
- Bot√≥n de limpieza de logs

#### Vistas Principales:
1. Dashboard
   - Monitor en tiempo real (√∫ltimos 10 logs por defecto)
   - Estado del servidor y monitoreo
   - M√©tricas b√°sicas

2. Configuraci√≥n
   - Selecci√≥n de carpetas/archivos
   - Filtros de URL
   - Tama√±o m√°ximo de archivos
   - N√∫mero de logs a mostrar

3. Herramientas
   - Combinaci√≥n de logs
   - Limpieza de logs
   - Copiar al portapapeles

### 3. Comandos CLI

```bash
devpipe start    # Inicia el servidor
devpipe stop     # Detiene el servidor
devpipe clean    # Limpia los logs
devpipe status   # Muestra estado actual
```

## Plan de Implementaci√≥n

### Fase 1: Servidor Base
1. Implementar servidor Flask b√°sico
2. Integrar endpoint de logs existente
3. Implementar gesti√≥n de configuraci√≥n
4. Implementar sistema de monitoreo de archivos

### Fase 2: Panel Web
1. Configurar proyecto React
2. Implementar UI b√°sica
3. Integrar con API del servidor
4. Implementar monitoreo en tiempo real
5. Implementar selecci√≥n de archivos

### Fase 3: Integraci√≥n
1. Implementar comandos CLI
2. Integrar monitoreo combinado
3. Implementar funcionalidad de combinaci√≥n
4. Pruebas de integraci√≥n

### Fase 4: Refinamiento
1. Optimizaci√≥n de rendimiento
2. Mejoras de UX
3. Pruebas finales

## Consideraciones T√©cnicas

### Monitoreo de Archivos
- Uso de `watchdog` para monitorear cambios
- Buffer circular para logs recientes
- L√≠mite configurable de l√≠neas a mostrar

### Sincronizaci√≥n
- Polling cada segundo para actualizaciones en tiempo real
- Estado centralizado en el servidor
- API REST para todas las operaciones

### Persistencia
- Logs en archivos planos
- Configuraci√≥n en JSON
- Respaldo de estado del servidor

### Seguridad
- Sin autenticaci√≥n en esta fase
- Validaci√≥n b√°sica de entradas
- Protecci√≥n contra desbordamiento de memoria



progress.md
===========

# Progress Tracking

## Fase 1: Servidor Base

### Configuraci√≥n Inicial
- [x] Crear estructura de directorios
- [x] Configurar entorno virtual Python
- [x] Instalar Flask y dependencias b√°sicas
- [x] Crear archivo de configuraci√≥n por defecto

### API Base
- [x] Implementar servidor Flask b√°sico
- [x] Configurar CORS para desarrollo
- [x] Implementar endpoint POST /log
- [x] Implementar sistema de respuesta est√°ndar

### Gesti√≥n de Logs
- [x] Implementar LogManager
- [x] Sistema de escritura de logs
- [x] Control de tama√±o de archivo
- [x] Rotaci√≥n de logs

### Monitoreo de Archivos
- [x] Implementar FileWatcher
- [x] Sistema de detecci√≥n de cambios
- [x] Buffer de logs recientes
- [x] Control de tama√±o de buffer

### Configuraci√≥n
- [x] Implementar ConfigManager
- [x] Sistema de guardado/carga de configuraci√≥n
- [x] Endpoints de configuraci√≥n
- [x] Validaci√≥n de configuraci√≥n

### Correcci√≥n de Errores
- [x] Corregir errores de tipado en file_watcher.py
- [x] Corregir errores de tipado en main.py
- [x] Corregir errores de tipado en log_manager.py
- [x] Corregir errores de tipado en config_manager.py
- [x] Corregir errores de tipado en models.py
- [x] Verificar compilaci√≥n de todos los archivos Python

### Manejo de Puertos (NUEVO)
- [x] Implementar liberaci√≥n autom√°tica del puerto 7845
- [x] Funciones para detectar y terminar procesos en puerto
- [x] Manejo robusto de excepciones para liberaci√≥n de puertos
- [x] Override de puerto en cliente JavaScript via localStorage
- [x] Funciones DevPipe.setPort(), clearPort(), getCurrentPort()
- [x] Script de pruebas autom√°ticas para manejo de puertos
- [x] Documentaci√≥n completa del sistema de puertos

## Fase 2: Panel Web

### Setup Inicial
- [x] Crear proyecto React
- [x] Configurar estructura de carpetas
- [x] Instalar dependencias necesarias
- [x] Configurar cliente API b√°sico
- [x] Implementar componentes UI b√°sicos (Button, Card, Input, etc.)
- [x] Configurar p√°ginas principales (Config, Monitor)
- [ ] Conectar completamente con API del servidor

### Panel de Configuraci√≥n
- [x] Estructura b√°sica del componente Config
- [ ] Integraci√≥n completa con endpoints del servidor
- [ ] Validaci√≥n de formularios
- [ ] Feedback visual de guardado

### Funcionalidades Core
- [ ] Implementar polling de logs
- [ ] Sistema de filtrado
- [ ] Control de monitoreo (play/pause/stop)
- [ ] Selecci√≥n de archivos

### UI/UX
- [ ] Dise√±o responsivo
- [ ] Temas claro/oscuro
- [ ] Animaciones y transiciones
- [ ] Feedback visual

## Fase 3: CLI y Scripts

### Comandos Base
- [x] Implementar script devpipe.sh
- [x] Comando start
- [x] Comando stop
- [x] Comando status
- [ ] Comando clean (implementaci√≥n pendiente)

### Integraci√≥n
- [ ] Integrar con sistema operativo
- [ ] Configurar permisos
- [ ] Pruebas de integraci√≥n

## Estado Actual

### ‚úÖ **Fase 1 COMPLETADA**: Servidor Flask
- Servidor Flask completamente funcional con todos los errores corregidos
- **NUEVO**: Sistema de manejo autom√°tico de puertos implementado
- **NUEVO**: Cliente JavaScript con override de puerto via localStorage
- **NUEVO**: Scripts de prueba y documentaci√≥n completa

### ÔøΩ **Fase 2 EN PROGRESO**: Panel Web
- Estructura React b√°sica creada
- Componentes UI implementados
- P√°ginas principales estructuradas
- **PENDIENTE**: Integraci√≥n completa con API del servidor
- **PENDIENTE**: Funcionalidades de monitoreo en tiempo real

### üîÑ **Fase 3 PARCIALMENTE COMPLETADA**: CLI y Scripts
- Scripts b√°sicos implementados (start, stop, status)
- **PENDIENTE**: Comando clean
- **PENDIENTE**: Integraci√≥n completa con sistema operativo

## Pr√≥ximos Pasos Prioritarios

1. **Completar integraci√≥n API en frontend React**
2. **Implementar monitoreo en tiempo real en panel web**
3. **Finalizar comando clean en CLI**
4. **Pruebas de integraci√≥n completas**



PUERTO_MANAGEMENT.md
====================

# üîå Manejo de Puertos en DevPipe

Este documento describe el sistema de manejo autom√°tico de puertos implementado en DevPipe para garantizar que el servidor siempre pueda iniciarse en el puerto 7845.

## üéØ Objetivo

El sistema est√° dise√±ado para que el cliente DevPipe siempre use el puerto 7845, liberando autom√°ticamente cualquier proceso que lo est√© ocupando cuando sea necesario.

## üîß Funcionalidades Implementadas

### 1. Servidor Python - Liberaci√≥n Autom√°tica de Puerto

El servidor Python (`server/main.py`) ahora incluye:

#### Funciones Principales:

- **`kill_process_on_port(port)`**: Termina procesos que usan un puerto espec√≠fico
- **`is_port_available(port)`**: Verifica si un puerto est√° disponible
- **`ensure_port_available(port)`**: Asegura que un puerto est√© libre

#### Comportamiento:

1. **Al iniciar el servidor**: Verifica si el puerto 7845 est√° disponible
2. **Si est√° ocupado**: Busca y termina los procesos que lo usan
3. **M√©todos de terminaci√≥n**:
   - Primero intenta `SIGTERM` (terminaci√≥n elegante)
   - Si falla, usa `SIGKILL` (terminaci√≥n forzada)
4. **Compatibilidad**: Usa `lsof` como m√©todo principal y `netstat` como respaldo

#### Ejemplo de Salida:

```bash
üöÄ Iniciando DevPipe Server en puerto 7845...
‚ö†Ô∏è  Puerto 7845 est√° ocupado, intentando liberar...
üîç Encontrados procesos usando el puerto 7845: 12345
üî™ Terminando proceso 12345...
‚úÖ Proceso 12345 terminado
‚úÖ Puerto 7845 liberado exitosamente
‚úÖ Servidor DevPipe iniciado en http://localhost:7845
```

### 2. Cliente JavaScript - Override de Puerto

El cliente JavaScript (`client/devpipe.js`) ahora incluye:

#### Funciones Disponibles:

- **`DevPipe.setPort(puerto)`**: Configura un puerto personalizado
- **`DevPipe.clearPort()`**: Elimina el puerto personalizado
- **`DevPipe.getCurrentPort()`**: Obtiene el puerto actual
- **`DevPipe.getServerUrl()`**: Obtiene la URL completa del servidor

#### Uso en Consola del Navegador:

```javascript
// Configurar puerto personalizado
DevPipe.setPort(8080);

// Verificar puerto actual
DevPipe.getCurrentPort(); // Retorna: 8080

// Verificar URL del servidor
DevPipe.getServerUrl(); // Retorna: "http://localhost:8080"

// Limpiar puerto personalizado
DevPipe.clearPort();

// Verificar que volvi√≥ al puerto por defecto
DevPipe.getCurrentPort(); // Retorna: 7845
```

#### Almacenamiento:

- El puerto personalizado se guarda en `localStorage` como `'devpipe_port'`
- Persiste entre sesiones del navegador
- Se aplica autom√°ticamente al cargar la p√°gina

## üß™ Pruebas

### Script de Prueba Autom√°tica

Ejecuta el script de prueba para verificar el funcionamiento:

```bash
python test_port_management.py
```

Este script:
1. Ocupa el puerto 7845 con un proceso dummy
2. Inicia el servidor DevPipe
3. Verifica que el puerto se libere autom√°ticamente
4. Confirma que el servidor funcione correctamente

### Prueba Manual del Frontend

1. Abre una p√°gina con `devpipe.js` cargado
2. Abre la consola del navegador
3. Ejecuta los comandos de ejemplo mostrados arriba

## üîÑ Flujo de Trabajo

### Escenario Normal:
1. Usuario ejecuta `python server/main.py`
2. Puerto 7845 est√° libre
3. Servidor se inicia normalmente

### Escenario con Puerto Ocupado:
1. Usuario ejecuta `python server/main.py`
2. Puerto 7845 est√° ocupado por otro proceso
3. Sistema detecta el conflicto
4. Termina autom√°ticamente el proceso conflictivo
5. Servidor se inicia en el puerto liberado

### Escenario con Puerto Personalizado (Frontend):
1. Usuario configura puerto personalizado: `DevPipe.setPort(8080)`
2. Cliente env√≠a logs a `http://localhost:8080`
3. Configuraci√≥n persiste en localStorage

## ‚öôÔ∏è Configuraci√≥n

### Puerto por Defecto

El puerto por defecto (7845) est√° configurado en:
- `config/config.json`: `"port": 7845`
- `server/core/config_manager.py`: Puerto por defecto en configuraci√≥n
- `client/devpipe.js`: Puerto hardcodeado como respaldo

### Variables de Entorno

Puedes sobrescribir el puerto usando la variable de entorno `PORT`:

```bash
PORT=8080 python server/main.py
```

## üõ†Ô∏è Soluci√≥n de Problemas

### Error: "No se pudo liberar el puerto"

**Posibles causas:**
- Proceso con permisos elevados ocupando el puerto
- Comando `lsof` no disponible en el sistema

**Soluciones:**
1. Ejecutar con `sudo` (no recomendado)
2. Cambiar el puerto en la configuraci√≥n
3. Terminar manualmente el proceso conflictivo

### Error: "Comando 'lsof' no encontrado"

**Soluci√≥n:**
```bash
# Ubuntu/Debian
sudo apt-get install lsof

# CentOS/RHEL
sudo yum install lsof

# macOS
brew install lsof
```

### Puerto Personalizado No Funciona

**Verificaciones:**
1. Confirmar que el puerto est√° guardado: `localStorage.getItem('devpipe_port')`
2. Verificar que el servidor est√© corriendo en ese puerto
3. Limpiar localStorage y reintentar

## üìã Comandos √ötiles

```bash
# Verificar qu√© proceso usa el puerto 7845
lsof -i :7845

# Terminar proceso espec√≠fico
kill -TERM <PID>

# Verificar puertos en uso
netstat -tlnp | grep 7845

# Probar conectividad
curl http://localhost:7845/config
```

## üîÆ Pr√≥ximas Mejoras

1. **Interfaz gr√°fica** para configurar puerto en el frontend
2. **Detecci√≥n autom√°tica** de puertos alternativos disponibles
3. **Logs m√°s detallados** del proceso de liberaci√≥n de puertos
4. **Configuraci√≥n por proyecto** para puertos personalizados

---

## üìù Notas T√©cnicas

- El sistema usa `SIGTERM` seguido de `SIGKILL` para m√°xima compatibilidad
- El cliente JavaScript verifica localStorage en cada carga de p√°gina
- La configuraci√≥n del puerto se mantiene separada entre servidor y cliente para flexibilidad futura
- El sistema es compatible con Linux, macOS y Windows (con limitaciones en Windows para `lsof`)



README.md
=========

# DevPipe - Tracking Tool

Una herramienta de monitoreo y tracking en tiempo real para aplicaciones web, construida con Flask y React.

## üöÄ Caracter√≠sticas

- **Servidor Flask** con API REST completa
- **Sistema de logs** con rotaci√≥n autom√°tica
- **Monitoreo de archivos** en tiempo real
- **Panel web React** para visualizaci√≥n (pr√≥ximamente)
- **CLI tools** para gesti√≥n del proyecto

## üìÅ Estructura del Proyecto

```
tracking-tool/
‚îú‚îÄ‚îÄ server/                 # Backend Flask
‚îÇ   ‚îú‚îÄ‚îÄ main.py            # Servidor principal
‚îÇ   ‚îú‚îÄ‚îÄ core/              # M√≥dulos core
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ config_manager.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ file_watcher.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ log_manager.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ models.py
‚îÇ   ‚îî‚îÄ‚îÄ api/               # Endpoints API
‚îú‚îÄ‚îÄ client/                # Frontend React (pr√≥ximamente)
‚îú‚îÄ‚îÄ config/                # Archivos de configuraci√≥n
‚îú‚îÄ‚îÄ logs/                  # Archivos de log
‚îú‚îÄ‚îÄ scripts/               # Scripts de utilidad
‚îî‚îÄ‚îÄ docs/                  # Documentaci√≥n
```

## üõ†Ô∏è Instalaci√≥n

1. **Clonar el repositorio**
```bash
git clone <repository-url>
cd tracking-tool
```

2. **Crear entorno virtual**
```bash
python -m venv venv
source venv/bin/activate  # Linux/Mac
# venv\Scripts\activate   # Windows
```

3. **Instalar dependencias**
```bash
pip install -r requirements.txt
```

4. **Ejecutar el servidor**
```bash
python server/main.py
```

## üîß API Endpoints

| M√©todo | Endpoint | Descripci√≥n |
|--------|----------|-------------|
| GET | `/config` | Obtener configuraci√≥n actual |
| POST | `/config` | Actualizar configuraci√≥n |
| POST | `/log` | Enviar nuevo log |
| GET | `/logs` | Obtener logs recientes |
| POST | `/logs/clear` | Limpiar todos los logs |
| POST | `/monitoring/start` | Iniciar monitoreo |
| POST | `/monitoring/stop` | Detener monitoreo |

## üß™ Tests

Ejecutar tests de endpoints:
```bash
./test_endpoints.sh
```

## üìù Configuraci√≥n

El archivo `config/config.json` contiene la configuraci√≥n del sistema:

```json
{
  "port": 7845,
  "logDir": "logs",
  "maxFileSize": 100,
  "maxLogs": 20,
  "monitoring": {
    "enabled": false,
    "intervalMs": 1000
  },
  "urlFilters": []
}
```

## ü§ù Contribuir

1. Fork el proyecto
2. Crear una rama feature (`git checkout -b feature/AmazingFeature`)
3. Commit los cambios (`git commit -m 'Add some AmazingFeature'`)
4. Push a la rama (`git push origin feature/AmazingFeature`)
5. Abrir un Pull Request

## üìã Roadmap

- [x] **Fase 1**: Servidor Flask base
  - [x] API REST completa
  - [x] Sistema de logs
  - [x] Monitoreo de archivos
  - [x] Tests de endpoints
- [ ] **Fase 2**: Panel web React
  - [ ] Interface de usuario
  - [ ] Visualizaci√≥n en tiempo real
  - [ ] Configuraci√≥n via web
- [ ] **Fase 3**: CLI y deployment
  - [ ] Scripts de gesti√≥n
  - [ ] Docker support
  - [ ] Deployment tools

## üìÑ Licencia

Este proyecto est√° bajo la Licencia MIT - ver el archivo [LICENSE](LICENSE) para detalles.

## üë• Autores

- **Equipo DevPipe** - *Desarrollo inicial*

## üôè Agradecimientos

- Flask por el framework web
- Watchdog por el monitoreo de archivos
- La comunidad open source por las herramientas utilizadas



requirements.txt
================

flask==3.0.0
flask-cors==4.0.0
watchdog==3.0.0
requests==2.32.4



status.sh
=========

#!/bin/bash

# Script para verificar el estado del servidor DevPipe
# Uso: ./status.sh

PORT=7845
URL="http://localhost:$PORT"

echo "üîç Verificando estado del servidor DevPipe..."
echo ""

# Verificar si el puerto est√° en uso
echo "üìä Estado del puerto $PORT:"
PIDS=$(lsof -ti:$PORT 2>/dev/null)
if [ -z "$PIDS" ]; then
    echo "‚ùå Puerto $PORT no est√° en uso"
    echo ""
    echo "üí° Para iniciar el servidor:"
    echo "   ./start.sh"
    exit 1
else
    echo "‚úÖ Puerto $PORT en uso por procesos: $PIDS"
    echo ""
    
    # Mostrar detalles de los procesos
    echo "üîß Detalles de procesos:"
    echo "$PIDS" | while read pid; do
        if [ ! -z "$pid" ]; then
            ps aux | grep "^[^ ]* *$pid " | grep -v grep
        fi
    done
fi

echo ""

# Verificar conectividad HTTP
echo "üåê Verificando conectividad HTTP..."
if curl -s --connect-timeout 5 "$URL" > /dev/null; then
    echo "‚úÖ Servidor respondiendo en $URL"
    
    # Obtener informaci√≥n del servidor
    echo ""
    echo "üìã Informaci√≥n del servidor:"
    curl -s "$URL" | python3 -m json.tool 2>/dev/null || echo "‚ùå Error al parsear respuesta JSON"
    
    echo ""
    echo "üîó Enlaces √∫tiles:"
    echo "   üè† Inicio: $URL"
    echo "   ‚öôÔ∏è  Admin: $URL/admin/"
    echo "   üìù Docs: $URL/docs/js"
    echo "   üß™ Demo: $URL/examples/simple-demo.html"
    echo "   üì¶ Script: $URL/client/devpipe.js"
    
else
    echo "‚ùå Servidor no responde en $URL"
    echo ""
    echo "üí° Posibles soluciones:"
    echo "   1. Verificar que el servidor est√© iniciado: ./start.sh"
    echo "   2. Verificar logs del servidor"
    echo "   3. Verificar puertos: netstat -tlnp | grep $PORT"
    exit 1
fi

echo ""
echo "‚ú® DevPipe est√° funcionando correctamente!"



test_endpoints.sh
=================

#!/bin/bash

# Tests b√°sicos de endpoints para el servidor Flask
# Tracking Tool - DevPipe

PORT=8000
BASE_URL="http://localhost:$PORT"

echo "=== TESTING SERVIDOR FLASK ==="
echo "URL base: $BASE_URL"
echo ""

# Test 1: GET /config
echo "Test 1: GET /config - Obtener configuraci√≥n"
response=$(curl -s "$BASE_URL/config")
if [[ $response == *"success"* ]]; then
    echo "‚úÖ PASADO"
else
    echo "‚ùå FALLIDO: $response"
fi
echo ""

# Test 2: POST /monitoring/start
echo "Test 2: POST /monitoring/start - Activar monitoreo"
response=$(curl -s -X POST "$BASE_URL/monitoring/start")
if [[ $response == *"success"* ]]; then
    echo "‚úÖ PASADO"
else
    echo "‚ùå FALLIDO: $response"
fi
echo ""

# Test 3: POST /log
echo "Test 3: POST /log - Enviar log"
response=$(curl -s -X POST "$BASE_URL/log" \
  -H "Content-Type: application/json" \
  -d '{
    "level": "info",
    "message": "Test log desde script",
    "url": "http://test.com",
    "timestamp": "2025-07-14T22:30:00",
    "user_agent": "test-script"
  }')
if [[ $response == *"success"* ]]; then
    echo "‚úÖ PASADO"
else
    echo "‚ùå FALLIDO: $response"
fi
echo ""

# Test 4: GET /logs
echo "Test 4: GET /logs - Obtener logs"
response=$(curl -s "$BASE_URL/logs")
if [[ $response == *"success"* ]] && [[ $response == *"data"* ]]; then
    echo "‚úÖ PASADO"
else
    echo "‚ùå FALLIDO: $response"
fi
echo ""

# Test 5: POST /monitoring/stop
echo "Test 5: POST /monitoring/stop - Parar monitoreo"
response=$(curl -s -X POST "$BASE_URL/monitoring/stop")
if [[ $response == *"success"* ]]; then
    echo "‚úÖ PASADO"
else
    echo "‚ùå FALLIDO: $response"
fi
echo ""

# Test 6: POST /logs/clear
echo "Test 6: POST /logs/clear - Limpiar logs"
response=$(curl -s -X POST "$BASE_URL/logs/clear")
if [[ $response == *"success"* ]]; then
    echo "‚úÖ PASADO"
else
    echo "‚ùå FALLIDO: $response"
fi
echo ""

# Test 7: POST /config
echo "Test 7: POST /config - Actualizar configuraci√≥n"
response=$(curl -s -X POST "$BASE_URL/config" \
  -H "Content-Type: application/json" \
  -d '{"maxFileSize": 150, "maxLogs": 30}')
if [[ $response == *"success"* ]]; then
    echo "‚úÖ PASADO"
else
    echo "‚ùå FALLIDO: $response"
fi
echo ""

# Test 8: Verificar configuraci√≥n actualizada
echo "Test 8: Verificar configuraci√≥n actualizada"
response=$(curl -s "$BASE_URL/config")
if [[ $response == *"maxFileSize\":150"* ]]; then
    echo "‚úÖ PASADO"
else
    echo "‚ùå FALLIDO: Configuraci√≥n no se actualiz√≥"
fi
echo ""

echo "=== RESUMEN ==="
echo "üéâ Tests completados"
echo "üöÄ Servidor Flask verificado y funcional"



test_port_management.py
=======================

#!/usr/bin/env python3
"""
Script de prueba para demostrar el manejo autom√°tico de puertos en DevPipe Server.

Este script:
1. Inicia un proceso que ocupa el puerto 7845
2. Intenta iniciar el servidor DevPipe
3. Verifica que el servidor libere autom√°ticamente el puerto
4. Confirma que el servidor se inicia correctamente
"""

import subprocess
import time
import requests
import signal
import os
import sys

def test_port_management():
    """Prueba el manejo autom√°tico de puertos."""
    
    print("üß™ Iniciando prueba de manejo de puertos...")
    print("=" * 50)
    
    # Paso 1: Ocupar el puerto 7845
    print("1Ô∏è‚É£  Ocupando puerto 7845 con proceso dummy...")
    dummy_process = subprocess.Popen([
        'python', '-c', 
        "import socket; s = socket.socket(); s.bind(('localhost', 7845)); print('Puerto ocupado'); s.listen(1); input()"
    ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
    
    time.sleep(2)  # Dar tiempo para que el proceso se inicie
    
    # Verificar que el puerto est√° ocupado
    try:
        response = requests.get('http://localhost:7845', timeout=2)
        print("‚ùå El puerto deber√≠a estar ocupado por el proceso dummy")
        return False
    except requests.exceptions.ConnectionError:
        print("‚úÖ Puerto 7845 ocupado por proceso dummy")
    except Exception as e:
        print(f"‚ö†Ô∏è  Error inesperado: {e}")
    
    # Paso 2: Intentar iniciar el servidor DevPipe
    print("\n2Ô∏è‚É£  Iniciando servidor DevPipe (deber√≠a liberar el puerto autom√°ticamente)...")
    
    # Cambiar al directorio del proyecto
    project_dir = os.path.dirname(os.path.abspath(__file__))
    
    server_process = subprocess.Popen([
        'bash', '-c', 'source venv/bin/activate && python server/main.py'
    ], cwd=project_dir, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    
    # Dar tiempo para que el servidor se inicie
    time.sleep(5)
    
    # Paso 3: Verificar que el servidor est√° funcionando
    print("3Ô∏è‚É£  Verificando que el servidor DevPipe est√° funcionando...")
    
    try:
        response = requests.get('http://localhost:7845/config', timeout=5)
        if response.status_code == 200:
            print("‚úÖ Servidor DevPipe funcionando correctamente")
            print(f"üìä Respuesta del servidor: {response.json()['status']}")
            success = True
        else:
            print(f"‚ùå Servidor respondi√≥ con c√≥digo: {response.status_code}")
            success = False
    except requests.exceptions.ConnectionError:
        print("‚ùå No se pudo conectar al servidor DevPipe")
        success = False
    except Exception as e:
        print(f"‚ùå Error al verificar servidor: {e}")
        success = False
    
    # Paso 4: Limpiar procesos
    print("\n4Ô∏è‚É£  Limpiando procesos...")
    
    # Terminar servidor DevPipe
    try:
        server_process.terminate()
        server_process.wait(timeout=5)
        print("‚úÖ Servidor DevPipe terminado")
    except subprocess.TimeoutExpired:
        server_process.kill()
        print("üî• Servidor DevPipe forzado a terminar")
    except Exception as e:
        print(f"‚ö†Ô∏è  Error terminando servidor: {e}")
    
    # Verificar si el proceso dummy sigue corriendo
    if dummy_process.poll() is None:
        print("‚ö†Ô∏è  Proceso dummy fue terminado autom√°ticamente por el servidor")
        dummy_process.kill()
    else:
        print("‚úÖ Proceso dummy ya fue terminado")
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ PRUEBA EXITOSA: El manejo autom√°tico de puertos funciona correctamente")
        print("‚úÖ El servidor puede liberar autom√°ticamente el puerto 7845 cuando est√° ocupado")
    else:
        print("‚ùå PRUEBA FALLIDA: Hay problemas con el manejo de puertos")
    
    return success

def test_frontend_port_override():
    """Prueba la funcionalidad de override de puerto en el frontend."""
    
    print("\nüåê Probando funcionalidad de override de puerto en frontend...")
    print("=" * 50)
    
    print("üìù Para probar el override de puerto en el frontend:")
    print("1. Abre la consola del navegador en una p√°gina con devpipe.js cargado")
    print("2. Ejecuta: DevPipe.setPort(8080)")
    print("3. Verifica: DevPipe.getCurrentPort() // deber√≠a retornar 8080")
    print("4. Verifica: DevPipe.getServerUrl() // deber√≠a apuntar al puerto 8080")
    print("5. Para limpiar: DevPipe.clearPort()")
    print("6. Verifica: DevPipe.getCurrentPort() // deber√≠a retornar 7845")
    
    print("\nüí° El puerto se guarda en localStorage como 'devpipe_port'")
    print("üí° El cliente autom√°ticamente usar√° el puerto personalizado si est√° configurado")

if __name__ == '__main__':
    print("üöÄ DevPipe - Prueba de Manejo de Puertos")
    print("=" * 50)
    
    # Verificar que estamos en el directorio correcto
    if not os.path.exists('server/main.py'):
        print("‚ùå Error: Ejecuta este script desde el directorio ra√≠z del proyecto")
        sys.exit(1)
    
    # Verificar que el entorno virtual existe
    if not os.path.exists('venv/bin/activate'):
        print("‚ùå Error: No se encontr√≥ el entorno virtual. Ejecuta: python -m venv venv")
        sys.exit(1)
    
    try:
        # Probar manejo de puertos del servidor
        success = test_port_management()
        
        # Mostrar informaci√≥n sobre el frontend
        test_frontend_port_override()
        
        if success:
            print("\nüéØ RESUMEN:")
            print("‚úÖ Servidor Python: Manejo autom√°tico de puerto 7845 funcionando")
            print("‚úÖ Cliente JavaScript: Override de puerto via localStorage disponible")
            print("‚úÖ Sistema listo para uso en desarrollo")
        else:
            print("\n‚ùå Hay problemas que necesitan ser resueltos")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\nüõë Prueba interrumpida por el usuario")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        sys.exit(1)



tracking-tool_code.txt
======================

# Project: tracking-tool
# Generated on: 2025-07-15 01:47:18



arquitectura_migracion.md
=========================

# Arquitectura y L√≥gica de Negocio para Migraci√≥n DevPipe

## Objetivo General
Crear un sistema simple y robusto para monitoreo de logs en aplicaciones web, permitiendo la gesti√≥n y visualizaci√≥n centralizada desde un panel web.

## Componentes Principales

### 1. Cliente (devpipe.js)
- Script que se integra f√°cilmente en cualquier web.
- Captura autom√°ticamente logs de consola y errores JS.
- Env√≠a los logs al servidor mediante HTTP (fetch/ajax).

### 2. Servidor
- Recibe los logs enviados por el cliente.
- Guarda cada log en un archivo de texto plano (formato JSON por l√≠nea).
- Expone endpoints HTTP para:
  - Recibir logs.
  - Consultar logs recientes.
  - Limpiar logs.
  - Configurar filtros y ubicaci√≥n del archivo.

### 3. Panel Web (Admin)
- Permite visualizar los logs en tiempo real o por consulta.
- Permite configurar:
  - Ubicaci√≥n del archivo de logs.
  - Palabras clave/patrones para filtrar URLs (decidir qu√© logs aceptar).
  - Acciones administrativas (limpiar, descargar, etc).
- Muestra m√©tricas b√°sicas: cantidad de logs, tama√±o del archivo, √∫ltimas URLs, etc.

## Flujos de Negocio

1. **Integraci√≥n:** El usuario integra devpipe.js en su web.
2. **Captura:** El script intercepta logs y errores, los env√≠a al servidor.
3. **Recepci√≥n:** El servidor recibe y almacena los logs en el archivo configurado.
4. **Visualizaci√≥n:** El panel web permite ver los logs, aplicar filtros y gestionar el archivo.
5. **Configuraci√≥n:** El usuario puede cambiar la ubicaci√≥n del archivo y los filtros de URL desde el panel.
6. **Administraci√≥n:** El usuario puede limpiar logs, descargar el archivo, y ver m√©tricas desde el panel.

## Requisitos Clave
- Facilidad de integraci√≥n (1 l√≠nea de JS).
- Configuraci√≥n flexible de filtros y archivo.
- Panel web intuitivo y r√°pido.
- Persistencia simple (archivo de texto).
- Seguridad b√°sica (acceso restringido al panel).

## Consideraciones para la Migraci√≥n
- Mantener la l√≥gica de negocio, simplificando la arquitectura y eliminando dependencias innecesarias.
- Priorizar la estabilidad y facilidad de mantenimiento.
- Usar Flask para el backend por su simplicidad y robustez.
- Mantener la carpeta `client` y el script devpipe.js como base para la nueva versi√≥n.

---
Este documento servir√° como gu√≠a para la migraci√≥n y redise√±o del sistema DevPipe.



INTEGRACION_COMPLETADA.md
=========================

# ‚úÖ Integraci√≥n API Frontend-Backend Completada

## üéâ Estado Actual

### ‚úÖ **COMPLETADO**
- **Backend Flask**: Funcionando en puerto 7845 con manejo autom√°tico de puertos
- **Frontend React**: Funcionando en puerto 5173 con integraci√≥n API completa
- **API Client**: Implementado con axios y manejo de errores
- **Componentes UI**: Actualizados para usar shadcn/ui en lugar de Material-UI
- **P√°ginas funcionales**: Config y Monitor completamente integradas

### üîß **Funcionalidades Implementadas**

#### 1. API Client (`client/src/lib/api.ts`)
- ‚úÖ Configuraci√≥n autom√°tica de puerto (7845 por defecto, con override via localStorage)
- ‚úÖ Interfaces TypeScript que coinciden con el servidor
- ‚úÖ Manejo de errores HTTP y timeouts
- ‚úÖ APIs para configuraci√≥n, logs y monitoreo

#### 2. P√°gina de Configuraci√≥n (`client/src/pages/Config.tsx`)
- ‚úÖ Carga configuraci√≥n desde servidor
- ‚úÖ Formulario completo con todos los campos del servidor
- ‚úÖ Validaci√≥n y feedback visual
- ‚úÖ Estado del servidor en tiempo real
- ‚úÖ Manejo de errores de conexi√≥n

#### 3. P√°gina de Monitor (`client/src/pages/Monitor.tsx`)
- ‚úÖ Lista de logs en tiempo real
- ‚úÖ Controles de monitoreo (Start/Pause/Stop)
- ‚úÖ Filtrado de logs por contenido
- ‚úÖ Formato visual mejorado con colores por nivel
- ‚úÖ Botones para actualizar y limpiar logs
- ‚úÖ Configuraci√≥n de l√≠mite de logs

#### 4. Layout y Navegaci√≥n
- ‚úÖ Sidebar responsivo con navegaci√≥n
- ‚úÖ Navbar con controles b√°sicos
- ‚úÖ Layout principal sin dependencias de Material-UI
- ‚úÖ Dise√±o responsive para m√≥vil y desktop

## üöÄ **C√≥mo Usar el Sistema**

### Iniciar el Sistema
```bash
# Terminal 1: Backend
source venv/bin/activate
python server/main.py

# Terminal 2: Frontend
cd client
npm run dev
```

### URLs
- **Backend API**: http://localhost:7845
- **Frontend**: http://localhost:5173

### Funcionalidades Disponibles

#### En el Frontend:
1. **P√°gina Monitor** (`/`):
   - Ver logs en tiempo real
   - Iniciar/pausar/detener monitoreo
   - Filtrar logs por contenido
   - Limpiar logs
   - Configurar l√≠mite de logs mostrados

2. **P√°gina Configuraci√≥n** (`/config`):
   - Ver estado del servidor
   - Configurar directorio de logs
   - Ajustar tama√±o m√°ximo de archivos
   - Configurar filtros de URL
   - Ajustar puerto del servidor
   - Configurar monitoreo autom√°tico

#### Desde la Consola del Navegador:
```javascript
// Configurar puerto personalizado
DevPipe.setPort(8080);

// Ver puerto actual
DevPipe.getCurrentPort();

// Limpiar puerto personalizado
DevPipe.clearPort();
```

## üß™ **Pruebas Realizadas**

### Backend API
- ‚úÖ GET /config - Obtener configuraci√≥n
- ‚úÖ POST /config - Actualizar configuraci√≥n
- ‚úÖ POST /log - Enviar logs
- ‚úÖ GET /logs - Obtener logs recientes
- ‚úÖ POST /logs/clear - Limpiar logs
- ‚úÖ POST /monitoring/start - Iniciar monitoreo
- ‚úÖ POST /monitoring/stop - Detener monitoreo

### Frontend
- ‚úÖ Carga inicial de configuraci√≥n
- ‚úÖ Guardado de configuraci√≥n
- ‚úÖ Visualizaci√≥n de logs en tiempo real
- ‚úÖ Filtrado de logs
- ‚úÖ Controles de monitoreo
- ‚úÖ Navegaci√≥n entre p√°ginas
- ‚úÖ Responsive design

### Integraci√≥n
- ‚úÖ Comunicaci√≥n frontend-backend
- ‚úÖ Manejo de errores de conexi√≥n
- ‚úÖ Actualizaci√≥n en tiempo real
- ‚úÖ Persistencia de configuraci√≥n

## üìä **Datos de Prueba Generados**

Se generaron logs de prueba con diferentes niveles:
- **INFO**: "‚úÖ Sistema iniciado correctamente"
- **ERROR**: "‚ùå Error de conexi√≥n con la base de datos"  
- **WARN**: "‚ö†Ô∏è Memoria alta detectada: 85%"

## üîß **Configuraci√≥n T√©cnica**

### Vite Config
- Configurado path alias `@` para imports
- Soporte para TypeScript
- Tailwind CSS integrado

### API Configuration
- Base URL autom√°tica basada en puerto
- Timeout de 5 segundos
- Interceptores para manejo de errores
- Soporte para puerto personalizado via localStorage

### TypeScript
- Interfaces completas para todas las APIs
- Tipos exportados para uso en componentes
- Validaci√≥n de tipos en tiempo de compilaci√≥n

## üéØ **Pr√≥ximos Pasos Sugeridos**

1. **Implementar comando clean en CLI** (scripts/devpipe.sh)
2. **Agregar m√°s pruebas automatizadas**
3. **Mejorar UI/UX con animaciones**
4. **Implementar tema oscuro completo**
5. **Agregar notificaciones push para errores cr√≠ticos**

## üìù **Archivos Modificados/Creados**

### Nuevos:
- `INTEGRACION_COMPLETADA.md` (este archivo)
- `test_port_management.py` (pruebas de puerto)
- `PUERTO_MANAGEMENT.md` (documentaci√≥n de puertos)
- `PENDIENTES.md` (tareas pendientes)

### Modificados:
- `client/src/lib/api.ts` - API client completo
- `client/src/pages/Config.tsx` - P√°gina de configuraci√≥n funcional
- `client/src/pages/Monitor.tsx` - P√°gina de monitor funcional
- `client/src/components/Layout/` - Componentes sin Material-UI
- `client/vite.config.ts` - Configuraci√≥n de path alias
- `server/main.py` - Manejo autom√°tico de puertos
- `client/devpipe.js` - Override de puerto via localStorage
- `progress.md` - Estado actualizado del proyecto

---

## üéâ **Resultado Final**

**El sistema DevPipe est√° ahora completamente funcional con integraci√≥n frontend-backend completa. Los usuarios pueden monitorear logs en tiempo real, configurar el sistema desde una interfaz web moderna, y el sistema maneja autom√°ticamente conflictos de puertos.**

**Progreso del proyecto: ~90% completado** ‚úÖ



PENDIENTES.md
=============

# üìã Tareas Pendientes - DevPipe

## üéØ Estado Actual del Proyecto

### ‚úÖ **COMPLETADO**
- **Servidor Flask**: Completamente funcional con API REST
- **Sistema de Puertos**: Manejo autom√°tico del puerto 7845 con liberaci√≥n de procesos
- **Cliente JavaScript**: Override de puerto via localStorage
- **CLI B√°sico**: Comandos start, stop, status
- **Estructura React**: Componentes UI b√°sicos y p√°ginas principales

### üîÑ **EN PROGRESO / PENDIENTE**

## 1. üåê Frontend React - Integraci√≥n API

### Prioridad: ALTA
**Estado**: Estructura creada, falta integraci√≥n completa

**Tareas Espec√≠ficas**:
- [ ] **Conectar p√°gina Config con API del servidor**
  - Integrar `client/src/pages/Config.tsx` con endpoints `/config`
  - Implementar carga y guardado de configuraci√≥n real
  - Agregar validaci√≥n de formularios
  - Feedback visual de operaciones

- [ ] **Implementar p√°gina Monitor funcional**
  - Crear polling para endpoint `/logs`
  - Mostrar logs en tiempo real
  - Implementar filtros de logs
  - Controles play/pause/stop para monitoreo

- [ ] **Cliente API completo**
  - Completar `client/src/api/` con todos los endpoints
  - Manejo de errores HTTP
  - Retry logic para conexiones fallidas
  - Tipos TypeScript para respuestas

**Archivos a modificar**:
- `client/src/pages/Config.tsx`
- `client/src/pages/Monitor.tsx`
- `client/src/api/` (crear archivos faltantes)

## 2. üîß CLI - Comando Clean

### Prioridad: MEDIA
**Estado**: Script existe, funci√≥n clean no implementada

**Tareas Espec√≠ficas**:
- [ ] **Implementar funci√≥n clean_logs() en devpipe.sh**
  - Limpiar archivos de logs del directorio `logs/`
  - Llamar endpoint `/logs/clear` del servidor
  - Confirmaci√≥n antes de limpiar
  - Feedback de operaci√≥n

**Archivos a modificar**:
- `scripts/devpipe.sh` (l√≠nea 47-49)

## 3. üìä Endpoints API Faltantes

### Prioridad: MEDIA
**Estado**: Algunos endpoints del plan original no est√°n implementados

**Seg√∫n plan.md, faltan**:
- [ ] `POST /files/select` - Seleccionar archivo externo
- [ ] `POST /files/combine` - Combinar logs
- [ ] `DELETE /logs` - Borrar logs (existe `/logs/clear`)

**Decisi√≥n necesaria**: ¬øSon realmente necesarios estos endpoints o el plan cambi√≥?

## 4. üé® UI/UX Mejoras

### Prioridad: BAJA
**Estado**: Funcionalidad b√°sica, falta pulimiento

**Tareas Espec√≠ficas**:
- [ ] **Dise√±o responsivo completo**
- [ ] **Tema claro/oscuro**
- [ ] **Animaciones y transiciones**
- [ ] **Feedback visual mejorado**
- [ ] **Manejo de estados de carga**

## 5. üß™ Testing y Documentaci√≥n

### Prioridad: MEDIA
**Estado**: Pruebas b√°sicas existen, falta cobertura completa

**Tareas Espec√≠ficas**:
- [ ] **Pruebas de integraci√≥n frontend-backend**
- [ ] **Pruebas E2E del flujo completo**
- [ ] **Documentaci√≥n de API actualizada**
- [ ] **Gu√≠a de usuario del panel web**

## üìÖ Roadmap Sugerido

### Sprint 1 (Pr√≥ximo) - Funcionalidad Core
1. **Conectar Config.tsx con API** (2-3 horas)
2. **Implementar Monitor.tsx b√°sico** (3-4 horas)
3. **Completar comando clean** (1 hora)

### Sprint 2 - Monitoreo en Tiempo Real
1. **Polling de logs en tiempo real** (2-3 horas)
2. **Filtros y controles de monitoreo** (2-3 horas)
3. **Manejo de errores y reconexi√≥n** (1-2 horas)

### Sprint 3 - Pulimiento
1. **UI/UX mejoras** (3-4 horas)
2. **Testing completo** (2-3 horas)
3. **Documentaci√≥n final** (1-2 horas)

## üöÄ Para Empezar Inmediatamente

### Tarea M√°s Cr√≠tica: Conectar Config.tsx

**Archivo**: `client/src/pages/Config.tsx`
**Problema**: Usa `configApi.getConfig()` y `configApi.updateConfig()` pero estos no est√°n implementados correctamente

**Soluci√≥n**:
1. Crear/completar `client/src/api/config.ts`
2. Implementar llamadas HTTP a `http://localhost:7845/config`
3. Manejar respuestas y errores
4. Actualizar tipos TypeScript

**C√≥digo ejemplo necesario**:
```typescript
// client/src/api/config.ts
export const configApi = {
  async getConfig() {
    const response = await fetch('http://localhost:7845/config');
    return response.json();
  },
  
  async updateConfig(config: any) {
    const response = await fetch('http://localhost:7845/config', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(config)
    });
    return response.json();
  }
};
```

## üîç An√°lisis de Dependencias

**Para completar el frontend se necesita**:
1. ‚úÖ Servidor funcionando (LISTO)
2. ‚úÖ Endpoints API (LISTOS)
3. ‚ùå Cliente API en React (FALTA)
4. ‚ùå Integraci√≥n en componentes (FALTA)

**Bloqueos actuales**:
- Frontend no puede funcionar sin cliente API
- Monitor no puede mostrar logs sin polling implementado
- Config no puede guardar sin integraci√≥n API

## üí° Recomendaciones

1. **Priorizar integraci√≥n API** antes que nuevas funcionalidades
2. **Usar el sistema de puertos ya implementado** para desarrollo
3. **Aprovechar la estructura React existente** que est√° bien organizada
4. **Mantener la simplicidad** del dise√±o actual

---

**√öltima actualizaci√≥n**: 2025-07-15
**Estado del proyecto**: ~75% completado, funcionalidad core lista, falta integraci√≥n frontend



plan.md
=======

# Plan de Implementaci√≥n DevPipe

## Estructura del Proyecto

```
tracking-tool/
‚îú‚îÄ‚îÄ server/
‚îÇ   ‚îú‚îÄ‚îÄ main.py           # Servidor Flask principal
‚îÇ   ‚îú‚îÄ‚îÄ api/              # Endpoints de la API
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ logs.py       # Endpoints para gesti√≥n de logs
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ config.py     # Endpoints para configuraci√≥n
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ files.py      # Endpoints para gesti√≥n de archivos
‚îÇ   ‚îú‚îÄ‚îÄ core/             # L√≥gica central
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ log_manager.py    # Gesti√≥n de logs y archivos
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ file_watcher.py   # Monitoreo de archivos externos
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ config_manager.py # Gesti√≥n de configuraci√≥n
‚îÇ   ‚îî‚îÄ‚îÄ utils/            # Utilidades
‚îÇ       ‚îî‚îÄ‚îÄ file_utils.py # Utilidades para manejo de archivos
‚îú‚îÄ‚îÄ client/
‚îÇ   ‚îî‚îÄ‚îÄ devpipe.js        # Cliente JavaScript (existente)
‚îú‚îÄ‚îÄ frontend/             # Panel web en React
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/   # Componentes React
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/       # P√°ginas principales
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ api/         # Cliente API
‚îÇ   ‚îî‚îÄ‚îÄ public/          # Recursos est√°ticos
‚îú‚îÄ‚îÄ scripts/
‚îÇ   ‚îî‚îÄ‚îÄ devpipe.sh       # Script para comandos CLI
‚îî‚îÄ‚îÄ config/
    ‚îî‚îÄ‚îÄ default.json     # Configuraci√≥n por defecto
```

## Componentes Principales

### 1. Servidor Flask

#### Endpoints API:
- `POST /log` - Recibir logs de devpipe.js
- `GET /logs` - Obtener logs recientes
- `POST /config` - Actualizar configuraci√≥n
- `GET /config` - Obtener configuraci√≥n actual
- `POST /files/select` - Seleccionar archivo externo
- `POST /files/combine` - Combinar logs
- `DELETE /logs` - Borrar logs

#### Estados del Servidor:
1. Servidor Activo (devpipe start)
2. Monitoreo Activo (iniciado desde panel)
3. Captura en Pausa (desde panel)

### 2. Panel Web (React)

#### Caracter√≠sticas:
- Selector de carpeta para logs
- Selector de archivo externo
- Panel de monitoreo en tiempo real
- Configuraci√≥n de filtros
- Botones de control (play/pause/stop)
- Vista combinada de logs
- Bot√≥n de limpieza de logs

#### Vistas Principales:
1. Dashboard
   - Monitor en tiempo real (√∫ltimos 10 logs por defecto)
   - Estado del servidor y monitoreo
   - M√©tricas b√°sicas

2. Configuraci√≥n
   - Selecci√≥n de carpetas/archivos
   - Filtros de URL
   - Tama√±o m√°ximo de archivos
   - N√∫mero de logs a mostrar

3. Herramientas
   - Combinaci√≥n de logs
   - Limpieza de logs
   - Copiar al portapapeles

### 3. Comandos CLI

```bash
devpipe start    # Inicia el servidor
devpipe stop     # Detiene el servidor
devpipe clean    # Limpia los logs
devpipe status   # Muestra estado actual
```

## Plan de Implementaci√≥n

### Fase 1: Servidor Base
1. Implementar servidor Flask b√°sico
2. Integrar endpoint de logs existente
3. Implementar gesti√≥n de configuraci√≥n
4. Implementar sistema de monitoreo de archivos

### Fase 2: Panel Web
1. Configurar proyecto React
2. Implementar UI b√°sica
3. Integrar con API del servidor
4. Implementar monitoreo en tiempo real
5. Implementar selecci√≥n de archivos

### Fase 3: Integraci√≥n
1. Implementar comandos CLI
2. Integrar monitoreo combinado
3. Implementar funcionalidad de combinaci√≥n
4. Pruebas de integraci√≥n

### Fase 4: Refinamiento
1. Optimizaci√≥n de rendimiento
2. Mejoras de UX
3. Pruebas finales

## Consideraciones T√©cnicas

### Monitoreo de Archivos
- Uso de `watchdog` para monitorear cambios
- Buffer circular para logs recientes
- L√≠mite configurable de l√≠neas a mostrar

### Sincronizaci√≥n
- Polling cada segundo para actualizaciones en tiempo real
- Estado centralizado en el servidor
- API REST para todas las operaciones

### Persistencia
- Logs en archivos planos
- Configuraci√≥n en JSON
- Respaldo de estado del servidor

### Seguridad
- Sin autenticaci√≥n en esta fase
- Validaci√≥n b√°sica de entradas
- Protecci√≥n contra desbordamiento de memoria



progress.md
===========

# Progress Tracking

## Fase 1: Servidor Base

### Configuraci√≥n Inicial
- [x] Crear estructura de directorios
- [x] Configurar entorno virtual Python
- [x] Instalar Flask y dependencias b√°sicas
- [x] Crear archivo de configuraci√≥n por defecto

### API Base
- [x] Implementar servidor Flask b√°sico
- [x] Configurar CORS para desarrollo
- [x] Implementar endpoint POST /log
- [x] Implementar sistema de respuesta est√°ndar

### Gesti√≥n de Logs
- [x] Implementar LogManager
- [x] Sistema de escritura de logs
- [x] Control de tama√±o de archivo
- [x] Rotaci√≥n de logs

### Monitoreo de Archivos
- [x] Implementar FileWatcher
- [x] Sistema de detecci√≥n de cambios
- [x] Buffer de logs recientes
- [x] Control de tama√±o de buffer

### Configuraci√≥n
- [x] Implementar ConfigManager
- [x] Sistema de guardado/carga de configuraci√≥n
- [x] Endpoints de configuraci√≥n
- [x] Validaci√≥n de configuraci√≥n

### Correcci√≥n de Errores
- [x] Corregir errores de tipado en file_watcher.py
- [x] Corregir errores de tipado en main.py
- [x] Corregir errores de tipado en log_manager.py
- [x] Corregir errores de tipado en config_manager.py
- [x] Corregir errores de tipado en models.py
- [x] Verificar compilaci√≥n de todos los archivos Python

### Manejo de Puertos (NUEVO)
- [x] Implementar liberaci√≥n autom√°tica del puerto 7845
- [x] Funciones para detectar y terminar procesos en puerto
- [x] Manejo robusto de excepciones para liberaci√≥n de puertos
- [x] Override de puerto en cliente JavaScript via localStorage
- [x] Funciones DevPipe.setPort(), clearPort(), getCurrentPort()
- [x] Script de pruebas autom√°ticas para manejo de puertos
- [x] Documentaci√≥n completa del sistema de puertos

## Fase 2: Panel Web

### Setup Inicial
- [x] Crear proyecto React
- [x] Configurar estructura de carpetas
- [x] Instalar dependencias necesarias
- [x] Configurar cliente API b√°sico
- [x] Implementar componentes UI b√°sicos (Button, Card, Input, etc.)
- [x] Configurar p√°ginas principales (Config, Monitor)
- [ ] Conectar completamente con API del servidor

### Panel de Configuraci√≥n
- [x] Estructura b√°sica del componente Config
- [ ] Integraci√≥n completa con endpoints del servidor
- [ ] Validaci√≥n de formularios
- [ ] Feedback visual de guardado

### Funcionalidades Core
- [ ] Implementar polling de logs
- [ ] Sistema de filtrado
- [ ] Control de monitoreo (play/pause/stop)
- [ ] Selecci√≥n de archivos

### UI/UX
- [ ] Dise√±o responsivo
- [ ] Temas claro/oscuro
- [ ] Animaciones y transiciones
- [ ] Feedback visual

## Fase 3: CLI y Scripts

### Comandos Base
- [x] Implementar script devpipe.sh
- [x] Comando start
- [x] Comando stop
- [x] Comando status
- [ ] Comando clean (implementaci√≥n pendiente)

### Integraci√≥n
- [ ] Integrar con sistema operativo
- [ ] Configurar permisos
- [ ] Pruebas de integraci√≥n

## Estado Actual

### ‚úÖ **Fase 1 COMPLETADA**: Servidor Flask
- Servidor Flask completamente funcional con todos los errores corregidos
- **NUEVO**: Sistema de manejo autom√°tico de puertos implementado
- **NUEVO**: Cliente JavaScript con override de puerto via localStorage
- **NUEVO**: Scripts de prueba y documentaci√≥n completa

### ÔøΩ **Fase 2 EN PROGRESO**: Panel Web
- Estructura React b√°sica creada
- Componentes UI implementados
- P√°ginas principales estructuradas
- **PENDIENTE**: Integraci√≥n completa con API del servidor
- **PENDIENTE**: Funcionalidades de monitoreo en tiempo real

### üîÑ **Fase 3 PARCIALMENTE COMPLETADA**: CLI y Scripts
- Scripts b√°sicos implementados (start, stop, status)
- **PENDIENTE**: Comando clean
- **PENDIENTE**: Integraci√≥n completa con sistema operativo

## Pr√≥ximos Pasos Prioritarios

1. **Completar integraci√≥n API en frontend React**
2. **Implementar monitoreo en tiempo real en panel web**
3. **Finalizar comando clean en CLI**
4. **Pruebas de integraci√≥n completas**



PUERTO_MANAGEMENT.md
====================

# üîå Manejo de Puertos en DevPipe

Este documento describe el sistema de manejo autom√°tico de puertos implementado en DevPipe para garantizar que el servidor siempre pueda iniciarse en el puerto 7845.

## üéØ Objetivo

El sistema est√° dise√±ado para que el cliente DevPipe siempre use el puerto 7845, liberando autom√°ticamente cualquier proceso que lo est√© ocupando cuando sea necesario.

## üîß Funcionalidades Implementadas

### 1. Servidor Python - Liberaci√≥n Autom√°tica de Puerto

El servidor Python (`server/main.py`) ahora incluye:

#### Funciones Principales:

- **`kill_process_on_port(port)`**: Termina procesos que usan un puerto espec√≠fico
- **`is_port_available(port)`**: Verifica si un puerto est√° disponible
- **`ensure_port_available(port)`**: Asegura que un puerto est√© libre

#### Comportamiento:

1. **Al iniciar el servidor**: Verifica si el puerto 7845 est√° disponible
2. **Si est√° ocupado**: Busca y termina los procesos que lo usan
3. **M√©todos de terminaci√≥n**:
   - Primero intenta `SIGTERM` (terminaci√≥n elegante)
   - Si falla, usa `SIGKILL` (terminaci√≥n forzada)
4. **Compatibilidad**: Usa `lsof` como m√©todo principal y `netstat` como respaldo

#### Ejemplo de Salida:

```bash
üöÄ Iniciando DevPipe Server en puerto 7845...
‚ö†Ô∏è  Puerto 7845 est√° ocupado, intentando liberar...
üîç Encontrados procesos usando el puerto 7845: 12345
üî™ Terminando proceso 12345...
‚úÖ Proceso 12345 terminado
‚úÖ Puerto 7845 liberado exitosamente
‚úÖ Servidor DevPipe iniciado en http://localhost:7845
```

### 2. Cliente JavaScript - Override de Puerto

El cliente JavaScript (`client/devpipe.js`) ahora incluye:

#### Funciones Disponibles:

- **`DevPipe.setPort(puerto)`**: Configura un puerto personalizado
- **`DevPipe.clearPort()`**: Elimina el puerto personalizado
- **`DevPipe.getCurrentPort()`**: Obtiene el puerto actual
- **`DevPipe.getServerUrl()`**: Obtiene la URL completa del servidor

#### Uso en Consola del Navegador:

```javascript
// Configurar puerto personalizado
DevPipe.setPort(8080);

// Verificar puerto actual
DevPipe.getCurrentPort(); // Retorna: 8080

// Verificar URL del servidor
DevPipe.getServerUrl(); // Retorna: "http://localhost:8080"

// Limpiar puerto personalizado
DevPipe.clearPort();

// Verificar que volvi√≥ al puerto por defecto
DevPipe.getCurrentPort(); // Retorna: 7845
```

#### Almacenamiento:

- El puerto personalizado se guarda en `localStorage` como `'devpipe_port'`
- Persiste entre sesiones del navegador
- Se aplica autom√°ticamente al cargar la p√°gina

## üß™ Pruebas

### Script de Prueba Autom√°tica

Ejecuta el script de prueba para verificar el funcionamiento:

```bash
python test_port_management.py
```

Este script:
1. Ocupa el puerto 7845 con un proceso dummy
2. Inicia el servidor DevPipe
3. Verifica que el puerto se libere autom√°ticamente
4. Confirma que el servidor funcione correctamente

### Prueba Manual del Frontend

1. Abre una p√°gina con `devpipe.js` cargado
2. Abre la consola del navegador
3. Ejecuta los comandos de ejemplo mostrados arriba

## üîÑ Flujo de Trabajo

### Escenario Normal:
1. Usuario ejecuta `python server/main.py`
2. Puerto 7845 est√° libre
3. Servidor se inicia normalmente

### Escenario con Puerto Ocupado:
1. Usuario ejecuta `python server/main.py`
2. Puerto 7845 est√° ocupado por otro proceso
3. Sistema detecta el conflicto
4. Termina autom√°ticamente el proceso conflictivo
5. Servidor se inicia en el puerto liberado

### Escenario con Puerto Personalizado (Frontend):
1. Usuario configura puerto personalizado: `DevPipe.setPort(8080)`
2. Cliente env√≠a logs a `http://localhost:8080`
3. Configuraci√≥n persiste en localStorage

## ‚öôÔ∏è Configuraci√≥n

### Puerto por Defecto

El puerto por defecto (7845) est√° configurado en:
- `config/config.json`: `"port": 7845`
- `server/core/config_manager.py`: Puerto por defecto en configuraci√≥n
- `client/devpipe.js`: Puerto hardcodeado como respaldo

### Variables de Entorno

Puedes sobrescribir el puerto usando la variable de entorno `PORT`:

```bash
PORT=8080 python server/main.py
```

## üõ†Ô∏è Soluci√≥n de Problemas

### Error: "No se pudo liberar el puerto"

**Posibles causas:**
- Proceso con permisos elevados ocupando el puerto
- Comando `lsof` no disponible en el sistema

**Soluciones:**
1. Ejecutar con `sudo` (no recomendado)
2. Cambiar el puerto en la configuraci√≥n
3. Terminar manualmente el proceso conflictivo

### Error: "Comando 'lsof' no encontrado"

**Soluci√≥n:**
```bash
# Ubuntu/Debian
sudo apt-get install lsof

# CentOS/RHEL
sudo yum install lsof

# macOS
brew install lsof
```

### Puerto Personalizado No Funciona

**Verificaciones:**
1. Confirmar que el puerto est√° guardado: `localStorage.getItem('devpipe_port')`
2. Verificar que el servidor est√© corriendo en ese puerto
3. Limpiar localStorage y reintentar

## üìã Comandos √ötiles

```bash
# Verificar qu√© proceso usa el puerto 7845
lsof -i :7845

# Terminar proceso espec√≠fico
kill -TERM <PID>

# Verificar puertos en uso
netstat -tlnp | grep 7845

# Probar conectividad
curl http://localhost:7845/config
```

## üîÆ Pr√≥ximas Mejoras

1. **Interfaz gr√°fica** para configurar puerto en el frontend
2. **Detecci√≥n autom√°tica** de puertos alternativos disponibles
3. **Logs m√°s detallados** del proceso de liberaci√≥n de puertos
4. **Configuraci√≥n por proyecto** para puertos personalizados

---

## üìù Notas T√©cnicas

- El sistema usa `SIGTERM` seguido de `SIGKILL` para m√°xima compatibilidad
- El cliente JavaScript verifica localStorage en cada carga de p√°gina
- La configuraci√≥n del puerto se mantiene separada entre servidor y cliente para flexibilidad futura
- El sistema es compatible con Linux, macOS y Windows (con limitaciones en Windows para `lsof`)



README.md
=========

# DevPipe - Tracking Tool

Una herramienta de monitoreo y tracking en tiempo real para aplicaciones web, construida con Flask y React.

## üöÄ Caracter√≠sticas

- **Servidor Flask** con API REST completa
- **Sistema de logs** con rotaci√≥n autom√°tica
- **Monitoreo de archivos** en tiempo real
- **Panel web React** para visualizaci√≥n (pr√≥ximamente)
- **CLI tools** para gesti√≥n del proyecto

## üìÅ Estructura del Proyecto

```
tracking-tool/
‚îú‚îÄ‚îÄ server/                 # Backend Flask
‚îÇ   ‚îú‚îÄ‚îÄ main.py            # Servidor principal
‚îÇ   ‚îú‚îÄ‚îÄ core/              # M√≥dulos core
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ config_manager.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ file_watcher.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ log_manager.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ models.py
‚îÇ   ‚îî‚îÄ‚îÄ api/               # Endpoints API
‚îú‚îÄ‚îÄ client/                # Frontend React (pr√≥ximamente)
‚îú‚îÄ‚îÄ config/                # Archivos de configuraci√≥n
‚îú‚îÄ‚îÄ logs/                  # Archivos de log
‚îú‚îÄ‚îÄ scripts/               # Scripts de utilidad
‚îî‚îÄ‚îÄ docs/                  # Documentaci√≥n
```

## üõ†Ô∏è Instalaci√≥n

1. **Clonar el repositorio**
```bash
git clone <repository-url>
cd tracking-tool
```

2. **Crear entorno virtual**
```bash
python -m venv venv
source venv/bin/activate  # Linux/Mac
# venv\Scripts\activate   # Windows
```

3. **Instalar dependencias**
```bash
pip install -r requirements.txt
```

4. **Ejecutar el servidor**
```bash
python server/main.py
```

## üîß API Endpoints

| M√©todo | Endpoint | Descripci√≥n |
|--------|----------|-------------|
| GET | `/config` | Obtener configuraci√≥n actual |
| POST | `/config` | Actualizar configuraci√≥n |
| POST | `/log` | Enviar nuevo log |
| GET | `/logs` | Obtener logs recientes |
| POST | `/logs/clear` | Limpiar todos los logs |
| POST | `/monitoring/start` | Iniciar monitoreo |
| POST | `/monitoring/stop` | Detener monitoreo |

## üß™ Tests

Ejecutar tests de endpoints:
```bash
./test_endpoints.sh
```

## üìù Configuraci√≥n

El archivo `config/config.json` contiene la configuraci√≥n del sistema:

```json
{
  "port": 7845,
  "logDir": "logs",
  "maxFileSize": 100,
  "maxLogs": 20,
  "monitoring": {
    "enabled": false,
    "intervalMs": 1000
  },
  "urlFilters": []
}
```

## ü§ù Contribuir

1. Fork el proyecto
2. Crear una rama feature (`git checkout -b feature/AmazingFeature`)
3. Commit los cambios (`git commit -m 'Add some AmazingFeature'`)
4. Push a la rama (`git push origin feature/AmazingFeature`)
5. Abrir un Pull Request

## üìã Roadmap

- [x] **Fase 1**: Servidor Flask base
  - [x] API REST completa
  - [x] Sistema de logs
  - [x] Monitoreo de archivos
  - [x] Tests de endpoints
- [ ] **Fase 2**: Panel web React
  - [ ] Interface de usuario
  - [ ] Visualizaci√≥n en tiempo real
  - [ ] Configuraci√≥n via web
- [ ] **Fase 3**: CLI y deployment
  - [ ] Scripts de gesti√≥n
  - [ ] Docker support
  - [ ] Deployment tools

## üìÑ Licencia

Este proyecto est√° bajo la Licencia MIT - ver el archivo [LICENSE](LICENSE) para detalles.

## üë• Autores

- **Equipo DevPipe** - *Desarrollo inicial*

## üôè Agradecimientos

- Flask por el framework web
- Watchdog por el monitoreo de archivos
- La comunidad open source por las herramientas utilizadas



requirements.txt
================

flask==3.0.0
flask-cors==4.0.0
watchdog==3.0.0
requests==2.32.4



status.sh
=========

#!/bin/bash

# Script para verificar el estado del servidor DevPipe
# Uso: ./status.sh

PORT=7845
URL="http://localhost:$PORT"

echo "üîç Verificando estado del servidor DevPipe..."
echo ""

# Verificar si el puerto est√° en uso
echo "üìä Estado del puerto $PORT:"
PIDS=$(lsof -ti:$PORT 2>/dev/null)
if [ -z "$PIDS" ]; then
    echo "‚ùå Puerto $PORT no est√° en uso"
    echo ""
    echo "üí° Para iniciar el servidor:"
    echo "   ./start.sh"
    exit 1
else
    echo "‚úÖ Puerto $PORT en uso por procesos: $PIDS"
    echo ""
    
    # Mostrar detalles de los procesos
    echo "üîß Detalles de procesos:"
    echo "$PIDS" | while read pid; do
        if [ ! -z "$pid" ]; then
            ps aux | grep "^[^ ]* *$pid " | grep -v grep
        fi
    done
fi

echo ""

# Verificar conectividad HTTP
echo "üåê Verificando conectividad HTTP..."
if curl -s --connect-timeout 5 "$URL" > /dev/null; then
    echo "‚úÖ Servidor respondiendo en $URL"
    
    # Obtener informaci√≥n del servidor
    echo ""
    echo "üìã Informaci√≥n del servidor:"
    curl -s "$URL" | python3 -m json.tool 2>/dev/null || echo "‚ùå Error al parsear respuesta JSON"
    
    echo ""
    echo "üîó Enlaces √∫tiles:"
    echo "   üè† Inicio: $URL"
    echo "   ‚öôÔ∏è  Admin: $URL/admin/"
    echo "   üìù Docs: $URL/docs/js"
    echo "   üß™ Demo: $URL/examples/simple-demo.html"
    echo "   üì¶ Script: $URL/client/devpipe.js"
    
else
    echo "‚ùå Servidor no responde en $URL"
    echo ""
    echo "üí° Posibles soluciones:"
    echo "   1. Verificar que el servidor est√© iniciado: ./start.sh"
    echo "   2. Verificar logs del servidor"
    echo "   3. Verificar puertos: netstat -tlnp | grep $PORT"
    exit 1
fi

echo ""
echo "‚ú® DevPipe est√° funcionando correctamente!"



test_endpoints.sh
=================

#!/bin/bash

# Tests b√°sicos de endpoints para el servidor Flask
# Tracking Tool - DevPipe

PORT=8000
BASE_URL="http://localhost:$PORT"

echo "=== TESTING SERVIDOR FLASK ==="
echo "URL base: $BASE_URL"
echo ""

# Test 1: GET /config
echo "Test 1: GET /config - Obtener configuraci√≥n"
response=$(curl -s "$BASE_URL/config")
if [[ $response == *"success"* ]]; then
    echo "‚úÖ PASADO"
else
    echo "‚ùå FALLIDO: $response"
fi
echo ""

# Test 2: POST /monitoring/start
echo "Test 2: POST /monitoring/start - Activar monitoreo"
response=$(curl -s -X POST "$BASE_URL/monitoring/start")
if [[ $response == *"success"* ]]; then
    echo "‚úÖ PASADO"
else
    echo "‚ùå FALLIDO: $response"
fi
echo ""

# Test 3: POST /log
echo "Test 3: POST /log - Enviar log"
response=$(curl -s -X POST "$BASE_URL/log" \
  -H "Content-Type: application/json" \
  -d '{
    "level": "info",
    "message": "Test log desde script",
    "url": "http://test.com",
    "timestamp": "2025-07-14T22:30:00",
    "user_agent": "test-script"
  }')
if [[ $response == *"success"* ]]; then
    echo "‚úÖ PASADO"
else
    echo "‚ùå FALLIDO: $response"
fi
echo ""

# Test 4: GET /logs
echo "Test 4: GET /logs - Obtener logs"
response=$(curl -s "$BASE_URL/logs")
if [[ $response == *"success"* ]] && [[ $response == *"data"* ]]; then
    echo "‚úÖ PASADO"
else
    echo "‚ùå FALLIDO: $response"
fi
echo ""

# Test 5: POST /monitoring/stop
echo "Test 5: POST /monitoring/stop - Parar monitoreo"
response=$(curl -s -X POST "$BASE_URL/monitoring/stop")
if [[ $response == *"success"* ]]; then
    echo "‚úÖ PASADO"
else
    echo "‚ùå FALLIDO: $response"
fi
echo ""

# Test 6: POST /logs/clear
echo "Test 6: POST /logs/clear - Limpiar logs"
response=$(curl -s -X POST "$BASE_URL/logs/clear")
if [[ $response == *"success"* ]]; then
    echo "‚úÖ PASADO"
else
    echo "‚ùå FALLIDO: $response"
fi
echo ""

# Test 7: POST /config
echo "Test 7: POST /config - Actualizar configuraci√≥n"
response=$(curl -s -X POST "$BASE_URL/config" \
  -H "Content-Type: application/json" \
  -d '{"maxFileSize": 150, "maxLogs": 30}')
if [[ $response == *"success"* ]]; then
    echo "‚úÖ PASADO"
else
    echo "‚ùå FALLIDO: $response"
fi
echo ""

# Test 8: Verificar configuraci√≥n actualizada
echo "Test 8: Verificar configuraci√≥n actualizada"
response=$(curl -s "$BASE_URL/config")
if [[ $response == *"maxFileSize\":150"* ]]; then
    echo "‚úÖ PASADO"
else
    echo "‚ùå FALLIDO: Configuraci√≥n no se actualiz√≥"
fi
echo ""

echo "=== RESUMEN ==="
echo "üéâ Tests completados"
echo "üöÄ Servidor Flask verificado y funcional"



test_port_management.py
=======================




client/.gitignore
=================

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?



client/client_code.txt
======================

# Project: client
# Generated on: 2025-07-15 01:04:18



client_code.txt
===============




components.json
===============

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/styles/index.css",
    "baseColor": "slate",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui"
  }
}



devpipe.js
==========

/**
 * DevPipe Client - Framework de Observabilidad para Desarrollo Local
 * 
 * Este script captura console.log, errores y otros eventos del navegador
 * y los env√≠a a un servidor local para monitoreo centralizado.
 * 
 * Solo se activa en entornos de desarrollo.
 */

(function() {
    'use strict';

    // Configuraci√≥n
    const CONFIG = {
        serverUrl: getServerUrl(),
        endpoint: '/log',
        maxRetries: 3,
        retryDelay: 1000,
        batchSize: 10,
        batchTimeout: 2000,
        enabledInProduction: false
    };

    // Verificar si debe activarse
    if (!shouldActivate()) {
        console.log('[DevPipe] No activado - entorno de producci√≥n detectado');
        return;
    }

    class DevPipeClient {
        constructor() {
            this.originalConsole = {};
            this.logQueue = [];
            this.batchTimer = null;
            this.isActive = true;
            
            this.init();
        }

        init() {
            console.log('[DevPipe] Inicializando cliente de observabilidad...');
            
            this.backupOriginalMethods();
            this.interceptConsole();
            this.interceptErrors();
            this.interceptUnhandledRejections();
            this.startBatchProcessor();
            
            console.log('[DevPipe] Cliente inicializado correctamente');
        }

        backupOriginalMethods() {
            // Guardar referencias a los m√©todos originales
            this.originalConsole = {
                log: console.log.bind(console),
                error: console.error.bind(console),
                warn: console.warn.bind(console),
                info: console.info.bind(console),
                debug: console.debug.bind(console)
            };
        }

        interceptConsole() {
            const self = this;
            
            // Interceptar console.log
            console.log = function(...args) {
                self.originalConsole.log.apply(console, args);
                self.captureLog('log', args);
            };

            // Interceptar console.error
            console.error = function(...args) {
                self.originalConsole.error.apply(console, args);
                self.captureLog('error', args);
            };

            // Interceptar console.warn
            console.warn = function(...args) {
                self.originalConsole.warn.apply(console, args);
                self.captureLog('warn', args);
            };

            // Interceptar console.info
            console.info = function(...args) {
                self.originalConsole.info.apply(console, args);
                self.captureLog('info', args);
            };

            // Interceptar console.debug
            console.debug = function(...args) {
                self.originalConsole.debug.apply(console, args);
                self.captureLog('debug', args);
            };
        }

        interceptErrors() {
            const self = this;
            
            // Interceptar errores globales
            window.addEventListener('error', function(event) {
                self.captureError({
                    message: event.message,
                    filename: event.filename,
                    lineno: event.lineno,
                    colno: event.colno,
                    error: event.error,
                    stack: event.error ? event.error.stack : null
                });
            });
        }

        interceptUnhandledRejections() {
            const self = this;
            
            // Interceptar promesas rechazadas no manejadas
            window.addEventListener('unhandledrejection', function(event) {
                self.captureError({
                    message: 'Unhandled Promise Rejection: ' + (event.reason || 'Unknown reason'),
                    stack: event.reason && event.reason.stack ? event.reason.stack : null,
                    type: 'unhandledrejection'
                });
            });
        }

        captureLog(level, args) {
            if (!this.isActive) return;

            const message = args.map(arg => {
                if (typeof arg === 'object') {
                    try {
                        return JSON.stringify(arg, null, 2);
                    } catch (e) {
                        return '[Object]';
                    }
                }
                return String(arg);
            }).join(' ');

            const logEntry = {
                level: level,
                message: message,
                url: window.location.href,
                timestamp: new Date().toISOString(),
                user_agent: navigator.userAgent,
                additional_data: {
                    args_count: args.length,
                    page_title: document.title
                }
            };

            this.queueLog(logEntry);
        }

        captureError(errorInfo) {
            if (!this.isActive) return;

            const logEntry = {
                level: 'error',
                message: errorInfo.message || 'Unknown error',
                url: window.location.href,
                timestamp: new Date().toISOString(),
                user_agent: navigator.userAgent,
                stack_trace: errorInfo.stack,
                additional_data: {
                    filename: errorInfo.filename,
                    lineno: errorInfo.lineno,
                    colno: errorInfo.colno,
                    type: errorInfo.type || 'javascript_error',
                    page_title: document.title
                }
            };

            this.queueLog(logEntry);
        }

        queueLog(logEntry) {
            this.logQueue.push(logEntry);
            
            // Si la cola est√° llena, enviar inmediatamente
            if (this.logQueue.length >= CONFIG.batchSize) {
                this.flushQueue();
            }
        }

        startBatchProcessor() {
            // Procesar cola cada cierto tiempo
            setInterval(() => {
                if (this.logQueue.length > 0) {
                    this.flushQueue();
                }
            }, CONFIG.batchTimeout);
        }

        flushQueue() {
            if (this.logQueue.length === 0) return;

            const logsToSend = [...this.logQueue];
            this.logQueue = [];

            // Enviar logs uno por uno (el servidor espera logs individuales)
            logsToSend.forEach(log => this.sendLog(log));
        }

        async sendLog(logEntry, retryCount = 0) {
            try {
                const response = await fetch(CONFIG.serverUrl + CONFIG.endpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(logEntry)
                });

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const result = await response.json();
                
                // Si el monitoreo est√° desactivado, pausar el cliente
                if (result.status === 'monitoring_disabled') {
                    this.originalConsole.warn('[DevPipe] Monitoreo desactivado en el servidor');
                    return;
                }

                // Si fue filtrado, no es un error
                if (result.status === 'filtered_out') {
                    return;
                }

            } catch (error) {
                // Reintentar si no se alcanz√≥ el m√°ximo de reintentos
                if (retryCount < CONFIG.maxRetries) {
                    setTimeout(() => {
                        this.sendLog(logEntry, retryCount + 1);
                    }, CONFIG.retryDelay * Math.pow(2, retryCount)); // Backoff exponencial
                } else {
                    // Solo mostrar error en consola si es el √∫ltimo intento
                    this.originalConsole.error('[DevPipe] Error enviando log despu√©s de', CONFIG.maxRetries, 'intentos:', error.message);
                }
            }
        }

        // M√©todo para desactivar temporalmente
        pause() {
            this.isActive = false;
            this.originalConsole.log('[DevPipe] Cliente pausado');
        }

        // M√©todo para reactivar
        resume() {
            this.isActive = true;
            this.originalConsole.log('[DevPipe] Cliente reanudado');
        }

        // M√©todo para restaurar console original
        restore() {
            Object.keys(this.originalConsole).forEach(method => {
                console[method] = this.originalConsole[method];
            });
            this.originalConsole.log('[DevPipe] Console original restaurado');
        }
    }

    // Funci√≥n para obtener URL del servidor
    function getServerUrl() {
        // Verificar si hay un puerto personalizado en localStorage
        const customPort = localStorage.getItem('devpipe_port');
        const hostname = window.location.hostname || 'localhost';

        if (customPort) {
            console.log(`[DevPipe] Usando puerto personalizado desde localStorage: ${customPort}`);
            return `http://${hostname}:${customPort}`;
        }

        // Si estamos en el mismo host que DevPipe, usar el puerto por defecto
        if (hostname === 'localhost' || hostname === '127.0.0.1') {
            return `http://${hostname}:7845`;
        }

        // Por defecto, usar localhost:7845
        return 'http://localhost:7845';
    }

    // Funci√≥n para configurar puerto personalizado
    function setCustomPort(port) {
        if (port && !isNaN(port) && port > 0 && port <= 65535) {
            localStorage.setItem('devpipe_port', port.toString());
            console.log(`[DevPipe] Puerto personalizado configurado: ${port}`);
            return true;
        } else {
            console.error('[DevPipe] Puerto inv√°lido:', port);
            return false;
        }
    }

    // Funci√≥n para limpiar puerto personalizado
    function clearCustomPort() {
        localStorage.removeItem('devpipe_port');
        console.log('[DevPipe] Puerto personalizado eliminado, usando puerto por defecto');
    }

    // Funci√≥n para obtener puerto actual
    function getCurrentPort() {
        const customPort = localStorage.getItem('devpipe_port');
        return customPort ? parseInt(customPort) : 7845;
    }

    // Funci√≥n para determinar si debe activarse
    function shouldActivate() {
        // Verificar variables de entorno comunes
        if (typeof process !== 'undefined' && process.env) {
            if (process.env.NODE_ENV === 'production' && !CONFIG.enabledInProduction) {
                return false;
            }
            if (process.env.NODE_ENV === 'development') {
                return true;
            }
        }

        // Verificar par√°metros de URL
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('debug') === 'true' || urlParams.get('devpipe') === 'true') {
            return true;
        }

        // Verificar si es localhost o desarrollo
        const hostname = window.location.hostname;
        if (hostname === 'localhost' || hostname === '127.0.0.1' || hostname.endsWith('.local')) {
            return true;
        }

        // Verificar puerto de desarrollo com√∫n
        const port = window.location.port;
        const devPorts = ['3000', '3001', '7845', '8000', '8080', '8888', '9000'];
        if (devPorts.includes(port)) {
            return true;
        }

        // Por defecto, no activar en producci√≥n
        return false;
    }

    // Inicializar cliente
    const devPipeClient = new DevPipeClient();

    // Exponer globalmente para debugging
    window.DevPipe = {
        client: devPipeClient,
        pause: () => devPipeClient.pause(),
        resume: () => devPipeClient.resume(),
        restore: () => devPipeClient.restore(),
        config: CONFIG,
        // Funciones para manejo de puerto personalizado
        setPort: setCustomPort,
        clearPort: clearCustomPort,
        getCurrentPort: getCurrentPort,
        getServerUrl: getServerUrl
    };

    // Log de inicializaci√≥n
    console.log('[DevPipe] Cliente cargado y listo para capturar logs');

})();



eslint.config.js
================

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])



index.html
==========

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>



package.json
============

{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-navigation-menu": "^1.2.13",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tabs": "^1.1.12",
    "@tanstack/react-query": "^5.83.0",
    "@types/react-router-dom": "^5.3.3",
    "axios": "^1.10.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.525.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.6.3",
    "tailwind-merge": "^3.3.1",
    "tw-animate-css": "^1.3.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.30.1",
    "@tailwindcss/postcss": "^4.1.11",
    "@tailwindcss/vite": "^4.1.11",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.6.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.30.1",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.11",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.35.1",
    "vite": "^7.0.4"
  }
}



README.md
=========

# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```



tsconfig.app.json
=================

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Path Aliases */
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    },

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}



tsconfig.json
=============

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}



tsconfig.node.json
==================

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}



vite.config.ts
==============

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [
    tailwindcss(),
    react()
  ],
  resolve: {
    alias: {
      '@': '/src',
    },
  },
})



@/components/ui/separator.tsx
=============================

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }



src/App.tsx
===========

import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import MainLayout from './components/Layout/MainLayout';
import Monitor from './pages/Monitor';
import Config from './pages/Config';

const queryClient = new QueryClient();

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <Router>
        <MainLayout>
          <Routes>
            <Route path="/" element={<Monitor />} />
            <Route path="/config" element={<Config />} />
          </Routes>
        </MainLayout>
      </Router>
    </QueryClientProvider>
  )
}

export default App



src/main.tsx
============

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './styles/index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)



src/vite-env.d.ts
=================

/// <reference types="vite/client" />



src/components/Layout/MainLayout.tsx
====================================

import { useState } from 'react';
import type { ReactNode } from 'react';
import Navbar from './Navbar';
import Sidebar from './Sidebar';

const drawerWidth = 240;

interface MainLayoutProps {
  children: ReactNode;
}

export default function MainLayout({ children }: MainLayoutProps) {
  const [mode, setMode] = useState<'light' | 'dark'>('light');
  const [sidebarOpen, setSidebarOpen] = useState(false);

  const handleDrawerToggle = () => {
    setSidebarOpen(!sidebarOpen);
  };

  const toggleColorMode = () => {
    setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));
  };

  return (
    <div className={`min-h-screen bg-gray-50 ${mode === 'dark' ? 'dark' : ''}`}>
      {/* Navbar fijo en la parte superior */}
      <Navbar
        open={sidebarOpen}
        drawerWidth={drawerWidth}
        onDrawerToggle={handleDrawerToggle}
        onThemeToggle={toggleColorMode}
        mode={mode}
      />

      {/* Sidebar */}
      <Sidebar
        open={sidebarOpen}
        drawerWidth={drawerWidth}
        onDrawerToggle={handleDrawerToggle}
      />

      {/* Contenido principal con margen apropiado */}
      <main className="pt-16 md:ml-60 transition-all duration-300 min-h-screen">
        <div className="p-6">
          {children}
        </div>
      </main>
    </div>
  );
}



src/components/Layout/Navbar.tsx
================================

import { Menu, Sun, Moon } from "lucide-react"
import { Button } from "@/components/ui/button"

interface NavbarProps {
  open: boolean;
  drawerWidth: number;
  onDrawerToggle: () => void;
  onThemeToggle?: () => void;
  mode?: 'light' | 'dark';
}

export default function Navbar({
  onDrawerToggle,
  onThemeToggle,
  mode = 'light',
}: NavbarProps) {
  return (
    <nav className="fixed top-0 left-0 md:left-60 right-0 z-40 bg-white border-b border-gray-200 h-16">
      <div className="container flex justify-between h-16 items-center px-4">
        <div>
          <Button
            variant="ghost"
            className="md:hidden"
            onClick={onDrawerToggle}
          >
            <Menu className="h-5 w-5" />
          </Button>
        </div>

        <div className="flex-1 text-center md:text-left">
          <h1 className="text-lg font-semibold text-gray-800">DevPipe Monitor</h1>
        </div>

        <div>
          {onThemeToggle && (
            <Button
              variant="ghost"
              className="w-9 px-0"
              onClick={onThemeToggle}
            >
              {mode === 'dark' ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
            </Button>
          )}
        </div>
      </div>
    </nav>
  );
}



src/components/Layout/Sidebar.tsx
=================================

import { useNavigate, useLocation } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { MonitorIcon, SettingsIcon } from 'lucide-react';

interface SidebarProps {
  open: boolean;
  drawerWidth: number;
  onDrawerToggle: () => void;
}

export default function Sidebar({
  open,
  drawerWidth,
  onDrawerToggle,
}: SidebarProps) {
  const navigate = useNavigate();
  const location = useLocation();

  const menuItems = [
    { text: 'Monitor', icon: MonitorIcon, path: '/' },
    { text: 'Configuraci√≥n', icon: SettingsIcon, path: '/config' },
  ];

  const sidebarContent = (
    <div className="p-4 space-y-2">
      <div className="mb-6">
        <h2 className="text-lg font-semibold text-gray-800">DevPipe</h2>
        <p className="text-sm text-gray-600">Monitor de Logs</p>
      </div>

      <nav className="space-y-1">
        {menuItems.map((item) => {
          const Icon = item.icon;
          const isActive = location.pathname === item.path;

          return (
            <Button
              key={item.text}
              variant={isActive ? "default" : "ghost"}
              className="w-full justify-start"
              onClick={() => {
                navigate(item.path);
                onDrawerToggle();
              }}
            >
              <Icon className="h-4 w-4 mr-2" />
              {item.text}
            </Button>
          );
        })}
      </nav>
    </div>
  );

  return (
    <>
      {/* Mobile sidebar overlay */}
      {open && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden"
          onClick={onDrawerToggle}
        />
      )}

      {/* Mobile sidebar */}
      <div className={`
        fixed top-0 left-0 h-full bg-white z-50 transform transition-transform duration-300 ease-in-out md:hidden
        ${open ? 'translate-x-0' : '-translate-x-full'}
      `} style={{ width: drawerWidth }}>
        <Card className="h-full rounded-none border-r">
          <CardContent className="p-0">
            {sidebarContent}
          </CardContent>
        </Card>
      </div>

      {/* Desktop sidebar - fijo en la izquierda */}
      <div
        className="hidden md:block fixed top-0 left-0 h-full z-30 bg-white border-r border-gray-200"
        style={{ width: drawerWidth }}
      >
        <div className="h-full overflow-y-auto">
          {sidebarContent}
        </div>
      </div>
    </>
  );
}



src/components/ui/button.tsx
============================

import { cva, type VariantProps } from "class-variance-authority"
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 dark:ring-offset-slate-950 dark:focus-visible:ring-slate-300",
  {
    variants: {
      variant: {
        default: "bg-slate-900 text-slate-50 hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90",
        destructive:
          "bg-red-500 text-slate-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-slate-50 dark:hover:bg-red-900/90",
        outline:
          "border border-slate-200 bg-white hover:bg-slate-100 hover:text-slate-900 dark:border-slate-800 dark:bg-slate-950 dark:hover:bg-slate-800 dark:hover:text-slate-50",
        secondary:
          "bg-slate-100 text-slate-900 hover:bg-slate-100/80 dark:bg-slate-800 dark:text-slate-50 dark:hover:bg-slate-800/80",
        ghost: "hover:bg-slate-100 hover:text-slate-900 dark:hover:bg-slate-800 dark:hover:text-slate-50",
        link: "text-slate-900 underline-offset-4 hover:underline dark:text-slate-50",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

export function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: ButtonProps) {
  const Comp = asChild ? Slot : "button"
  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}



src/components/ui/card.tsx
==========================

import * as React from "react"
import { cn } from "@/lib/utils"

const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      data-slot="card"
      className={cn(
        "rounded-lg border bg-card text-card-foreground shadow-sm",
        className
      )}
      {...props}
    />
  )
)
Card.displayName = "Card"

const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      data-slot="card-header"
      className={cn("flex flex-col space-y-1.5 p-6", className)}
      {...props}
    />
  )
)
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
  ({ className, ...props }, ref) => (
    <h3
      ref={ref}
      data-slot="card-title"
      className={cn(
        "text-2xl font-semibold leading-none tracking-tight",
        className
      )}
      {...props}
    />
  )
)
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => (
    <p
      ref={ref}
      data-slot="card-description"
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
)
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} data-slot="card-content" className={cn("p-6 pt-0", className)} {...props} />
  )
)
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      data-slot="card-footer"
      className={cn("flex items-center p-6 pt-0", className)}
      {...props}
    />
  )
)
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



src/components/ui/dialog.tsx
============================

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"
import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogClose = DialogPrimitive.Close

const DialogPortal = DialogPrimitive.Portal

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    data-slot="dialog-overlay"
    className={cn(
      "fixed inset-0 z-50 bg-black/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      data-slot="dialog-content"
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    data-slot="dialog-header"
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    data-slot="dialog-footer"
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    data-slot="dialog-title"
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    data-slot="dialog-description"
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}



src/components/ui/dropdown-menu.tsx
===================================

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"
import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}



src/components/ui/input.tsx
===========================

import * as React from "react"
import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }



src/components/ui/label.tsx
===========================

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cn } from "@/lib/utils"

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(
      "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
      className
    )}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



src/components/ui/navigation-menu.tsx
=====================================

import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-white shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(
      "group inline-flex h-10 w-max items-center justify-center rounded-md bg-white px-4 py-2 text-sm font-medium transition-colors hover:bg-slate-100 hover:text-slate-900 focus:bg-slate-100 focus:text-slate-900 focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-slate-100/50 data-[state=open]:bg-slate-100/50 dark:bg-slate-950 dark:hover:bg-slate-800 dark:hover:text-slate-50 dark:focus:bg-slate-800 dark:focus:text-slate-50 dark:data-[active]:bg-slate-800/50 dark:data-[state=open]:bg-slate-800/50",
      className
    )}
    {...props}
  >
    {children}
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

export {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
  NavigationMenuViewport,
}



src/components/ui/separator.tsx
===============================

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"
import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(({ className, orientation = "horizontal", decorative = true, ...props }, ref) => (
  <SeparatorPrimitive.Root
    ref={ref}
    data-slot="separator"
    decorative={decorative}
    orientation={orientation}
    className={cn(
      "shrink-0 bg-border",
      orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
      className
    )}
    {...props}
  />
))
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }



src/lib/api.ts
==============

import axios from 'axios';

// Funci√≥n para obtener la URL del servidor (similar a devpipe.js)
function getServerUrl(): string {
  const customPort = localStorage.getItem('devpipe_port');
  const hostname = window.location.hostname || 'localhost';

  if (customPort) {
    return `http://${hostname}:${customPort}`;
  }

  return `http://${hostname}:7846`;
}

const API_URL = getServerUrl();

export const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 5000,
});

// Interfaces que coinciden con el servidor real
interface ServerResponse<T = any> {
  status: 'success' | 'error' | 'monitoring_disabled' | 'filtered_out';
  message?: string;
  data?: T;
}

interface ConfigData {
  maxFileSize: number;    // KB
  maxLogs: number;
  urlFilters: string[];
  port: number;
  logDir: string;
  monitoring: {
    enabled: boolean;
    intervalMs: number;
  };
  fileInfo?: {
    path: string;
    size: number;
    lastModified: string;
  };
  isActive?: boolean;
}

interface LogEntry {
  level: string;
  message: string;
  url?: string;
  timestamp: string;
  user_agent?: string;
  source?: string;
}

// API para configuraci√≥n
export const configApi = {
  async getConfig(): Promise<ServerResponse<ConfigData>> {
    try {
      const response = await api.get<ServerResponse<ConfigData>>('/config');
      return response.data;
    } catch (error) {
      console.error('Error getting config:', error);
      throw error;
    }
  },

  async updateConfig(config: Partial<ConfigData>): Promise<ServerResponse> {
    try {
      const response = await api.post<ServerResponse>('/config', config);
      return response.data;
    } catch (error) {
      console.error('Error updating config:', error);
      throw error;
    }
  },
};

// API para logs
export const logsApi = {
  async getRecentLogs(limit: number = 10): Promise<ServerResponse<LogEntry[]>> {
    try {
      const response = await api.get<ServerResponse<LogEntry[]>>(`/logs?limit=${limit}`);
      return response.data;
    } catch (error) {
      console.error('Error getting logs:', error);
      throw error;
    }
  },

  async clearLogs(): Promise<ServerResponse> {
    try {
      const response = await api.post<ServerResponse>('/logs/clear');
      return response.data;
    } catch (error) {
      console.error('Error clearing logs:', error);
      throw error;
    }
  },

  async sendLog(logData: LogEntry): Promise<ServerResponse> {
    try {
      const response = await api.post<ServerResponse>('/log', logData);
      return response.data;
    } catch (error) {
      console.error('Error sending log:', error);
      throw error;
    }
  },
};

// API para monitoreo
export const monitoringApi = {
  async getStatus(): Promise<ServerResponse<{ isActive: boolean }>> {
    try {
      const response = await api.get<ServerResponse<{ isActive: boolean }>>('/monitoring/status');
      return response.data;
    } catch (error) {
      console.error('Error getting monitoring status:', error);
      throw error;
    }
  },

  async startMonitoring(): Promise<ServerResponse> {
    try {
      const response = await api.post<ServerResponse>('/monitoring/start');
      return response.data;
    } catch (error) {
      console.error('Error starting monitoring:', error);
      throw error;
    }
  },

  async stopMonitoring(): Promise<ServerResponse> {
    try {
      const response = await api.post<ServerResponse>('/monitoring/stop');
      return response.data;
    } catch (error) {
      console.error('Error stopping monitoring:', error);
      throw error;
    }
  },
};

// Funci√≥n para actualizar la URL base si cambia el puerto
export const updateApiBaseUrl = () => {
  api.defaults.baseURL = getServerUrl();
};

// Interceptor para manejar errores comunes
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.code === 'ECONNREFUSED' || error.code === 'ERR_NETWORK') {
      console.error('DevPipe server is not running. Please start the server with: python server/main.py');
    }
    return Promise.reject(error);
  }
);

// Exportar tipos para uso en componentes
export type { ConfigData, LogEntry, ServerResponse };



src/lib/hooks.ts
================

import { useEffect, useRef } from "react";

export function useInterval(callback: () => void, delay: number | null) {
  const savedCallback = useRef<() => void>(() => {});

  useEffect(() => {
    savedCallback.current = callback;
  }, [callback]);

  useEffect(() => {
    function tick() {
      savedCallback.current?.();
    }

    if (delay !== null) {
      const id = setInterval(tick, delay);
      return () => clearInterval(id);
    }
  }, [delay]);
}



src/lib/utils.ts
================

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}



src/pages/Config.tsx
====================

import { useEffect, useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { configApi, type ConfigData } from '@/lib/api';
import { Separator } from '@/components/ui/separator';

interface ConfigFormData {
  maxFileSize: number;    // KB
  maxLogs: number;
  urlFilters: string;     // Como string para el input, se convertir√° a array
  port: number;
  logDir: string;
  customLogPath: string;  // Ruta personalizada seleccionada por el usuario
  monitoringEnabled: boolean;
  monitoringInterval: number;
}

export default function Config() {
  const [formData, setFormData] = useState<ConfigFormData>({
    maxFileSize: 50,          // KB
    maxLogs: 10,
    urlFilters: '',           // Como string, se convertir√° a array
    port: 7845,
    logDir: 'logs',
    customLogPath: '',        // Ruta personalizada vac√≠a por defecto
    monitoringEnabled: false,
    monitoringInterval: 1000
  });

  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState<{ type: 'success' | 'error', text: string } | null>(null);
  const [serverInfo, setServerInfo] = useState<{ isActive: boolean, fileInfo?: any } | null>(null);

  // Funci√≥n para manejar la selecci√≥n de directorio
  const handleDirectorySelect = async () => {
    try {
      // Usar la API de File System Access (moderna)
      if ('showDirectoryPicker' in window) {
        const dirHandle = await (window as any).showDirectoryPicker();
        setFormData(prev => ({ ...prev, customLogPath: dirHandle.name }));
        setMessage({ type: 'success', text: `Directorio seleccionado: ${dirHandle.name}` });
      } else {
        // Fallback para navegadores que no soportan File System Access API
        setMessage({ type: 'error', text: 'Tu navegador no soporta selecci√≥n de directorios. Usa el campo de texto.' });
      }
    } catch (error) {
      if ((error as any).name !== 'AbortError') {
        console.error('Error selecting directory:', error);
        setMessage({ type: 'error', text: 'Error al seleccionar directorio' });
      }
    }
  };

  useEffect(() => {
    const loadConfig = async () => {
      try {
        setLoading(true);
        const response = await configApi.getConfig();

        if (response.status === 'success' && response.data) {
          const config = response.data;
          setFormData({
            maxFileSize: config.maxFileSize,
            maxLogs: config.maxLogs,
            urlFilters: config.urlFilters.join(', '), // Convertir array a string
            port: config.port,
            logDir: config.logDir,
            customLogPath: '',        // Mantener vac√≠o, se llenar√° cuando el usuario seleccione
            monitoringEnabled: config.monitoring.enabled,
            monitoringInterval: config.monitoring.intervalMs
          });

          setServerInfo({
            isActive: config.isActive || false,
            fileInfo: config.fileInfo
          });
        }
      } catch (error) {
        console.error('Error al cargar la configuraci√≥n:', error);
        setMessage({ type: 'error', text: 'Error al cargar la configuraci√≥n del servidor' });
      } finally {
        setLoading(false);
      }
    };

    loadConfig();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      setLoading(true);
      setMessage(null);

      // Convertir formData al formato esperado por el servidor
      const configToSend = {
        maxFileSize: formData.maxFileSize,
        maxLogs: formData.maxLogs,
        urlFilters: formData.urlFilters.split(',').map(f => f.trim()).filter(f => f.length > 0),
        port: formData.port,
        logDir: formData.customLogPath || formData.logDir, // Usar directorio personalizado si est√° disponible
        monitoring: {
          enabled: formData.monitoringEnabled,
          intervalMs: formData.monitoringInterval
        }
      };

      const response = await configApi.updateConfig(configToSend);

      if (response.status === 'success') {
        setMessage({ type: 'success', text: 'Configuraci√≥n guardada correctamente' });
      } else {
        setMessage({ type: 'error', text: response.message || 'Error al guardar la configuraci√≥n' });
      }
    } catch (error) {
      console.error('Error al guardar la configuraci√≥n:', error);
      setMessage({ type: 'error', text: 'Error de conexi√≥n con el servidor' });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* Estado del servidor */}
      {serverInfo && (
        <Card>
          <CardHeader>
            <CardTitle>Estado del Servidor</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center space-x-2">
              <div className={`w-3 h-3 rounded-full ${serverInfo.isActive ? 'bg-green-500' : 'bg-red-500'}`}></div>
              <span>{serverInfo.isActive ? 'Monitoreo Activo' : 'Monitoreo Inactivo'}</span>
            </div>
            {serverInfo.fileInfo && (
              <div className="mt-2 text-sm text-gray-600">
                <p>Archivo: {serverInfo.fileInfo.path}</p>
                <p>Tama√±o: {(serverInfo.fileInfo.size / 1024).toFixed(2)} KB</p>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Mensajes */}
      {message && (
        <Card className={message.type === 'error' ? 'border-red-500' : 'border-green-500'}>
          <CardContent className="pt-6">
            <p className={message.type === 'error' ? 'text-red-600' : 'text-green-600'}>
              {message.text}
            </p>
          </CardContent>
        </Card>
      )}

      {/* Formulario de configuraci√≥n */}
      <form onSubmit={handleSubmit}>
        <Card>
          <CardHeader>
            <CardTitle>Configuraci√≥n del Sistema</CardTitle>
            <CardDescription>
              Ajusta la configuraci√≥n del monitor de logs DevPipe
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Configuraci√≥n de archivos */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium">Archivos y Logs</h3>

              <div className="space-y-2">
                <Label htmlFor="logDir">Directorio de logs (por defecto)</Label>
                <Input
                  id="logDir"
                  value={formData.logDir}
                  onChange={(e) => setFormData(prev => ({ ...prev, logDir: e.target.value }))}
                  placeholder="logs"
                />
                <p className="text-sm text-gray-500">
                  Directorio por defecto donde se guardar√°n los logs
                </p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="customLogPath">Directorio personalizado para esta sesi√≥n</Label>
                <div className="flex space-x-2">
                  <Input
                    id="customLogPath"
                    value={formData.customLogPath}
                    onChange={(e) => setFormData(prev => ({ ...prev, customLogPath: e.target.value }))}
                    placeholder="Selecciona un directorio o escribe la ruta..."
                    className="flex-1"
                  />
                  <Button
                    type="button"
                    variant="outline"
                    onClick={handleDirectorySelect}
                  >
                    Examinar
                  </Button>
                </div>
                <p className="text-sm text-gray-500">
                  Selecciona un directorio espec√≠fico donde guardar los logs de esta sesi√≥n
                </p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="maxFileSize">Tama√±o m√°ximo del archivo (KB)</Label>
                <Input
                  id="maxFileSize"
                  type="number"
                  value={formData.maxFileSize}
                  onChange={(e) => setFormData(prev => ({ ...prev, maxFileSize: parseInt(e.target.value) || 0 }))}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="maxLogs">N√∫mero m√°ximo de logs a mostrar</Label>
                <Input
                  id="maxLogs"
                  type="number"
                  value={formData.maxLogs}
                  onChange={(e) => setFormData(prev => ({ ...prev, maxLogs: parseInt(e.target.value) || 0 }))}
                />
              </div>
            </div>

            <Separator />

            {/* Configuraci√≥n de red */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium">Red y Puerto</h3>

              <div className="space-y-2">
                <Label htmlFor="port">Puerto del servidor</Label>
                <Input
                  id="port"
                  type="number"
                  value={formData.port}
                  onChange={(e) => setFormData(prev => ({ ...prev, port: parseInt(e.target.value) || 7845 }))}
                />
                <p className="text-sm text-gray-500">
                  Puerto donde el servidor DevPipe escuchar√° las conexiones
                </p>
              </div>
            </div>

            <Separator />

            {/* Configuraci√≥n de filtros */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium">Filtros</h3>

              <div className="space-y-2">
                <Label htmlFor="urlFilters">Filtros de URL (separados por comas)</Label>
                <Input
                  id="urlFilters"
                  value={formData.urlFilters}
                  onChange={(e) => setFormData(prev => ({ ...prev, urlFilters: e.target.value }))}
                  placeholder="localhost, 127.0.0.1, example.com"
                />
                <p className="text-sm text-gray-500">
                  URLs que ser√°n filtradas del monitoreo
                </p>
              </div>
            </div>

            <Separator />

            {/* Configuraci√≥n de monitoreo */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium">Monitoreo</h3>

              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="monitoringEnabled"
                  checked={formData.monitoringEnabled}
                  onChange={(e) => setFormData(prev => ({ ...prev, monitoringEnabled: e.target.checked }))}
                  className="rounded"
                />
                <Label htmlFor="monitoringEnabled">Habilitar monitoreo autom√°tico</Label>
              </div>

              <div className="space-y-2">
                <Label htmlFor="monitoringInterval">Intervalo de monitoreo (ms)</Label>
                <Input
                  id="monitoringInterval"
                  type="number"
                  value={formData.monitoringInterval}
                  onChange={(e) => setFormData(prev => ({ ...prev, monitoringInterval: parseInt(e.target.value) || 1000 }))}
                />
              </div>
            </div>

            <div className="pt-4">
              <Button type="submit" disabled={loading}>
                {loading ? 'Guardando...' : 'Guardar Configuraci√≥n'}
              </Button>
            </div>
          </CardContent>
        </Card>
      </form>
    </div>
  );
}



src/pages/Monitor.tsx
=====================

import { useEffect, useState } from "react"
import { useInterval } from "@/lib/hooks"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Separator } from "@/components/ui/separator"
import { logsApi, monitoringApi, type LogEntry } from "@/lib/api"
import { PlayIcon, PauseIcon, SquareIcon, TrashIcon, RefreshCwIcon } from "lucide-react"

type MonitoringState = "stopped" | "running" | "paused";

export default function Monitor() {
  const [logs, setLogs] = useState<LogEntry[]>([]);
  const [filter, setFilter] = useState("");
  const [monitoringState, setMonitoringState] = useState<MonitoringState>("stopped");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [logLimit, setLogLimit] = useState(25);

  const fetchLogs = async () => {
    try {
      setError(null);
      const response = await logsApi.getRecentLogs(logLimit);

      if (response.status === 'success' && response.data) {
        setLogs(response.data);
      } else if (response.status === 'monitoring_disabled') {
        setError('El monitoreo est√° desactivado en el servidor');
      } else {
        setError(response.message || 'Error al obtener logs');
      }
    } catch (error) {
      console.error("Error fetching logs:", error);
      setError('Error de conexi√≥n con el servidor');
    }
  };

  const toggleMonitoring = async (newState: MonitoringState) => {
    try {
      setLoading(true);
      setError(null);

      switch (newState) {
        case "running":
          const startResponse = await monitoringApi.startMonitoring();
          if (startResponse.status === 'success') {
            setMonitoringState(newState);
          } else {
            setError(startResponse.message || 'Error al iniciar monitoreo');
          }
          break;
        case "stopped":
          const stopResponse = await monitoringApi.stopMonitoring();
          if (stopResponse.status === 'success') {
            setMonitoringState(newState);
          } else {
            setError(stopResponse.message || 'Error al detener monitoreo');
          }
          break;
        case "paused":
          // Para pausar, simplemente cambiamos el estado local
          setMonitoringState(newState);
          break;
      }
    } catch (error) {
      console.error("Error toggling monitoring:", error);
      setError('Error de conexi√≥n con el servidor');
    } finally {
      setLoading(false);
    }
  };

  const clearLogs = async () => {
    try {
      setLoading(true);
      const response = await logsApi.clearLogs();

      if (response.status === 'success') {
        setLogs([]);
      } else {
        setError(response.message || 'Error al limpiar logs');
      }
    } catch (error) {
      console.error("Error clearing logs:", error);
      setError('Error de conexi√≥n con el servidor');
    } finally {
      setLoading(false);
    }
  };

  useInterval(fetchLogs, monitoringState === "running" ? 1000 : null);

  // Obtener estado inicial del monitoreo
  useEffect(() => {
    const getInitialStatus = async () => {
      try {
        const statusResponse = await monitoringApi.getStatus();
        if (statusResponse.status === 'success' && statusResponse.data) {
          setMonitoringState(statusResponse.data.isActive ? 'running' : 'stopped');
        }
      } catch (error) {
        console.error('Error getting initial monitoring status:', error);
      }
    };

    getInitialStatus();
    fetchLogs();
  }, [logLimit]);

  const filteredLogs = filter
    ? logs.filter(log =>
        log.message.toLowerCase().includes(filter.toLowerCase()) ||
        log.level.toLowerCase().includes(filter.toLowerCase()) ||
        (log.url && log.url.toLowerCase().includes(filter.toLowerCase())) ||
        (log.source && log.source.toLowerCase().includes(filter.toLowerCase()))
      )
    : logs;

  const formatTimestamp = (timestamp: string) => {
    try {
      return new Date(timestamp).toLocaleTimeString();
    } catch {
      return timestamp;
    }
  };

  const getLevelColor = (level: string) => {
    switch (level.toLowerCase()) {
      case 'error': return 'text-red-600';
      case 'warn': return 'text-yellow-600';
      case 'info': return 'text-blue-600';
      case 'external': return 'text-purple-600';
      default: return 'text-gray-600';
    }
  };

  return (
    <div className="space-y-6">
      {/* Estado y controles */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>Monitor de Logs DevPipe</span>
            <div className="flex items-center space-x-2">
              <div className={`w-3 h-3 rounded-full ${
                monitoringState === 'running' ? 'bg-green-500' :
                monitoringState === 'paused' ? 'bg-yellow-500' : 'bg-red-500'
              }`}></div>
              <span className="text-sm text-gray-600 capitalize">{monitoringState}</span>
            </div>
          </CardTitle>
          <CardDescription>
            Monitor y analiza logs en tiempo real desde el servidor DevPipe
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {/* Controles de monitoreo */}
            <div className="flex items-center gap-2">
              <Button
                variant={monitoringState === "running" ? "secondary" : "default"}
                onClick={() => toggleMonitoring("running")}
                disabled={loading}
              >
                <PlayIcon className="h-4 w-4 mr-2" />
                Iniciar
              </Button>
              <Button
                variant={monitoringState === "paused" ? "secondary" : "default"}
                onClick={() => toggleMonitoring("paused")}
                disabled={loading}
              >
                <PauseIcon className="h-4 w-4 mr-2" />
                Pausar
              </Button>
              <Button
                variant={monitoringState === "stopped" ? "secondary" : "default"}
                onClick={() => toggleMonitoring("stopped")}
                disabled={loading}
              >
                <SquareIcon className="h-4 w-4 mr-2" />
                Detener
              </Button>

              <Separator orientation="vertical" className="h-8" />

              <Button
                variant="outline"
                onClick={fetchLogs}
                disabled={loading}
              >
                <RefreshCwIcon className="h-4 w-4 mr-2" />
                Actualizar
              </Button>

              <Button
                variant="outline"
                onClick={clearLogs}
                disabled={loading}
              >
                <TrashIcon className="h-4 w-4 mr-2" />
                Limpiar
              </Button>
            </div>

            {/* Configuraci√≥n */}
            <div className="flex items-center gap-4">
              <div className="flex items-center space-x-2">
                <Label htmlFor="logLimit">L√≠mite:</Label>
                <Input
                  id="logLimit"
                  type="number"
                  value={logLimit}
                  onChange={(e) => setLogLimit(parseInt(e.target.value) || 25)}
                  className="w-20"
                  min="1"
                  max="100"
                />
              </div>

              <div className="flex-1">
                <Label htmlFor="filter">Filtrar logs:</Label>
                <Input
                  id="filter"
                  placeholder="Buscar en mensaje, nivel, URL o fuente..."
                  value={filter}
                  onChange={(e) => setFilter(e.target.value)}
                />
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Mensajes de error */}
      {error && (
        <Card className="border-red-500">
          <CardContent className="pt-6">
            <p className="text-red-600">{error}</p>
          </CardContent>
        </Card>
      )}

      {/* Lista de logs */}
      <Card>
        <CardHeader>
          <CardTitle>
            Logs Recientes ({filteredLogs.length} de {logs.length})
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="h-[500px] overflow-auto rounded-md border bg-gray-50 p-4">
            {filteredLogs.length === 0 ? (
              <div className="flex items-center justify-center h-full text-gray-500">
                {logs.length === 0 ? 'No hay logs disponibles' : 'No hay logs que coincidan con el filtro'}
              </div>
            ) : (
              <div className="space-y-2">
                {filteredLogs.map((log, index) => (
                  <div key={index} className="border-b border-gray-200 pb-2 last:border-b-0">
                    <div className="flex items-start justify-between text-xs text-gray-500 mb-1">
                      <div className="flex items-center space-x-2">
                        <span className={`font-medium ${getLevelColor(log.level)}`}>
                          [{log.level.toUpperCase()}]
                        </span>
                        {log.source && (
                          <span className="bg-gray-200 px-1 rounded">
                            {log.source}
                          </span>
                        )}
                      </div>
                      <span>{formatTimestamp(log.timestamp)}</span>
                    </div>
                    <div className="font-mono text-sm text-gray-800 whitespace-pre-wrap">
                      {log.message}
                    </div>
                    {log.url && (
                      <div className="text-xs text-blue-600 mt-1">
                        {log.url}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}



src/styles/index.css
====================

@import "tailwindcss";

/* Estilos base para la aplicaci√≥n */
:root {
  --primary-50: #f0f9ff;
  --primary-100: #e0f2fe;
  --primary-200: #bae6fd;
  --primary-300: #7dd3fc;
  --primary-400: #38bdf8;
  --primary-500: #0ea5e9;
  --primary-600: #0284c7;
  --primary-700: #0369a1;
  --primary-800: #075985;
  --primary-900: #0c4a6e;
}

/* Estilos globales */
body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Estilos para componentes personalizados */
.devpipe-card {
  @apply bg-white rounded-lg border border-gray-200 shadow-sm;
}

.devpipe-button-primary {
  @apply bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors duration-200;
}

.devpipe-button-secondary {
  @apply bg-white hover:bg-gray-50 text-gray-700 font-medium py-2 px-4 rounded-md border border-gray-300 transition-colors duration-200;
}




client/components.json
======================

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/styles/index.css",
    "baseColor": "slate",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui"
  }
}



client/devpipe.js
=================

/**
 * DevPipe Client - Framework de Observabilidad para Desarrollo Local
 * 
 * Este script captura console.log, errores y otros eventos del navegador
 * y los env√≠a a un servidor local para monitoreo centralizado.
 * 
 * Solo se activa en entornos de desarrollo.
 */

(function() {
    'use strict';

    // Configuraci√≥n
    const CONFIG = {
        serverUrl: getServerUrl(),
        endpoint: '/log',
        maxRetries: 3,
        retryDelay: 1000,
        batchSize: 10,
        batchTimeout: 2000,
        enabledInProduction: false
    };

    // Verificar si debe activarse
    if (!shouldActivate()) {
        console.log('[DevPipe] No activado - entorno de producci√≥n detectado');
        return;
    }

    class DevPipeClient {
        constructor() {
            this.originalConsole = {};
            this.logQueue = [];
            this.batchTimer = null;
            this.isActive = true;
            
            this.init();
        }

        init() {
            console.log('[DevPipe] Inicializando cliente de observabilidad...');
            
            this.backupOriginalMethods();
            this.interceptConsole();
            this.interceptErrors();
            this.interceptUnhandledRejections();
            this.startBatchProcessor();
            
            console.log('[DevPipe] Cliente inicializado correctamente');
        }

        backupOriginalMethods() {
            // Guardar referencias a los m√©todos originales
            this.originalConsole = {
                log: console.log.bind(console),
                error: console.error.bind(console),
                warn: console.warn.bind(console),
                info: console.info.bind(console),
                debug: console.debug.bind(console)
            };
        }

        interceptConsole() {
            const self = this;
            
            // Interceptar console.log
            console.log = function(...args) {
                self.originalConsole.log.apply(console, args);
                self.captureLog('log', args);
            };

            // Interceptar console.error
            console.error = function(...args) {
                self.originalConsole.error.apply(console, args);
                self.captureLog('error', args);
            };

            // Interceptar console.warn
            console.warn = function(...args) {
                self.originalConsole.warn.apply(console, args);
                self.captureLog('warn', args);
            };

            // Interceptar console.info
            console.info = function(...args) {
                self.originalConsole.info.apply(console, args);
                self.captureLog('info', args);
            };

            // Interceptar console.debug
            console.debug = function(...args) {
                self.originalConsole.debug.apply(console, args);
                self.captureLog('debug', args);
            };
        }

        interceptErrors() {
            const self = this;
            
            // Interceptar errores globales
            window.addEventListener('error', function(event) {
                self.captureError({
                    message: event.message,
                    filename: event.filename,
                    lineno: event.lineno,
                    colno: event.colno,
                    error: event.error,
                    stack: event.error ? event.error.stack : null
                });
            });
        }

        interceptUnhandledRejections() {
            const self = this;
            
            // Interceptar promesas rechazadas no manejadas
            window.addEventListener('unhandledrejection', function(event) {
                self.captureError({
                    message: 'Unhandled Promise Rejection: ' + (event.reason || 'Unknown reason'),
                    stack: event.reason && event.reason.stack ? event.reason.stack : null,
                    type: 'unhandledrejection'
                });
            });
        }

        captureLog(level, args) {
            if (!this.isActive) return;

            const message = args.map(arg => {
                if (typeof arg === 'object') {
                    try {
                        return JSON.stringify(arg, null, 2);
                    } catch (e) {
                        return '[Object]';
                    }
                }
                return String(arg);
            }).join(' ');

            const logEntry = {
                level: level,
                message: message,
                url: window.location.href,
                timestamp: new Date().toISOString(),
                user_agent: navigator.userAgent,
                additional_data: {
                    args_count: args.length,
                    page_title: document.title
                }
            };

            this.queueLog(logEntry);
        }

        captureError(errorInfo) {
            if (!this.isActive) return;

            const logEntry = {
                level: 'error',
                message: errorInfo.message || 'Unknown error',
                url: window.location.href,
                timestamp: new Date().toISOString(),
                user_agent: navigator.userAgent,
                stack_trace: errorInfo.stack,
                additional_data: {
                    filename: errorInfo.filename,
                    lineno: errorInfo.lineno,
                    colno: errorInfo.colno,
                    type: errorInfo.type || 'javascript_error',
                    page_title: document.title
                }
            };

            this.queueLog(logEntry);
        }

        queueLog(logEntry) {
            this.logQueue.push(logEntry);
            
            // Si la cola est√° llena, enviar inmediatamente
            if (this.logQueue.length >= CONFIG.batchSize) {
                this.flushQueue();
            }
        }

        startBatchProcessor() {
            // Procesar cola cada cierto tiempo
            setInterval(() => {
                if (this.logQueue.length > 0) {
                    this.flushQueue();
                }
            }, CONFIG.batchTimeout);
        }

        flushQueue() {
            if (this.logQueue.length === 0) return;

            const logsToSend = [...this.logQueue];
            this.logQueue = [];

            // Enviar logs uno por uno (el servidor espera logs individuales)
            logsToSend.forEach(log => this.sendLog(log));
        }

        async sendLog(logEntry, retryCount = 0) {
            try {
                const response = await fetch(CONFIG.serverUrl + CONFIG.endpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(logEntry)
                });

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const result = await response.json();
                
                // Si el monitoreo est√° desactivado, pausar el cliente
                if (result.status === 'monitoring_disabled') {
                    this.originalConsole.warn('[DevPipe] Monitoreo desactivado en el servidor');
                    return;
                }

                // Si fue filtrado, no es un error
                if (result.status === 'filtered_out') {
                    return;
                }

            } catch (error) {
                // Reintentar si no se alcanz√≥ el m√°ximo de reintentos
                if (retryCount < CONFIG.maxRetries) {
                    setTimeout(() => {
                        this.sendLog(logEntry, retryCount + 1);
                    }, CONFIG.retryDelay * Math.pow(2, retryCount)); // Backoff exponencial
                } else {
                    // Solo mostrar error en consola si es el √∫ltimo intento
                    this.originalConsole.error('[DevPipe] Error enviando log despu√©s de', CONFIG.maxRetries, 'intentos:', error.message);
                }
            }
        }

        // M√©todo para desactivar temporalmente
        pause() {
            this.isActive = false;
            this.originalConsole.log('[DevPipe] Cliente pausado');
        }

        // M√©todo para reactivar
        resume() {
            this.isActive = true;
            this.originalConsole.log('[DevPipe] Cliente reanudado');
        }

        // M√©todo para restaurar console original
        restore() {
            Object.keys(this.originalConsole).forEach(method => {
                console[method] = this.originalConsole[method];
            });
            this.originalConsole.log('[DevPipe] Console original restaurado');
        }
    }

    // Funci√≥n para obtener URL del servidor
    function getServerUrl() {
        // Verificar si hay un puerto personalizado en localStorage
        const customPort = localStorage.getItem('devpipe_port');
        const hostname = window.location.hostname || 'localhost';

        if (customPort) {
            console.log(`[DevPipe] Usando puerto personalizado desde localStorage: ${customPort}`);
            return `http://${hostname}:${customPort}`;
        }

        // Si estamos en el mismo host que DevPipe, usar el puerto por defecto
        if (hostname === 'localhost' || hostname === '127.0.0.1') {
            return `http://${hostname}:7845`;
        }

        // Por defecto, usar localhost:7845
        return 'http://localhost:7845';
    }

    // Funci√≥n para configurar puerto personalizado
    function setCustomPort(port) {
        if (port && !isNaN(port) && port > 0 && port <= 65535) {
            localStorage.setItem('devpipe_port', port.toString());
            console.log(`[DevPipe] Puerto personalizado configurado: ${port}`);
            return true;
        } else {
            console.error('[DevPipe] Puerto inv√°lido:', port);
            return false;
        }
    }

    // Funci√≥n para limpiar puerto personalizado
    function clearCustomPort() {
        localStorage.removeItem('devpipe_port');
        console.log('[DevPipe] Puerto personalizado eliminado, usando puerto por defecto');
    }

    // Funci√≥n para obtener puerto actual
    function getCurrentPort() {
        const customPort = localStorage.getItem('devpipe_port');
        return customPort ? parseInt(customPort) : 7845;
    }

    // Funci√≥n para determinar si debe activarse
    function shouldActivate() {
        // Verificar variables de entorno comunes
        if (typeof process !== 'undefined' && process.env) {
            if (process.env.NODE_ENV === 'production' && !CONFIG.enabledInProduction) {
                return false;
            }
            if (process.env.NODE_ENV === 'development') {
                return true;
            }
        }

        // Verificar par√°metros de URL
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('debug') === 'true' || urlParams.get('devpipe') === 'true') {
            return true;
        }

        // Verificar si es localhost o desarrollo
        const hostname = window.location.hostname;
        if (hostname === 'localhost' || hostname === '127.0.0.1' || hostname.endsWith('.local')) {
            return true;
        }

        // Verificar puerto de desarrollo com√∫n
        const port = window.location.port;
        const devPorts = ['3000', '3001', '7845', '8000', '8080', '8888', '9000'];
        if (devPorts.includes(port)) {
            return true;
        }

        // Por defecto, no activar en producci√≥n
        return false;
    }

    // Inicializar cliente
    const devPipeClient = new DevPipeClient();

    // Exponer globalmente para debugging
    window.DevPipe = {
        client: devPipeClient,
        pause: () => devPipeClient.pause(),
        resume: () => devPipeClient.resume(),
        restore: () => devPipeClient.restore(),
        config: CONFIG,
        // Funciones para manejo de puerto personalizado
        setPort: setCustomPort,
        clearPort: clearCustomPort,
        getCurrentPort: getCurrentPort,
        getServerUrl: getServerUrl
    };

    // Log de inicializaci√≥n
    console.log('[DevPipe] Cliente cargado y listo para capturar logs');

})();



client/eslint.config.js
=======================

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])



client/index.html
=================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>



client/package-lock.json
========================

{
  "name": "client",
  "version": "0.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "client",
      "version": "0.0.0",
      "dependencies": {
        "@radix-ui/react-dialog": "^1.1.14",
        "@radix-ui/react-dropdown-menu": "^2.1.15",
        "@radix-ui/react-label": "^2.1.7",
        "@radix-ui/react-navigation-menu": "^1.2.13",
        "@radix-ui/react-select": "^2.2.5",
        "@radix-ui/react-separator": "^1.1.7",
        "@radix-ui/react-slot": "^1.2.3",
        "@radix-ui/react-tabs": "^1.1.12",
        "@tanstack/react-query": "^5.83.0",
        "@types/react-router-dom": "^5.3.3",
        "axios": "^1.10.0",
        "class-variance-authority": "^0.7.1",
        "clsx": "^2.1.1",
        "lucide-react": "^0.525.0",
        "react": "^19.1.0",
        "react-dom": "^19.1.0",
        "react-router-dom": "^7.6.3",
        "tailwind-merge": "^3.3.1",
        "tw-animate-css": "^1.3.5"
      },
      "devDependencies": {
        "@eslint/js": "^9.30.1",
        "@tailwindcss/postcss": "^4.1.11",
        "@tailwindcss/vite": "^4.1.11",
        "@types/react": "^19.1.8",
        "@types/react-dom": "^19.1.6",
        "@vitejs/plugin-react": "^4.6.0",
        "autoprefixer": "^10.4.21",
        "eslint": "^9.30.1",
        "eslint-plugin-react-hooks": "^5.2.0",
        "eslint-plugin-react-refresh": "^0.4.20",
        "globals": "^16.3.0",
        "postcss": "^8.5.6",
        "tailwindcss": "^4.1.11",
        "typescript": "~5.8.3",
        "typescript-eslint": "^8.35.1",
        "vite": "^7.0.4"
      }
    },
    "node_modules/@alloc/quick-lru": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
      "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.0.tgz",
      "integrity": "sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.0.tgz",
      "integrity": "sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.27.3",
        "@babel/helpers": "^7.27.6",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.0",
        "@babel/types": "^7.28.0",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.0.tgz",
      "integrity": "sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.0",
        "@babel/types": "^7.28.0",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.27.6",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.27.6.tgz",
      "integrity": "sha512-muE8Tt8M22638HU31A3CgfSUciwz1fhATfoVai05aPXGor//CdWDCbnlY1yvBPo07njuVOCNGCSp/GTt12lIug==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.27.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.0.tgz",
      "integrity": "sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.0"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.0.tgz",
      "integrity": "sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.0",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.1",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.1.tgz",
      "integrity": "sha512-x0LvFTekgSX+83TI28Y9wYPUfzrnl2aT5+5QLnO6v7mSJYtEEevuDRN0F0uSHRk1G1IWZC43o00Y0xDDrpBGPQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.6.tgz",
      "integrity": "sha512-ShbM/3XxwuxjFiuVBHA+d3j5dyac0aEVVq1oluIDf71hUw0aRF59dV/efUsIwFnR6m8JNM2FjZOzmaZ8yG61kw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.6.tgz",
      "integrity": "sha512-S8ToEOVfg++AU/bHwdksHNnyLyVM+eMVAOf6yRKFitnwnbwwPNqKr3srzFRe7nzV69RQKb5DgchIX5pt3L53xg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.6.tgz",
      "integrity": "sha512-hd5zdUarsK6strW+3Wxi5qWws+rJhCCbMiC9QZyzoxfk5uHRIE8T287giQxzVpEvCwuJ9Qjg6bEjcRJcgfLqoA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.6.tgz",
      "integrity": "sha512-0Z7KpHSr3VBIO9A/1wcT3NTy7EB4oNC4upJ5ye3R7taCc2GUdeynSLArnon5G8scPwaU866d3H4BCrE5xLW25A==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.6.tgz",
      "integrity": "sha512-FFCssz3XBavjxcFxKsGy2DYK5VSvJqa6y5HXljKzhRZ87LvEi13brPrf/wdyl/BbpbMKJNOr1Sd0jtW4Ge1pAA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.6.tgz",
      "integrity": "sha512-GfXs5kry/TkGM2vKqK2oyiLFygJRqKVhawu3+DOCk7OxLy/6jYkWXhlHwOoTb0WqGnWGAS7sooxbZowy+pK9Yg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.6.tgz",
      "integrity": "sha512-aoLF2c3OvDn2XDTRvn8hN6DRzVVpDlj2B/F66clWd/FHLiHaG3aVZjxQX2DYphA5y/evbdGvC6Us13tvyt4pWg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.6.tgz",
      "integrity": "sha512-2SkqTjTSo2dYi/jzFbU9Plt1vk0+nNg8YC8rOXXea+iA3hfNJWebKYPs3xnOUf9+ZWhKAaxnQNUf2X9LOpeiMQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.6.tgz",
      "integrity": "sha512-SZHQlzvqv4Du5PrKE2faN0qlbsaW/3QQfUUc6yO2EjFcA83xnwm91UbEEVx4ApZ9Z5oG8Bxz4qPE+HFwtVcfyw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.6.tgz",
      "integrity": "sha512-b967hU0gqKd9Drsh/UuAm21Khpoh6mPBSgz8mKRq4P5mVK8bpA+hQzmm/ZwGVULSNBzKdZPQBRT3+WuVavcWsQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.6.tgz",
      "integrity": "sha512-aHWdQ2AAltRkLPOsKdi3xv0mZ8fUGPdlKEjIEhxCPm5yKEThcUjHpWB1idN74lfXGnZ5SULQSgtr5Qos5B0bPw==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.6.tgz",
      "integrity": "sha512-VgKCsHdXRSQ7E1+QXGdRPlQ/e08bN6WMQb27/TMfV+vPjjTImuT9PmLXupRlC90S1JeNNW5lzkAEO/McKeJ2yg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.6.tgz",
      "integrity": "sha512-WViNlpivRKT9/py3kCmkHnn44GkGXVdXfdc4drNmRl15zVQ2+D2uFwdlGh6IuK5AAnGTo2qPB1Djppj+t78rzw==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.6.tgz",
      "integrity": "sha512-wyYKZ9NTdmAMb5730I38lBqVu6cKl4ZfYXIs31Baf8aoOtB4xSGi3THmDYt4BTFHk7/EcVixkOV2uZfwU3Q2Jw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.6.tgz",
      "integrity": "sha512-KZh7bAGGcrinEj4qzilJ4hqTY3Dg2U82c8bv+e1xqNqZCrCyc+TL9AUEn5WGKDzm3CfC5RODE/qc96OcbIe33w==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.6.tgz",
      "integrity": "sha512-9N1LsTwAuE9oj6lHMyyAM+ucxGiVnEqUdp4v7IaMmrwb06ZTEVCIs3oPPplVsnjPfyjmxwHxHMF8b6vzUVAUGw==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.6.tgz",
      "integrity": "sha512-A6bJB41b4lKFWRKNrWoP2LHsjVzNiaurf7wyj/XtFNTsnPuxwEBWHLty+ZE0dWBKuSK1fvKgrKaNjBS7qbFKig==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-arm64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.6.tgz",
      "integrity": "sha512-IjA+DcwoVpjEvyxZddDqBY+uJ2Snc6duLpjmkXm/v4xuS3H+3FkLZlDm9ZsAbF9rsfP3zeA0/ArNDORZgrxR/Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.6.tgz",
      "integrity": "sha512-dUXuZr5WenIDlMHdMkvDc1FAu4xdWixTCRgP7RQLBOkkGgwuuzaGSYcOpW4jFxzpzL1ejb8yF620UxAqnBrR9g==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-arm64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.6.tgz",
      "integrity": "sha512-l8ZCvXP0tbTJ3iaqdNf3pjaOSd5ex/e6/omLIQCVBLmHTlfXW3zAxQ4fnDmPLOB1x9xrcSi/xtCWFwCZRIaEwg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.6.tgz",
      "integrity": "sha512-hKrmDa0aOFOr71KQ/19JC7az1P0GWtCN1t2ahYAf4O007DHZt/dW8ym5+CUdJhQ/qkZmI1HAF8KkJbEFtCL7gw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openharmony-arm64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/openharmony-arm64/-/openharmony-arm64-0.25.6.tgz",
      "integrity": "sha512-+SqBcAWoB1fYKmpWoQP4pGtx+pUUC//RNYhFdbcSA16617cchuryuhOCRpPsjCblKukAckWsV+aQ3UKT/RMPcA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openharmony"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.6.tgz",
      "integrity": "sha512-dyCGxv1/Br7MiSC42qinGL8KkG4kX0pEsdb0+TKhmJZgCUDBGmyo1/ArCjNGiOLiIAgdbWgmWgib4HoCi5t7kA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.6.tgz",
      "integrity": "sha512-42QOgcZeZOvXfsCBJF5Afw73t4veOId//XD3i+/9gSkhSV6Gk3VPlWncctI+JcOyERv85FUo7RxuxGy+z8A43Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.6.tgz",
      "integrity": "sha512-4AWhgXmDuYN7rJI6ORB+uU9DHLq/erBbuMoAuB4VWJTu5KtCgcKYPynF0YI1VkBNuEfjNlLrFr9KZPJzrtLkrQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.6.tgz",
      "integrity": "sha512-NgJPHHbEpLQgDH2MjQu90pzW/5vvXIZ7KOnPyNBm92A6WgZ/7b6fJyUBjoumLqeOQQGqY2QjQxRo97ah4Sj0cA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.7.0.tgz",
      "integrity": "sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.21.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.21.0.tgz",
      "integrity": "sha512-ENIdc4iLu0d93HeYirvKmrzshzofPw6VkZRKQGe9Nv46ZnWUzcF1xV01dcvEg/1wXUR61OmmlSfyeyO7EvjLxQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/object-schema": "^2.1.6",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/config-helpers": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.3.0.tgz",
      "integrity": "sha512-ViuymvFmcJi04qdZeDc2whTHryouGcDlaxPqarTD0ZE10ISpxGUVZGZDx4w01upyIynL3iu6IXH2bS1NhclQMw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.15.1",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.15.1.tgz",
      "integrity": "sha512-bkOp+iumZCCbt1K1CmWf0R9pM5yKpDv+ZXtvSyQpudrI9kuFLp+bM2WOPXImuD/ceQuaa8f5pj93Y7zyECIGNA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
      "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.31.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.31.0.tgz",
      "integrity": "sha512-LOm5OVt7D4qiKCqoiPbA7LWmI+tbw1VbTUowBcUMgQSuM6poJufkFkYDcQpo5KfgD39TnNySV26QjOh7VFpSyw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.3.3.tgz",
      "integrity": "sha512-1+WqvgNMhmlAambTvT3KPtCl/Ibr68VldY2XY40SL1CE0ZXiakFR/cbTspaF5HsnpDMvcYYoJHfl4980NBjGag==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.15.1",
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@floating-ui/core": {
      "version": "1.7.2",
      "resolved": "https://registry.npmjs.org/@floating-ui/core/-/core-1.7.2.tgz",
      "integrity": "sha512-wNB5ooIKHQc+Kui96jE/n69rHFWAVoxn5CAzL1Xdd8FG03cgY3MLO+GF9U3W737fYDSgPWA6MReKhBQBop6Pcw==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/utils": "^0.2.10"
      }
    },
    "node_modules/@floating-ui/dom": {
      "version": "1.7.2",
      "resolved": "https://registry.npmjs.org/@floating-ui/dom/-/dom-1.7.2.tgz",
      "integrity": "sha512-7cfaOQuCS27HD7DX+6ib2OrnW+b4ZBwDNnCcT0uTyidcmyWb03FnQqJybDBoCnpdxwBSfA94UAYlRCt7mV+TbA==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/core": "^1.7.2",
        "@floating-ui/utils": "^0.2.10"
      }
    },
    "node_modules/@floating-ui/react-dom": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/@floating-ui/react-dom/-/react-dom-2.1.4.tgz",
      "integrity": "sha512-JbbpPhp38UmXDDAu60RJmbeme37Jbgsm7NrHGgzYYFKmblzRUh6Pa641dII6LsjwF4XlScDrde2UAzDo/b9KPw==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/dom": "^1.7.2"
      },
      "peerDependencies": {
        "react": ">=16.8.0",
        "react-dom": ">=16.8.0"
      }
    },
    "node_modules/@floating-ui/utils": {
      "version": "0.2.10",
      "resolved": "https://registry.npmjs.org/@floating-ui/utils/-/utils-0.2.10.tgz",
      "integrity": "sha512-aGTxbpbg8/b5JfU1HXSrbH3wXZuLPJcNEcZQFMxLs3oSzgtVu6nFPkbbGGUvBcUjKV2YyB9Wxxabo+HEH9tcRQ==",
      "license": "MIT"
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.1",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.6",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
      "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanfs/core": "^0.19.1",
        "@humanwhocodes/retry": "^0.3.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.4.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.3.tgz",
      "integrity": "sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@isaacs/fs-minipass": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/@isaacs/fs-minipass/-/fs-minipass-4.0.1.tgz",
      "integrity": "sha512-wgm9Ehl2jpeqP3zw/7mo3kRHFp5MEDhqAdwy1fTGkHAwnkGOVsgpvQhL8B5n1qlb01jV3n/bI0ZfZp5lWA1k4w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "minipass": "^7.0.4"
      },
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.12",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
      "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.29",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@radix-ui/number": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@radix-ui/number/-/number-1.1.1.tgz",
      "integrity": "sha512-MkKCwxlXTgz6CFoJx3pCwn07GKp36+aZyu/u2Ln2VrA5DcdyCZkASEDBTd8x5whTQQL5CiYf4prXKLcgQdv29g==",
      "license": "MIT"
    },
    "node_modules/@radix-ui/primitive": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@radix-ui/primitive/-/primitive-1.1.2.tgz",
      "integrity": "sha512-XnbHrrprsNqZKQhStrSwgRUQzoCI1glLzdw79xiZPoofhGICeZRSQ3dIxAKH1gb3OHfNf4d6f+vAv3kil2eggA==",
      "license": "MIT"
    },
    "node_modules/@radix-ui/react-arrow": {
      "version": "1.1.7",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-arrow/-/react-arrow-1.1.7.tgz",
      "integrity": "sha512-F+M1tLhO+mlQaOWspE8Wstg+z6PwxwRd8oQ8IXceWz92kfAmalTRf0EjrouQeo7QssEPfCn05B4Ihs1K9WQ/7w==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/react-primitive": "2.1.3"
      },
      "peerDependencies": {
        "@types/react": "*",
        "@types/react-dom": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-collection": {
      "version": "1.1.7",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-collection/-/react-collection-1.1.7.tgz",
      "integrity": "sha512-Fh9rGN0MoI4ZFUNyfFVNU4y9LUz93u9/0K+yLgA2bwRojxM8JU1DyvvMBabnZPBgMWREAJvU2jjVzq+LrFUglw==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/react-compose-refs": "1.1.2",
        "@radix-ui/react-context": "1.1.2",
        "@radix-ui/react-primitive": "2.1.3",
        "@radix-ui/react-slot": "1.2.3"
      },
      "peerDependencies": {
        "@types/react": "*",
        "@types/react-dom": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-compose-refs": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-compose-refs/-/react-compose-refs-1.1.2.tgz",
      "integrity": "sha512-z4eqJvfiNnFMHIIvXP3CY57y2WJs5g2v3X0zm9mEJkrkNv4rDxu+sg9Jh8EkXyeqBkB7SOcboo9dMVqhyrACIg==",
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-context": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-context/-/react-context-1.1.2.tgz",
      "integrity": "sha512-jCi/QKUM2r1Ju5a3J64TH2A5SpKAgh0LpknyqdQ4m6DCV0xJ2HG1xARRwNGPQfi1SLdLWZ1OJz6F4OMBBNiGJA==",
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-dialog": {
      "version": "1.1.14",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-dialog/-/react-dialog-1.1.14.tgz",
      "integrity": "sha512-+CpweKjqpzTmwRwcYECQcNYbI8V9VSQt0SNFKeEBLgfucbsLssU6Ppq7wUdNXEGb573bMjFhVjKVll8rmV6zMw==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/primitive": "1.1.2",
        "@radix-ui/react-compose-refs": "1.1.2",
        "@radix-ui/react-context": "1.1.2",
        "@radix-ui/react-dismissable-layer": "1.1.10",
        "@radix-ui/react-focus-guards": "1.1.2",
        "@radix-ui/react-focus-scope": "1.1.7",
        "@radix-ui/react-id": "1.1.1",
        "@radix-ui/react-portal": "1.1.9",
        "@radix-ui/react-presence": "1.1.4",
        "@radix-ui/react-primitive": "2.1.3",
        "@radix-ui/react-slot": "1.2.3",
        "@radix-ui/react-use-controllable-state": "1.2.2",
        "aria-hidden": "^1.2.4",
        "react-remove-scroll": "^2.6.3"
      },
      "peerDependencies": {
        "@types/react": "*",
        "@types/react-dom": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-direction": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-direction/-/react-direction-1.1.1.tgz",
      "integrity": "sha512-1UEWRX6jnOA2y4H5WczZ44gOOjTEmlqv1uNW4GAJEO5+bauCBhv8snY65Iw5/VOS/ghKN9gr2KjnLKxrsvoMVw==",
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-dismissable-layer": {
      "version": "1.1.10",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-dismissable-layer/-/react-dismissable-layer-1.1.10.tgz",
      "integrity": "sha512-IM1zzRV4W3HtVgftdQiiOmA0AdJlCtMLe00FXaHwgt3rAnNsIyDqshvkIW3hj/iu5hu8ERP7KIYki6NkqDxAwQ==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/primitive": "1.1.2",
        "@radix-ui/react-compose-refs": "1.1.2",
        "@radix-ui/react-primitive": "2.1.3",
        "@radix-ui/react-use-callback-ref": "1.1.1",
        "@radix-ui/react-use-escape-keydown": "1.1.1"
      },
      "peerDependencies": {
        "@types/react": "*",
        "@types/react-dom": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-dropdown-menu": {
      "version": "2.1.15",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-dropdown-menu/-/react-dropdown-menu-2.1.15.tgz",
      "integrity": "sha512-mIBnOjgwo9AH3FyKaSWoSu/dYj6VdhJ7frEPiGTeXCdUFHjl9h3mFh2wwhEtINOmYXWhdpf1rY2minFsmaNgVQ==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/primitive": "1.1.2",
        "@radix-ui/react-compose-refs": "1.1.2",
        "@radix-ui/react-context": "1.1.2",
        "@radix-ui/react-id": "1.1.1",
        "@radix-ui/react-menu": "2.1.15",
        "@radix-ui/react-primitive": "2.1.3",
        "@radix-ui/react-use-controllable-state": "1.2.2"
      },
      "peerDependencies": {
        "@types/react": "*",
        "@types/react-dom": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-focus-guards": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-focus-guards/-/react-focus-guards-1.1.2.tgz",
      "integrity": "sha512-fyjAACV62oPV925xFCrH8DR5xWhg9KYtJT4s3u54jxp+L/hbpTY2kIeEFFbFe+a/HCE94zGQMZLIpVTPVZDhaA==",
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-focus-scope": {
      "version": "1.1.7",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-focus-scope/-/react-focus-scope-1.1.7.tgz",
      "integrity": "sha512-t2ODlkXBQyn7jkl6TNaw/MtVEVvIGelJDCG41Okq/KwUsJBwQ4XVZsHAVUkK4mBv3ewiAS3PGuUWuY2BoK4ZUw==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/react-compose-refs": "1.1.2",
        "@radix-ui/react-primitive": "2.1.3",
        "@radix-ui/react-use-callback-ref": "1.1.1"
      },
      "peerDependencies": {
        "@types/react": "*",
        "@types/react-dom": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-id": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-id/-/react-id-1.1.1.tgz",
      "integrity": "sha512-kGkGegYIdQsOb4XjsfM97rXsiHaBwco+hFI66oO4s9LU+PLAC5oJ7khdOVFxkhsmlbpUqDAvXw11CluXP+jkHg==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/react-use-layout-effect": "1.1.1"
      },
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-label": {
      "version": "2.1.7",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-label/-/react-label-2.1.7.tgz",
      "integrity": "sha512-YT1GqPSL8kJn20djelMX7/cTRp/Y9w5IZHvfxQTVHrOqa2yMl7i/UfMqKRU5V7mEyKTrUVgJXhNQPVCG8PBLoQ==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/react-primitive": "2.1.3"
      },
      "peerDependencies": {
        "@types/react": "*",
        "@types/react-dom": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-menu": {
      "version": "2.1.15",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-menu/-/react-menu-2.1.15.tgz",
      "integrity": "sha512-tVlmA3Vb9n8SZSd+YSbuFR66l87Wiy4du+YE+0hzKQEANA+7cWKH1WgqcEX4pXqxUFQKrWQGHdvEfw00TjFiew==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/primitive": "1.1.2",
        "@radix-ui/react-collection": "1.1.7",
        "@radix-ui/react-compose-refs": "1.1.2",
        "@radix-ui/react-context": "1.1.2",
        "@radix-ui/react-direction": "1.1.1",
        "@radix-ui/react-dismissable-layer": "1.1.10",
        "@radix-ui/react-focus-guards": "1.1.2",
        "@radix-ui/react-focus-scope": "1.1.7",
        "@radix-ui/react-id": "1.1.1",
        "@radix-ui/react-popper": "1.2.7",
        "@radix-ui/react-portal": "1.1.9",
        "@radix-ui/react-presence": "1.1.4",
        "@radix-ui/react-primitive": "2.1.3",
        "@radix-ui/react-roving-focus": "1.1.10",
        "@radix-ui/react-slot": "1.2.3",
        "@radix-ui/react-use-callback-ref": "1.1.1",
        "aria-hidden": "^1.2.4",
        "react-remove-scroll": "^2.6.3"
      },
      "peerDependencies": {
        "@types/react": "*",
        "@types/react-dom": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-navigation-menu": {
      "version": "1.2.13",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-navigation-menu/-/react-navigation-menu-1.2.13.tgz",
      "integrity": "sha512-WG8wWfDiJlSF5hELjwfjSGOXcBR/ZMhBFCGYe8vERpC39CQYZeq1PQ2kaYHdye3V95d06H89KGMsVCIE4LWo3g==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/primitive": "1.1.2",
        "@radix-ui/react-collection": "1.1.7",
        "@radix-ui/react-compose-refs": "1.1.2",
        "@radix-ui/react-context": "1.1.2",
        "@radix-ui/react-direction": "1.1.1",
        "@radix-ui/react-dismissable-layer": "1.1.10",
        "@radix-ui/react-id": "1.1.1",
        "@radix-ui/react-presence": "1.1.4",
        "@radix-ui/react-primitive": "2.1.3",
        "@radix-ui/react-use-callback-ref": "1.1.1",
        "@radix-ui/react-use-controllable-state": "1.2.2",
        "@radix-ui/react-use-layout-effect": "1.1.1",
        "@radix-ui/react-use-previous": "1.1.1",
        "@radix-ui/react-visually-hidden": "1.2.3"
      },
      "peerDependencies": {
        "@types/react": "*",
        "@types/react-dom": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-popper": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-popper/-/react-popper-1.2.7.tgz",
      "integrity": "sha512-IUFAccz1JyKcf/RjB552PlWwxjeCJB8/4KxT7EhBHOJM+mN7LdW+B3kacJXILm32xawcMMjb2i0cIZpo+f9kiQ==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/react-dom": "^2.0.0",
        "@radix-ui/react-arrow": "1.1.7",
        "@radix-ui/react-compose-refs": "1.1.2",
        "@radix-ui/react-context": "1.1.2",
        "@radix-ui/react-primitive": "2.1.3",
        "@radix-ui/react-use-callback-ref": "1.1.1",
        "@radix-ui/react-use-layout-effect": "1.1.1",
        "@radix-ui/react-use-rect": "1.1.1",
        "@radix-ui/react-use-size": "1.1.1",
        "@radix-ui/rect": "1.1.1"
      },
      "peerDependencies": {
        "@types/react": "*",
        "@types/react-dom": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-portal": {
      "version": "1.1.9",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-portal/-/react-portal-1.1.9.tgz",
      "integrity": "sha512-bpIxvq03if6UNwXZ+HTK71JLh4APvnXntDc6XOX8UVq4XQOVl7lwok0AvIl+b8zgCw3fSaVTZMpAPPagXbKmHQ==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/react-primitive": "2.1.3",
        "@radix-ui/react-use-layout-effect": "1.1.1"
      },
      "peerDependencies": {
        "@types/react": "*",
        "@types/react-dom": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-presence": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-presence/-/react-presence-1.1.4.tgz",
      "integrity": "sha512-ueDqRbdc4/bkaQT3GIpLQssRlFgWaL/U2z/S31qRwwLWoxHLgry3SIfCwhxeQNbirEUXFa+lq3RL3oBYXtcmIA==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/react-compose-refs": "1.1.2",
        "@radix-ui/react-use-layout-effect": "1.1.1"
      },
      "peerDependencies": {
        "@types/react": "*",
        "@types/react-dom": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-primitive": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-primitive/-/react-primitive-2.1.3.tgz",
      "integrity": "sha512-m9gTwRkhy2lvCPe6QJp4d3G1TYEUHn/FzJUtq9MjH46an1wJU+GdoGC5VLof8RX8Ft/DlpshApkhswDLZzHIcQ==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/react-slot": "1.2.3"
      },
      "peerDependencies": {
        "@types/react": "*",
        "@types/react-dom": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-roving-focus": {
      "version": "1.1.10",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-roving-focus/-/react-roving-focus-1.1.10.tgz",
      "integrity": "sha512-dT9aOXUen9JSsxnMPv/0VqySQf5eDQ6LCk5Sw28kamz8wSOW2bJdlX2Bg5VUIIcV+6XlHpWTIuTPCf/UNIyq8Q==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/primitive": "1.1.2",
        "@radix-ui/react-collection": "1.1.7",
        "@radix-ui/react-compose-refs": "1.1.2",
        "@radix-ui/react-context": "1.1.2",
        "@radix-ui/react-direction": "1.1.1",
        "@radix-ui/react-id": "1.1.1",
        "@radix-ui/react-primitive": "2.1.3",
        "@radix-ui/react-use-callback-ref": "1.1.1",
        "@radix-ui/react-use-controllable-state": "1.2.2"
      },
      "peerDependencies": {
        "@types/react": "*",
        "@types/react-dom": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-select": {
      "version": "2.2.5",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-select/-/react-select-2.2.5.tgz",
      "integrity": "sha512-HnMTdXEVuuyzx63ME0ut4+sEMYW6oouHWNGUZc7ddvUWIcfCva/AMoqEW/3wnEllriMWBa0RHspCYnfCWJQYmA==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/number": "1.1.1",
        "@radix-ui/primitive": "1.1.2",
        "@radix-ui/react-collection": "1.1.7",
        "@radix-ui/react-compose-refs": "1.1.2",
        "@radix-ui/react-context": "1.1.2",
        "@radix-ui/react-direction": "1.1.1",
        "@radix-ui/react-dismissable-layer": "1.1.10",
        "@radix-ui/react-focus-guards": "1.1.2",
        "@radix-ui/react-focus-scope": "1.1.7",
        "@radix-ui/react-id": "1.1.1",
        "@radix-ui/react-popper": "1.2.7",
        "@radix-ui/react-portal": "1.1.9",
        "@radix-ui/react-primitive": "2.1.3",
        "@radix-ui/react-slot": "1.2.3",
        "@radix-ui/react-use-callback-ref": "1.1.1",
        "@radix-ui/react-use-controllable-state": "1.2.2",
        "@radix-ui/react-use-layout-effect": "1.1.1",
        "@radix-ui/react-use-previous": "1.1.1",
        "@radix-ui/react-visually-hidden": "1.2.3",
        "aria-hidden": "^1.2.4",
        "react-remove-scroll": "^2.6.3"
      },
      "peerDependencies": {
        "@types/react": "*",
        "@types/react-dom": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-separator": {
      "version": "1.1.7",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-separator/-/react-separator-1.1.7.tgz",
      "integrity": "sha512-0HEb8R9E8A+jZjvmFCy/J4xhbXy3TV+9XSnGJ3KvTtjlIUy/YQ/p6UYZvi7YbeoeXdyU9+Y3scizK6hkY37baA==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/react-primitive": "2.1.3"
      },
      "peerDependencies": {
        "@types/react": "*",
        "@types/react-dom": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-slot": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-slot/-/react-slot-1.2.3.tgz",
      "integrity": "sha512-aeNmHnBxbi2St0au6VBVC7JXFlhLlOnvIIlePNniyUNAClzmtAUEY8/pBiK3iHjufOlwA+c20/8jngo7xcrg8A==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/react-compose-refs": "1.1.2"
      },
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-tabs": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-tabs/-/react-tabs-1.1.12.tgz",
      "integrity": "sha512-GTVAlRVrQrSw3cEARM0nAx73ixrWDPNZAruETn3oHCNP6SbZ/hNxdxp+u7VkIEv3/sFoLq1PfcHrl7Pnp0CDpw==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/primitive": "1.1.2",
        "@radix-ui/react-context": "1.1.2",
        "@radix-ui/react-direction": "1.1.1",
        "@radix-ui/react-id": "1.1.1",
        "@radix-ui/react-presence": "1.1.4",
        "@radix-ui/react-primitive": "2.1.3",
        "@radix-ui/react-roving-focus": "1.1.10",
        "@radix-ui/react-use-controllable-state": "1.2.2"
      },
      "peerDependencies": {
        "@types/react": "*",
        "@types/react-dom": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-use-callback-ref": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-callback-ref/-/react-use-callback-ref-1.1.1.tgz",
      "integrity": "sha512-FkBMwD+qbGQeMu1cOHnuGB6x4yzPjho8ap5WtbEJ26umhgqVXbhekKUQO+hZEL1vU92a3wHwdp0HAcqAUF5iDg==",
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-use-controllable-state": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-controllable-state/-/react-use-controllable-state-1.2.2.tgz",
      "integrity": "sha512-BjasUjixPFdS+NKkypcyyN5Pmg83Olst0+c6vGov0diwTEo6mgdqVR6hxcEgFuh4QrAs7Rc+9KuGJ9TVCj0Zzg==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/react-use-effect-event": "0.0.2",
        "@radix-ui/react-use-layout-effect": "1.1.1"
      },
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-use-effect-event": {
      "version": "0.0.2",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-effect-event/-/react-use-effect-event-0.0.2.tgz",
      "integrity": "sha512-Qp8WbZOBe+blgpuUT+lw2xheLP8q0oatc9UpmiemEICxGvFLYmHm9QowVZGHtJlGbS6A6yJ3iViad/2cVjnOiA==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/react-use-layout-effect": "1.1.1"
      },
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-use-escape-keydown": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-escape-keydown/-/react-use-escape-keydown-1.1.1.tgz",
      "integrity": "sha512-Il0+boE7w/XebUHyBjroE+DbByORGR9KKmITzbR7MyQ4akpORYP/ZmbhAr0DG7RmmBqoOnZdy2QlvajJ2QA59g==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/react-use-callback-ref": "1.1.1"
      },
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-use-layout-effect": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-layout-effect/-/react-use-layout-effect-1.1.1.tgz",
      "integrity": "sha512-RbJRS4UWQFkzHTTwVymMTUv8EqYhOp8dOOviLj2ugtTiXRaRQS7GLGxZTLL1jWhMeoSCf5zmcZkqTl9IiYfXcQ==",
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-use-previous": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-previous/-/react-use-previous-1.1.1.tgz",
      "integrity": "sha512-2dHfToCj/pzca2Ck724OZ5L0EVrr3eHRNsG/b3xQJLA2hZpVCS99bLAX+hm1IHXDEnzU6by5z/5MIY794/a8NQ==",
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-use-rect": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-rect/-/react-use-rect-1.1.1.tgz",
      "integrity": "sha512-QTYuDesS0VtuHNNvMh+CjlKJ4LJickCMUAqjlE3+j8w+RlRpwyX3apEQKGFzbZGdo7XNG1tXa+bQqIE7HIXT2w==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/rect": "1.1.1"
      },
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-use-size": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-size/-/react-use-size-1.1.1.tgz",
      "integrity": "sha512-ewrXRDTAqAXlkl6t/fkXWNAhFX9I+CkKlw6zjEwk86RSPKwZr3xpBRso655aqYafwtnbpHLj6toFzmd6xdVptQ==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/react-use-layout-effect": "1.1.1"
      },
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/react-visually-hidden": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/@radix-ui/react-visually-hidden/-/react-visually-hidden-1.2.3.tgz",
      "integrity": "sha512-pzJq12tEaaIhqjbzpCuv/OypJY/BPavOofm+dbab+MHLajy277+1lLm6JFcGgF5eskJ6mquGirhXY2GD/8u8Ug==",
      "license": "MIT",
      "dependencies": {
        "@radix-ui/react-primitive": "2.1.3"
      },
      "peerDependencies": {
        "@types/react": "*",
        "@types/react-dom": "*",
        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@radix-ui/rect": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@radix-ui/rect/-/rect-1.1.1.tgz",
      "integrity": "sha512-HPwpGIzkl28mWyZqG52jiqDJ12waP11Pa1lGoiyUkIEuMLBP0oeK/C89esbXrxsky5we7dfd8U58nm0SgAWpVw==",
      "license": "MIT"
    },
    "node_modules/@rolldown/pluginutils": {
      "version": "1.0.0-beta.19",
      "resolved": "https://registry.npmjs.org/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.19.tgz",
      "integrity": "sha512-3FL3mnMbPu0muGOCaKAhhFEYmqv9eTfPSJRJmANrCwtgK8VuxpsZDGK+m0LYAGoyO8+0j5uRe4PeyPDK1yA/hA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.45.0.tgz",
      "integrity": "sha512-2o/FgACbji4tW1dzXOqAV15Eu7DdgbKsF2QKcxfG4xbh5iwU7yr5RRP5/U+0asQliSYv5M4o7BevlGIoSL0LXg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.45.0.tgz",
      "integrity": "sha512-PSZ0SvMOjEAxwZeTx32eI/j5xSYtDCRxGu5k9zvzoY77xUNssZM+WV6HYBLROpY5CkXsbQjvz40fBb7WPwDqtQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.45.0.tgz",
      "integrity": "sha512-BA4yPIPssPB2aRAWzmqzQ3y2/KotkLyZukVB7j3psK/U3nVJdceo6qr9pLM2xN6iRP/wKfxEbOb1yrlZH6sYZg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.45.0.tgz",
      "integrity": "sha512-Pr2o0lvTwsiG4HCr43Zy9xXrHspyMvsvEw4FwKYqhli4FuLE5FjcZzuQ4cfPe0iUFCvSQG6lACI0xj74FDZKRA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.45.0.tgz",
      "integrity": "sha512-lYE8LkE5h4a/+6VnnLiL14zWMPnx6wNbDG23GcYFpRW1V9hYWHAw9lBZ6ZUIrOaoK7NliF1sdwYGiVmziUF4vA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.45.0.tgz",
      "integrity": "sha512-PVQWZK9sbzpvqC9Q0GlehNNSVHR+4m7+wET+7FgSnKG3ci5nAMgGmr9mGBXzAuE5SvguCKJ6mHL6vq1JaJ/gvw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.45.0.tgz",
      "integrity": "sha512-hLrmRl53prCcD+YXTfNvXd776HTxNh8wPAMllusQ+amcQmtgo3V5i/nkhPN6FakW+QVLoUUr2AsbtIRPFU3xIA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.45.0.tgz",
      "integrity": "sha512-XBKGSYcrkdiRRjl+8XvrUR3AosXU0NvF7VuqMsm7s5nRy+nt58ZMB19Jdp1RdqewLcaYnpk8zeVs/4MlLZEJxw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.45.0.tgz",
      "integrity": "sha512-fRvZZPUiBz7NztBE/2QnCS5AtqLVhXmUOPj9IHlfGEXkapgImf4W9+FSkL8cWqoAjozyUzqFmSc4zh2ooaeF6g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.45.0.tgz",
      "integrity": "sha512-Btv2WRZOcUGi8XU80XwIvzTg4U6+l6D0V6sZTrZx214nrwxw5nAi8hysaXj/mctyClWgesyuxbeLylCBNauimg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.45.0.tgz",
      "integrity": "sha512-Li0emNnwtUZdLwHjQPBxn4VWztcrw/h7mgLyHiEI5Z0MhpeFGlzaiBHpSNVOMB/xucjXTTcO+dhv469Djr16KA==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.45.0.tgz",
      "integrity": "sha512-sB8+pfkYx2kvpDCfd63d5ScYT0Fz1LO6jIb2zLZvmK9ob2D8DeVqrmBDE0iDK8KlBVmsTNzrjr3G1xV4eUZhSw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.45.0.tgz",
      "integrity": "sha512-5GQ6PFhh7E6jQm70p1aW05G2cap5zMOvO0se5JMecHeAdj5ZhWEHbJ4hiKpfi1nnnEdTauDXxPgXae/mqjow9w==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.45.0.tgz",
      "integrity": "sha512-N/euLsBd1rekWcuduakTo/dJw6U6sBP3eUq+RXM9RNfPuWTvG2w/WObDkIvJ2KChy6oxZmOSC08Ak2OJA0UiAA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.45.0.tgz",
      "integrity": "sha512-2l9sA7d7QdikL0xQwNMO3xURBUNEWyHVHfAsHsUdq+E/pgLTUcCE+gih5PCdmyHmfTDeXUWVhqL0WZzg0nua3g==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.45.0.tgz",
      "integrity": "sha512-XZdD3fEEQcwG2KrJDdEQu7NrHonPxxaV0/w2HpvINBdcqebz1aL+0vM2WFJq4DeiAVT6F5SUQas65HY5JDqoPw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.45.0.tgz",
      "integrity": "sha512-7ayfgvtmmWgKWBkCGg5+xTQ0r5V1owVm67zTrsEY1008L5ro7mCyGYORomARt/OquB9KY7LpxVBZes+oSniAAQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.45.0.tgz",
      "integrity": "sha512-B+IJgcBnE2bm93jEW5kHisqvPITs4ddLOROAcOc/diBgrEiQJJ6Qcjby75rFSmH5eMGrqJryUgJDhrfj942apQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.45.0.tgz",
      "integrity": "sha512-+CXwwG66g0/FpWOnP/v1HnrGVSOygK/osUbu3wPRy8ECXjoYKjRAyfxYpDQOfghC5qPJYLPH0oN4MCOjwgdMug==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.45.0.tgz",
      "integrity": "sha512-SRf1cytG7wqcHVLrBc9VtPK4pU5wxiB/lNIkNmW2ApKXIg+RpqwHfsaEK+e7eH4A1BpI6BX/aBWXxZCIrJg3uA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@tailwindcss/node": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/node/-/node-4.1.11.tgz",
      "integrity": "sha512-yzhzuGRmv5QyU9qLNg4GTlYI6STedBWRE7NjxP45CsFYYq9taI0zJXZBMqIC/c8fViNLhmrbpSFS57EoxUmD6Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.3.0",
        "enhanced-resolve": "^5.18.1",
        "jiti": "^2.4.2",
        "lightningcss": "1.30.1",
        "magic-string": "^0.30.17",
        "source-map-js": "^1.2.1",
        "tailwindcss": "4.1.11"
      }
    },
    "node_modules/@tailwindcss/oxide": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide/-/oxide-4.1.11.tgz",
      "integrity": "sha512-Q69XzrtAhuyfHo+5/HMgr1lAiPP/G40OMFAnws7xcFEYqcypZmdW8eGXaOUIeOl1dzPJBPENXgbjsOyhg2nkrg==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "detect-libc": "^2.0.4",
        "tar": "^7.4.3"
      },
      "engines": {
        "node": ">= 10"
      },
      "optionalDependencies": {
        "@tailwindcss/oxide-android-arm64": "4.1.11",
        "@tailwindcss/oxide-darwin-arm64": "4.1.11",
        "@tailwindcss/oxide-darwin-x64": "4.1.11",
        "@tailwindcss/oxide-freebsd-x64": "4.1.11",
        "@tailwindcss/oxide-linux-arm-gnueabihf": "4.1.11",
        "@tailwindcss/oxide-linux-arm64-gnu": "4.1.11",
        "@tailwindcss/oxide-linux-arm64-musl": "4.1.11",
        "@tailwindcss/oxide-linux-x64-gnu": "4.1.11",
        "@tailwindcss/oxide-linux-x64-musl": "4.1.11",
        "@tailwindcss/oxide-wasm32-wasi": "4.1.11",
        "@tailwindcss/oxide-win32-arm64-msvc": "4.1.11",
        "@tailwindcss/oxide-win32-x64-msvc": "4.1.11"
      }
    },
    "node_modules/@tailwindcss/oxide-android-arm64": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-android-arm64/-/oxide-android-arm64-4.1.11.tgz",
      "integrity": "sha512-3IfFuATVRUMZZprEIx9OGDjG3Ou3jG4xQzNTvjDoKmU9JdmoCohQJ83MYd0GPnQIu89YoJqvMM0G3uqLRFtetg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-darwin-arm64": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-darwin-arm64/-/oxide-darwin-arm64-4.1.11.tgz",
      "integrity": "sha512-ESgStEOEsyg8J5YcMb1xl8WFOXfeBmrhAwGsFxxB2CxY9evy63+AtpbDLAyRkJnxLy2WsD1qF13E97uQyP1lfQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-darwin-x64": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-darwin-x64/-/oxide-darwin-x64-4.1.11.tgz",
      "integrity": "sha512-EgnK8kRchgmgzG6jE10UQNaH9Mwi2n+yw1jWmof9Vyg2lpKNX2ioe7CJdf9M5f8V9uaQxInenZkOxnTVL3fhAw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-freebsd-x64": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-freebsd-x64/-/oxide-freebsd-x64-4.1.11.tgz",
      "integrity": "sha512-xdqKtbpHs7pQhIKmqVpxStnY1skuNh4CtbcyOHeX1YBE0hArj2romsFGb6yUmzkq/6M24nkxDqU8GYrKrz+UcA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-linux-arm-gnueabihf": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm-gnueabihf/-/oxide-linux-arm-gnueabihf-4.1.11.tgz",
      "integrity": "sha512-ryHQK2eyDYYMwB5wZL46uoxz2zzDZsFBwfjssgB7pzytAeCCa6glsiJGjhTEddq/4OsIjsLNMAiMlHNYnkEEeg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-linux-arm64-gnu": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm64-gnu/-/oxide-linux-arm64-gnu-4.1.11.tgz",
      "integrity": "sha512-mYwqheq4BXF83j/w75ewkPJmPZIqqP1nhoghS9D57CLjsh3Nfq0m4ftTotRYtGnZd3eCztgbSPJ9QhfC91gDZQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-linux-arm64-musl": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm64-musl/-/oxide-linux-arm64-musl-4.1.11.tgz",
      "integrity": "sha512-m/NVRFNGlEHJrNVk3O6I9ggVuNjXHIPoD6bqay/pubtYC9QIdAMpS+cswZQPBLvVvEF6GtSNONbDkZrjWZXYNQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-linux-x64-gnu": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-x64-gnu/-/oxide-linux-x64-gnu-4.1.11.tgz",
      "integrity": "sha512-YW6sblI7xukSD2TdbbaeQVDysIm/UPJtObHJHKxDEcW2exAtY47j52f8jZXkqE1krdnkhCMGqP3dbniu1Te2Fg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-linux-x64-musl": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-x64-musl/-/oxide-linux-x64-musl-4.1.11.tgz",
      "integrity": "sha512-e3C/RRhGunWYNC3aSF7exsQkdXzQ/M+aYuZHKnw4U7KQwTJotnWsGOIVih0s2qQzmEzOFIJ3+xt7iq67K/p56Q==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-wasm32-wasi": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-wasm32-wasi/-/oxide-wasm32-wasi-4.1.11.tgz",
      "integrity": "sha512-Xo1+/GU0JEN/C/dvcammKHzeM6NqKovG+6921MR6oadee5XPBaKOumrJCXvopJ/Qb5TH7LX/UAywbqrP4lax0g==",
      "bundleDependencies": [
        "@napi-rs/wasm-runtime",
        "@emnapi/core",
        "@emnapi/runtime",
        "@tybys/wasm-util",
        "@emnapi/wasi-threads",
        "tslib"
      ],
      "cpu": [
        "wasm32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@emnapi/core": "^1.4.3",
        "@emnapi/runtime": "^1.4.3",
        "@emnapi/wasi-threads": "^1.0.2",
        "@napi-rs/wasm-runtime": "^0.2.11",
        "@tybys/wasm-util": "^0.9.0",
        "tslib": "^2.8.0"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@tailwindcss/oxide-win32-arm64-msvc": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-win32-arm64-msvc/-/oxide-win32-arm64-msvc-4.1.11.tgz",
      "integrity": "sha512-UgKYx5PwEKrac3GPNPf6HVMNhUIGuUh4wlDFR2jYYdkX6pL/rn73zTq/4pzUm8fOjAn5L8zDeHp9iXmUGOXZ+w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-win32-x64-msvc": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-win32-x64-msvc/-/oxide-win32-x64-msvc-4.1.11.tgz",
      "integrity": "sha512-YfHoggn1j0LK7wR82TOucWc5LDCguHnoS879idHekmmiR7g9HUtMw9MI0NHatS28u/Xlkfi9w5RJWgz2Dl+5Qg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/postcss": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/postcss/-/postcss-4.1.11.tgz",
      "integrity": "sha512-q/EAIIpF6WpLhKEuQSEVMZNMIY8KhWoAemZ9eylNAih9jxMGAYPPWBn3I9QL/2jZ+e7OEz/tZkX5HwbBR4HohA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@alloc/quick-lru": "^5.2.0",
        "@tailwindcss/node": "4.1.11",
        "@tailwindcss/oxide": "4.1.11",
        "postcss": "^8.4.41",
        "tailwindcss": "4.1.11"
      }
    },
    "node_modules/@tailwindcss/vite": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/@tailwindcss/vite/-/vite-4.1.11.tgz",
      "integrity": "sha512-RHYhrR3hku0MJFRV+fN2gNbDNEh3dwKvY8XJvTxCSXeMOsCRSr+uKvDWQcbizrHgjML6ZmTE5OwMrl5wKcujCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@tailwindcss/node": "4.1.11",
        "@tailwindcss/oxide": "4.1.11",
        "tailwindcss": "4.1.11"
      },
      "peerDependencies": {
        "vite": "^5.2.0 || ^6 || ^7"
      }
    },
    "node_modules/@tanstack/query-core": {
      "version": "5.83.0",
      "resolved": "https://registry.npmjs.org/@tanstack/query-core/-/query-core-5.83.0.tgz",
      "integrity": "sha512-0M8dA+amXUkyz5cVUm/B+zSk3xkQAcuXuz5/Q/LveT4ots2rBpPTZOzd7yJa2Utsf8D2Upl5KyjhHRY+9lB/XA==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/tannerlinsley"
      }
    },
    "node_modules/@tanstack/react-query": {
      "version": "5.83.0",
      "resolved": "https://registry.npmjs.org/@tanstack/react-query/-/react-query-5.83.0.tgz",
      "integrity": "sha512-/XGYhZ3foc5H0VM2jLSD/NyBRIOK4q9kfeml4+0x2DlL6xVuAcVEW+hTlTapAmejObg0i3eNqhkr2dT+eciwoQ==",
      "license": "MIT",
      "dependencies": {
        "@tanstack/query-core": "5.83.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/tannerlinsley"
      },
      "peerDependencies": {
        "react": "^18 || ^19"
      }
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
      "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/history": {
      "version": "4.7.11",
      "resolved": "https://registry.npmjs.org/@types/history/-/history-4.7.11.tgz",
      "integrity": "sha512-qjDJRrmvBMiTx+jyLxvLfJU7UznFuokDv4f3WRuriHKERccVpFU+8XMQUAbDzoiJCsmexxRExQeMwwCdamSKDA==",
      "license": "MIT"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "19.1.8",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.8.tgz",
      "integrity": "sha512-AwAfQ2Wa5bCx9WP8nZL2uMZWod7J7/JSplxbTmBQ5ms6QpqNYm672H0Vu9ZVKVngQ+ii4R/byguVEUZQyeg44g==",
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "19.1.6",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.1.6.tgz",
      "integrity": "sha512-4hOiT/dwO8Ko0gV1m/TJZYk3y0KBnY9vzDh7W+DH17b2HFSOGgdj33dhihPeuy3l0q23+4e+hoXHV6hCC4dCXw==",
      "devOptional": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^19.0.0"
      }
    },
    "node_modules/@types/react-router": {
      "version": "5.1.20",
      "resolved": "https://registry.npmjs.org/@types/react-router/-/react-router-5.1.20.tgz",
      "integrity": "sha512-jGjmu/ZqS7FjSH6owMcD5qpq19+1RS9DeVRqfl1FeBMxTDQAGwlMWOcs52NDoXaNKyG3d1cYQFMs9rCrb88o9Q==",
      "license": "MIT",
      "dependencies": {
        "@types/history": "^4.7.11",
        "@types/react": "*"
      }
    },
    "node_modules/@types/react-router-dom": {
      "version": "5.3.3",
      "resolved": "https://registry.npmjs.org/@types/react-router-dom/-/react-router-dom-5.3.3.tgz",
      "integrity": "sha512-kpqnYK4wcdm5UaWI3fLcELopqLrHgLqNsdpHauzlQktfkHL3npOSwtj1Uz9oKBAzs7lFtVkV8j83voAz2D8fhw==",
      "license": "MIT",
      "dependencies": {
        "@types/history": "^4.7.11",
        "@types/react": "*",
        "@types/react-router": "*"
      }
    },
    "node_modules/@typescript-eslint/eslint-plugin": {
      "version": "8.37.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.37.0.tgz",
      "integrity": "sha512-jsuVWeIkb6ggzB+wPCsR4e6loj+rM72ohW6IBn2C+5NCvfUVY8s33iFPySSVXqtm5Hu29Ne/9bnA0JmyLmgenA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/regexpp": "^4.10.0",
        "@typescript-eslint/scope-manager": "8.37.0",
        "@typescript-eslint/type-utils": "8.37.0",
        "@typescript-eslint/utils": "8.37.0",
        "@typescript-eslint/visitor-keys": "8.37.0",
        "graphemer": "^1.4.0",
        "ignore": "^7.0.0",
        "natural-compare": "^1.4.0",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^8.37.0",
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/eslint-plugin/node_modules/ignore": {
      "version": "7.0.5",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-7.0.5.tgz",
      "integrity": "sha512-Hs59xBNfUIunMFgWAbGX5cq6893IbWg4KnrjbYwX3tx0ztorVgTDA6B2sxf8ejHJ4wz8BqGUMYlnzNBer5NvGg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/@typescript-eslint/parser": {
      "version": "8.37.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.37.0.tgz",
      "integrity": "sha512-kVIaQE9vrN9RLCQMQ3iyRlVJpTiDUY6woHGb30JDkfJErqrQEmtdWH3gV0PBAfGZgQXoqzXOO0T3K6ioApbbAA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/scope-manager": "8.37.0",
        "@typescript-eslint/types": "8.37.0",
        "@typescript-eslint/typescript-estree": "8.37.0",
        "@typescript-eslint/visitor-keys": "8.37.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/project-service": {
      "version": "8.37.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/project-service/-/project-service-8.37.0.tgz",
      "integrity": "sha512-BIUXYsbkl5A1aJDdYJCBAo8rCEbAvdquQ8AnLb6z5Lp1u3x5PNgSSx9A/zqYc++Xnr/0DVpls8iQ2cJs/izTXA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/tsconfig-utils": "^8.37.0",
        "@typescript-eslint/types": "^8.37.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/scope-manager": {
      "version": "8.37.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.37.0.tgz",
      "integrity": "sha512-0vGq0yiU1gbjKob2q691ybTg9JX6ShiVXAAfm2jGf3q0hdP6/BruaFjL/ManAR/lj05AvYCH+5bbVo0VtzmjOA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.37.0",
        "@typescript-eslint/visitor-keys": "8.37.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/tsconfig-utils": {
      "version": "8.37.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/tsconfig-utils/-/tsconfig-utils-8.37.0.tgz",
      "integrity": "sha512-1/YHvAVTimMM9mmlPvTec9NP4bobA1RkDbMydxG8omqwJJLEW/Iy2C4adsAESIXU3WGLXFHSZUU+C9EoFWl4Zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/type-utils": {
      "version": "8.37.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.37.0.tgz",
      "integrity": "sha512-SPkXWIkVZxhgwSwVq9rqj/4VFo7MnWwVaRNznfQDc/xPYHjXnPfLWn+4L6FF1cAz6e7dsqBeMawgl7QjUMj4Ow==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.37.0",
        "@typescript-eslint/typescript-estree": "8.37.0",
        "@typescript-eslint/utils": "8.37.0",
        "debug": "^4.3.4",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/types": {
      "version": "8.37.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.37.0.tgz",
      "integrity": "sha512-ax0nv7PUF9NOVPs+lmQ7yIE7IQmAf8LGcXbMvHX5Gm+YJUYNAl340XkGnrimxZ0elXyoQJuN5sbg6C4evKA4SQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree": {
      "version": "8.37.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.37.0.tgz",
      "integrity": "sha512-zuWDMDuzMRbQOM+bHyU4/slw27bAUEcKSKKs3hcv2aNnc/tvE/h7w60dwVw8vnal2Pub6RT1T7BI8tFZ1fE+yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/project-service": "8.37.0",
        "@typescript-eslint/tsconfig-utils": "8.37.0",
        "@typescript-eslint/types": "8.37.0",
        "@typescript-eslint/visitor-keys": "8.37.0",
        "debug": "^4.3.4",
        "fast-glob": "^3.3.2",
        "is-glob": "^4.0.3",
        "minimatch": "^9.0.4",
        "semver": "^7.6.0",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@typescript-eslint/utils": {
      "version": "8.37.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.37.0.tgz",
      "integrity": "sha512-TSFvkIW6gGjN2p6zbXo20FzCABbyUAuq6tBvNRGsKdsSQ6a7rnV6ADfZ7f4iI3lIiXc4F4WWvtUfDw9CJ9pO5A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.7.0",
        "@typescript-eslint/scope-manager": "8.37.0",
        "@typescript-eslint/types": "8.37.0",
        "@typescript-eslint/typescript-estree": "8.37.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys": {
      "version": "8.37.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.37.0.tgz",
      "integrity": "sha512-YzfhzcTnZVPiLfP/oeKtDp2evwvHLMe0LOy7oe+hb9KKIumLNohYS9Hgp1ifwpu42YWxhZE8yieggz6JpqO/1w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.37.0",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.6.0.tgz",
      "integrity": "sha512-5Kgff+m8e2PB+9j51eGHEpn5kUzRKH2Ry0qGoe8ItJg7pqnkPrYPkDQZGgGmTa0EGarHrkjLvOdU3b1fzI8otQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.27.4",
        "@babel/plugin-transform-react-jsx-self": "^7.27.1",
        "@babel/plugin-transform-react-jsx-source": "^7.27.1",
        "@rolldown/pluginutils": "1.0.0-beta.19",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.17.0"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0-beta.0"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/aria-hidden": {
      "version": "1.2.6",
      "resolved": "https://registry.npmjs.org/aria-hidden/-/aria-hidden-1.2.6.tgz",
      "integrity": "sha512-ik3ZgC9dY/lYVVM++OISsaYDeg1tb0VtP5uL3ouh1koGOaUMDPpbFIei4JkFimWUFPn90sbMNMXQAIVOlnYKJA==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/autoprefixer": {
      "version": "10.4.21",
      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.21.tgz",
      "integrity": "sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/autoprefixer"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.24.4",
        "caniuse-lite": "^1.0.30001702",
        "fraction.js": "^4.3.7",
        "normalize-range": "^0.1.2",
        "picocolors": "^1.1.1",
        "postcss-value-parser": "^4.2.0"
      },
      "bin": {
        "autoprefixer": "bin/autoprefixer"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/axios": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.10.0.tgz",
      "integrity": "sha512-/1xYAC4MP/HEG+3duIhFr4ZQXR4sQXOIe+o6sdqzeykGLx6Upp/1p8MHqhINOvGeP7xyNHe7tsiJByc4SSVUxw==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.1",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.1.tgz",
      "integrity": "sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001726",
        "electron-to-chromium": "^1.5.173",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001727",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001727.tgz",
      "integrity": "sha512-pB68nIHmbN6L/4C6MH1DokyR3bYqFwjaSs/sWDHGj4CTcFtQUQMuJftVwWkXq7mNWOybD3KhUv3oWHoGxgP14Q==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/chownr": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-3.0.0.tgz",
      "integrity": "sha512-+IxzY9BZOQd/XuYPRmrvEVjF/nqj5kgT4kEq7VofrDoM1MxoRjEWkrCC3EtLi59TVawxTAn+orJwFQcrqEN1+g==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/class-variance-authority": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/class-variance-authority/-/class-variance-authority-0.7.1.tgz",
      "integrity": "sha512-Ka+9Trutv7G8M6WT6SeiRWz792K5qEqIGEGzXKhAE6xOWAY6pPH8U+9IY3oCMv6kqTmLsv7Xh/2w2RigkePMsg==",
      "license": "Apache-2.0",
      "dependencies": {
        "clsx": "^2.1.1"
      },
      "funding": {
        "url": "https://polar.sh/cva"
      }
    },
    "node_modules/clsx": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cookie": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-1.0.2.tgz",
      "integrity": "sha512-9Kr/j4O16ISv8zBBhJoi4bXOYNTkFLOqSL3UDB0njXxCXNezjeyVrJyGOWtgfs/q2km1gwBcfH8q1yEGoMYunA==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
      "integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/detect-node-es": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/detect-node-es/-/detect-node-es-1.1.0.tgz",
      "integrity": "sha512-ypdmJU/TbBby2Dxibuv7ZLW3Bs1QEmM7nHjEANfohJLvE0XVujisn1qPJcZxg+qDucsr+bP6fLD1rPS3AhJ7EQ==",
      "license": "MIT"
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.183",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.183.tgz",
      "integrity": "sha512-vCrDBYjQCAEefWGjlK3EpoSKfKbT10pR4XXPdn65q7snuNOZnthoVpBfZPykmDapOKfoD+MMIPG8ZjKyyc9oHA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/enhanced-resolve": {
      "version": "5.18.2",
      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.18.2.tgz",
      "integrity": "sha512-6Jw4sE1maoRJo3q8MsSIn2onJFbLTOjY9hlx4DZXmOKvLRd1Ok2kXmAGXaafL2+ijsJZ1ClYbl/pmqr9+k4iUQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.4",
        "tapable": "^2.2.0"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/esbuild": {
      "version": "0.25.6",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.6.tgz",
      "integrity": "sha512-GVuzuUwtdsghE3ocJ9Bs8PNoF13HNQ5TXbEi2AhvVb8xU1Iwt9Fos9FEamfoee+u/TOsn7GUWc04lz46n2bbTg==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.25.6",
        "@esbuild/android-arm": "0.25.6",
        "@esbuild/android-arm64": "0.25.6",
        "@esbuild/android-x64": "0.25.6",
        "@esbuild/darwin-arm64": "0.25.6",
        "@esbuild/darwin-x64": "0.25.6",
        "@esbuild/freebsd-arm64": "0.25.6",
        "@esbuild/freebsd-x64": "0.25.6",
        "@esbuild/linux-arm": "0.25.6",
        "@esbuild/linux-arm64": "0.25.6",
        "@esbuild/linux-ia32": "0.25.6",
        "@esbuild/linux-loong64": "0.25.6",
        "@esbuild/linux-mips64el": "0.25.6",
        "@esbuild/linux-ppc64": "0.25.6",
        "@esbuild/linux-riscv64": "0.25.6",
        "@esbuild/linux-s390x": "0.25.6",
        "@esbuild/linux-x64": "0.25.6",
        "@esbuild/netbsd-arm64": "0.25.6",
        "@esbuild/netbsd-x64": "0.25.6",
        "@esbuild/openbsd-arm64": "0.25.6",
        "@esbuild/openbsd-x64": "0.25.6",
        "@esbuild/openharmony-arm64": "0.25.6",
        "@esbuild/sunos-x64": "0.25.6",
        "@esbuild/win32-arm64": "0.25.6",
        "@esbuild/win32-ia32": "0.25.6",
        "@esbuild/win32-x64": "0.25.6"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "9.31.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.31.0.tgz",
      "integrity": "sha512-QldCVh/ztyKJJZLr4jXNUByx3gR+TDYZCRXEktiZoUR3PGy4qCmSbkxcIle8GEwGpb5JBZazlaJ/CxLidXdEbQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.12.1",
        "@eslint/config-array": "^0.21.0",
        "@eslint/config-helpers": "^0.3.0",
        "@eslint/core": "^0.15.0",
        "@eslint/eslintrc": "^3.3.1",
        "@eslint/js": "9.31.0",
        "@eslint/plugin-kit": "^0.3.1",
        "@humanfs/node": "^0.16.6",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.4.2",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.6",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.4.0",
        "eslint-visitor-keys": "^4.2.1",
        "espree": "^10.4.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.2.0.tgz",
      "integrity": "sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
      }
    },
    "node_modules/eslint-plugin-react-refresh": {
      "version": "0.4.20",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.20.tgz",
      "integrity": "sha512-XpbHQ2q5gUF8BGOX4dHe+71qoirYMhApEPZ7sfhF/dNnOF1UXnCMGZf79SFTBO7Bz5YEIT4TMieSlJBWhP9WBA==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "eslint": ">=8.40"
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.4.0.tgz",
      "integrity": "sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.1.tgz",
      "integrity": "sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "10.4.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.4.0.tgz",
      "integrity": "sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.15.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-glob": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.8"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-glob/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fastq": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.3.tgz",
      "integrity": "sha512-qsITQPfmvMOSAdeyZ+12I1c+CKSstAFAwu+97zrnWAbIr5u8wfsExUzCesVLC8NgHuRUqNN4Zy6UPWUTRGslcA==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fraction.js": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
      "integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "*"
      },
      "funding": {
        "type": "patreon",
        "url": "https://github.com/sponsors/rawify"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-nonce": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-nonce/-/get-nonce-1.0.1.tgz",
      "integrity": "sha512-FJhYRoDaiatfEkUK8HKlicmu/3SGFD51q3itKDGoSTysQJBnfOcxU5GxnhE1E6soB76MbT0MBtnKJuXyAx+96Q==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "16.3.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-16.3.0.tgz",
      "integrity": "sha512-bqWEnJ1Nt3neqx2q5SFfGS8r/ahumIakg3HcwtNlrVlwXIeNumWn/c7Pn/wKzGhf6SaW6H6uWXLqC30STCMchQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/jiti": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/jiti/-/jiti-2.4.2.tgz",
      "integrity": "sha512-rg9zJN+G4n2nfJl5MW3BMygZX56zKPNVEYYqq7adpmMh4Jn2QNEwhvQlFy6jPVdcod7txZtKHWnyZiA3a0zP7A==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jiti": "lib/jiti-cli.mjs"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/lightningcss": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss/-/lightningcss-1.30.1.tgz",
      "integrity": "sha512-xi6IyHML+c9+Q3W0S4fCQJOym42pyurFiJUHEcEyHS0CeKzia4yZDEsLlqOFykxOdHpNy0NmvVO31vcSqAxJCg==",
      "dev": true,
      "license": "MPL-2.0",
      "dependencies": {
        "detect-libc": "^2.0.3"
      },
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      },
      "optionalDependencies": {
        "lightningcss-darwin-arm64": "1.30.1",
        "lightningcss-darwin-x64": "1.30.1",
        "lightningcss-freebsd-x64": "1.30.1",
        "lightningcss-linux-arm-gnueabihf": "1.30.1",
        "lightningcss-linux-arm64-gnu": "1.30.1",
        "lightningcss-linux-arm64-musl": "1.30.1",
        "lightningcss-linux-x64-gnu": "1.30.1",
        "lightningcss-linux-x64-musl": "1.30.1",
        "lightningcss-win32-arm64-msvc": "1.30.1",
        "lightningcss-win32-x64-msvc": "1.30.1"
      }
    },
    "node_modules/lightningcss-darwin-arm64": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-darwin-arm64/-/lightningcss-darwin-arm64-1.30.1.tgz",
      "integrity": "sha512-c8JK7hyE65X1MHMN+Viq9n11RRC7hgin3HhYKhrMyaXflk5GVplZ60IxyoVtzILeKr+xAJwg6zK6sjTBJ0FKYQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-darwin-x64": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-darwin-x64/-/lightningcss-darwin-x64-1.30.1.tgz",
      "integrity": "sha512-k1EvjakfumAQoTfcXUcHQZhSpLlkAuEkdMBsI/ivWw9hL+7FtilQc0Cy3hrx0AAQrVtQAbMI7YjCgYgvn37PzA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-freebsd-x64": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-freebsd-x64/-/lightningcss-freebsd-x64-1.30.1.tgz",
      "integrity": "sha512-kmW6UGCGg2PcyUE59K5r0kWfKPAVy4SltVeut+umLCFoJ53RdCUWxcRDzO1eTaxf/7Q2H7LTquFHPL5R+Gjyig==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-linux-arm-gnueabihf": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-linux-arm-gnueabihf/-/lightningcss-linux-arm-gnueabihf-1.30.1.tgz",
      "integrity": "sha512-MjxUShl1v8pit+6D/zSPq9S9dQ2NPFSQwGvxBCYaBYLPlCWuPh9/t1MRS8iUaR8i+a6w7aps+B4N0S1TYP/R+Q==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-linux-arm64-gnu": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-linux-arm64-gnu/-/lightningcss-linux-arm64-gnu-1.30.1.tgz",
      "integrity": "sha512-gB72maP8rmrKsnKYy8XUuXi/4OctJiuQjcuqWNlJQ6jZiWqtPvqFziskH3hnajfvKB27ynbVCucKSm2rkQp4Bw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-linux-arm64-musl": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-linux-arm64-musl/-/lightningcss-linux-arm64-musl-1.30.1.tgz",
      "integrity": "sha512-jmUQVx4331m6LIX+0wUhBbmMX7TCfjF5FoOH6SD1CttzuYlGNVpA7QnrmLxrsub43ClTINfGSYyHe2HWeLl5CQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-linux-x64-gnu": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-linux-x64-gnu/-/lightningcss-linux-x64-gnu-1.30.1.tgz",
      "integrity": "sha512-piWx3z4wN8J8z3+O5kO74+yr6ze/dKmPnI7vLqfSqI8bccaTGY5xiSGVIJBDd5K5BHlvVLpUB3S2YCfelyJ1bw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-linux-x64-musl": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-linux-x64-musl/-/lightningcss-linux-x64-musl-1.30.1.tgz",
      "integrity": "sha512-rRomAK7eIkL+tHY0YPxbc5Dra2gXlI63HL+v1Pdi1a3sC+tJTcFrHX+E86sulgAXeI7rSzDYhPSeHHjqFhqfeQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-win32-arm64-msvc": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-win32-arm64-msvc/-/lightningcss-win32-arm64-msvc-1.30.1.tgz",
      "integrity": "sha512-mSL4rqPi4iXq5YVqzSsJgMVFENoa4nGTT/GjO2c0Yl9OuQfPsIfncvLrEW6RbbB24WtZ3xP/2CCmI3tNkNV4oA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-win32-x64-msvc": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-win32-x64-msvc/-/lightningcss-win32-x64-msvc-1.30.1.tgz",
      "integrity": "sha512-PVqXh48wh4T53F/1CCu8PIPCxLzWyCnn/9T5W1Jpmdy5h9Cwd+0YQS6/LwhHXSafuc61/xg9Lv5OrCby6a++jg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/lucide-react": {
      "version": "0.525.0",
      "resolved": "https://registry.npmjs.org/lucide-react/-/lucide-react-0.525.0.tgz",
      "integrity": "sha512-Tm1txJ2OkymCGkvwoHt33Y2JpN5xucVq1slHcgE6Lk0WjDfjgKWor5CdVER8U6DvcfMwh4M8XxmpTiyzfmfDYQ==",
      "license": "ISC",
      "peerDependencies": {
        "react": "^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/magic-string": {
      "version": "0.30.17",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.17.tgz",
      "integrity": "sha512-sNPKHvyjVf7gyjwS4xGTaW/mCnF8wnjtifKBEhxfZ7E/S8tQ0rssrwGNn6q8JH/ohItJfSQp9mBtQYuTlH5QnA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/minizlib": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-3.0.2.tgz",
      "integrity": "sha512-oG62iEk+CYt5Xj2YqI5Xi9xWUeZhDI8jjQmC5oThVH5JGCTgIjr7ciJDzC7MBzYd//WvR1OTmP5Q38Q8ShQtVA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "minipass": "^7.1.2"
      },
      "engines": {
        "node": ">= 18"
      }
    },
    "node_modules/mkdirp": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-3.0.1.tgz",
      "integrity": "sha512-+NsyUUAZDmo6YVHzL/stxSu3t9YS1iljliy3BSDrXJ/dkn1KYdmtZODGGjLcc9XLgVVpH4KshHB8XmZgMhaBXg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "mkdirp": "dist/cjs/src/bin.js"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/normalize-range": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
      "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/postcss": {
      "version": "8.5.6",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/react": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react/-/react-19.1.0.tgz",
      "integrity": "sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.1.0.tgz",
      "integrity": "sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==",
      "license": "MIT",
      "dependencies": {
        "scheduler": "^0.26.0"
      },
      "peerDependencies": {
        "react": "^19.1.0"
      }
    },
    "node_modules/react-refresh": {
      "version": "0.17.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-remove-scroll": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/react-remove-scroll/-/react-remove-scroll-2.7.1.tgz",
      "integrity": "sha512-HpMh8+oahmIdOuS5aFKKY6Pyog+FNaZV/XyJOq7b4YFwsFHe5yYfdbIalI4k3vU2nSDql7YskmUseHsRrJqIPA==",
      "license": "MIT",
      "dependencies": {
        "react-remove-scroll-bar": "^2.3.7",
        "react-style-singleton": "^2.2.3",
        "tslib": "^2.1.0",
        "use-callback-ref": "^1.3.3",
        "use-sidecar": "^1.1.3"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/react-remove-scroll-bar": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/react-remove-scroll-bar/-/react-remove-scroll-bar-2.3.8.tgz",
      "integrity": "sha512-9r+yi9+mgU33AKcj6IbT9oRCO78WriSj6t/cF8DWBZJ9aOGPOTEDvdUDz1FwKim7QXWwmHqtdHnRJfhAxEG46Q==",
      "license": "MIT",
      "dependencies": {
        "react-style-singleton": "^2.2.2",
        "tslib": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/react-router": {
      "version": "7.6.3",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-7.6.3.tgz",
      "integrity": "sha512-zf45LZp5skDC6I3jDLXQUu0u26jtuP4lEGbc7BbdyxenBN1vJSTA18czM2D+h5qyMBuMrD+9uB+mU37HIoKGRA==",
      "license": "MIT",
      "dependencies": {
        "cookie": "^1.0.1",
        "set-cookie-parser": "^2.6.0"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "react": ">=18",
        "react-dom": ">=18"
      },
      "peerDependenciesMeta": {
        "react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/react-router-dom": {
      "version": "7.6.3",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-7.6.3.tgz",
      "integrity": "sha512-DiWJm9qdUAmiJrVWaeJdu4TKu13+iB/8IEi0EW/XgaHCjW/vWGrwzup0GVvaMteuZjKnh5bEvJP/K0MDnzawHw==",
      "license": "MIT",
      "dependencies": {
        "react-router": "7.6.3"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "react": ">=18",
        "react-dom": ">=18"
      }
    },
    "node_modules/react-style-singleton": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/react-style-singleton/-/react-style-singleton-2.2.3.tgz",
      "integrity": "sha512-b6jSvxvVnyptAiLjbkWLE/lOnR4lfTtDAl+eUC7RZy+QQWc6wRzIV2CE6xBuMmDxc2qIihtDCZD5NPOFl7fRBQ==",
      "license": "MIT",
      "dependencies": {
        "get-nonce": "^1.0.0",
        "tslib": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/reusify": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rollup": {
      "version": "4.45.0",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.45.0.tgz",
      "integrity": "sha512-WLjEcJRIo7i3WDDgOIJqVI2d+lAC3EwvOGy+Xfq6hs+GQuAA4Di/H72xmXkOhrIWFg2PFYSKZYfH0f4vfKXN4A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.8"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.45.0",
        "@rollup/rollup-android-arm64": "4.45.0",
        "@rollup/rollup-darwin-arm64": "4.45.0",
        "@rollup/rollup-darwin-x64": "4.45.0",
        "@rollup/rollup-freebsd-arm64": "4.45.0",
        "@rollup/rollup-freebsd-x64": "4.45.0",
        "@rollup/rollup-linux-arm-gnueabihf": "4.45.0",
        "@rollup/rollup-linux-arm-musleabihf": "4.45.0",
        "@rollup/rollup-linux-arm64-gnu": "4.45.0",
        "@rollup/rollup-linux-arm64-musl": "4.45.0",
        "@rollup/rollup-linux-loongarch64-gnu": "4.45.0",
        "@rollup/rollup-linux-powerpc64le-gnu": "4.45.0",
        "@rollup/rollup-linux-riscv64-gnu": "4.45.0",
        "@rollup/rollup-linux-riscv64-musl": "4.45.0",
        "@rollup/rollup-linux-s390x-gnu": "4.45.0",
        "@rollup/rollup-linux-x64-gnu": "4.45.0",
        "@rollup/rollup-linux-x64-musl": "4.45.0",
        "@rollup/rollup-win32-arm64-msvc": "4.45.0",
        "@rollup/rollup-win32-ia32-msvc": "4.45.0",
        "@rollup/rollup-win32-x64-msvc": "4.45.0",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/scheduler": {
      "version": "0.26.0",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
      "integrity": "sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/set-cookie-parser": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/set-cookie-parser/-/set-cookie-parser-2.7.1.tgz",
      "integrity": "sha512-IOc8uWeOZgnb3ptbCURJWNjWUPcO3ZnTTdzsurqERrP6nPyv+paC55vJM0LpOlT2ne+Ix+9+CRG1MNLlyZ4GjQ==",
      "license": "MIT"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tailwind-merge": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/tailwind-merge/-/tailwind-merge-3.3.1.tgz",
      "integrity": "sha512-gBXpgUm/3rp1lMZZrM/w7D8GKqshif0zAymAhbCyIt8KMe+0v9DQ7cdYLR4FHH/cKpdTXb+A/tKKU3eolfsI+g==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/dcastil"
      }
    },
    "node_modules/tailwindcss": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-4.1.11.tgz",
      "integrity": "sha512-2E9TBm6MDD/xKYe+dvJZAmg3yxIEDNRc0jwlNyDg/4Fil2QcSLjFKGVff0lAf1jjeaArlG/M75Ey/EYr/OJtBA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/tapable": {
      "version": "2.2.2",
      "resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.2.tgz",
      "integrity": "sha512-Re10+NauLTMCudc7T5WLFLAwDhQ0JWdrMK+9B2M8zR5hRExKmsRDCBA7/aV/pNJFltmBFO5BAMlQFi/vq3nKOg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/tar": {
      "version": "7.4.3",
      "resolved": "https://registry.npmjs.org/tar/-/tar-7.4.3.tgz",
      "integrity": "sha512-5S7Va8hKfV7W5U6g3aYxXmlPoZVAwUMy9AOKyF2fVuZa2UD3qZjg578OrLRt8PcNN1PleVaL/5/yYATNL0ICUw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@isaacs/fs-minipass": "^4.0.0",
        "chownr": "^3.0.0",
        "minipass": "^7.1.2",
        "minizlib": "^3.0.1",
        "mkdirp": "^3.0.1",
        "yallist": "^5.0.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/tar/node_modules/yallist": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-5.0.0.tgz",
      "integrity": "sha512-YgvUTfwqyc7UXVMrB+SImsVYSmTS8X/tSrtdNZMImM+n7+QTriRXyXim0mBrTXNeqzVF0KWGgHPeiyViFFrNDw==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/tinyglobby": {
      "version": "0.2.14",
      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.14.tgz",
      "integrity": "sha512-tX5e7OM1HnYr2+a2C/4V0htOcSQcoSTH9KgJnVvNm5zm/cyEWKJ7j7YutsH9CxMdtOkkLFy2AHrMci9IM8IPZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fdir": "^6.4.4",
        "picomatch": "^4.0.2"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/SuperchupuDev"
      }
    },
    "node_modules/tinyglobby/node_modules/fdir": {
      "version": "6.4.6",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.6.tgz",
      "integrity": "sha512-hiFoqpyZcfNm1yc4u8oWCf9A2c4D3QjCrks3zmoVKVxpQRzmPNar1hUJcBG2RQHvEVGDN+Jm81ZheVLAQMK6+w==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/tinyglobby/node_modules/picomatch": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/ts-api-utils": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-2.1.0.tgz",
      "integrity": "sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18.12"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4"
      }
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "license": "0BSD"
    },
    "node_modules/tw-animate-css": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/tw-animate-css/-/tw-animate-css-1.3.5.tgz",
      "integrity": "sha512-t3u+0YNoloIhj1mMXs779P6MO9q3p3mvGn4k1n3nJPqJw/glZcuijG2qTSN4z4mgNRfW5ZC3aXJFLwDtiipZXA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/Wombosvideo"
      }
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/typescript": {
      "version": "5.8.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
      "integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/typescript-eslint": {
      "version": "8.37.0",
      "resolved": "https://registry.npmjs.org/typescript-eslint/-/typescript-eslint-8.37.0.tgz",
      "integrity": "sha512-TnbEjzkE9EmcO0Q2zM+GE8NQLItNAJpMmED1BdgoBMYNdqMhzlbqfdSwiRlAzEK2pA9UzVW0gzaaIzXWg2BjfA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/eslint-plugin": "8.37.0",
        "@typescript-eslint/parser": "8.37.0",
        "@typescript-eslint/typescript-estree": "8.37.0",
        "@typescript-eslint/utils": "8.37.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/use-callback-ref": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/use-callback-ref/-/use-callback-ref-1.3.3.tgz",
      "integrity": "sha512-jQL3lRnocaFtu3V00JToYz/4QkNWswxijDaCVNZRiRTO3HQDLsdu1ZtmIUvV4yPp+rvWm5j0y0TG/S61cuijTg==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/use-sidecar": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/use-sidecar/-/use-sidecar-1.1.3.tgz",
      "integrity": "sha512-Fedw0aZvkhynoPYlA5WXrMCAMm+nSWdZt6lzJQ7Ok8S6Q+VsHmHpRWndVRJ8Be0ZbkfPc5LRYH+5XrzXcEeLRQ==",
      "license": "MIT",
      "dependencies": {
        "detect-node-es": "^1.1.0",
        "tslib": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "@types/react": "*",
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/vite": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/vite/-/vite-7.0.4.tgz",
      "integrity": "sha512-SkaSguuS7nnmV7mfJ8l81JGBFV7Gvzp8IzgE8A8t23+AxuNX61Q5H1Tpz5efduSN7NHC8nQXD3sKQKZAu5mNEA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.25.0",
        "fdir": "^6.4.6",
        "picomatch": "^4.0.2",
        "postcss": "^8.5.6",
        "rollup": "^4.40.0",
        "tinyglobby": "^0.2.14"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^20.19.0 || >=22.12.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^20.19.0 || >=22.12.0",
        "jiti": ">=1.21.0",
        "less": "^4.0.0",
        "lightningcss": "^1.21.0",
        "sass": "^1.70.0",
        "sass-embedded": "^1.70.0",
        "stylus": ">=0.54.8",
        "sugarss": "^5.0.0",
        "terser": "^5.16.0",
        "tsx": "^4.8.1",
        "yaml": "^2.4.2"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "jiti": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        },
        "tsx": {
          "optional": true
        },
        "yaml": {
          "optional": true
        }
      }
    },
    "node_modules/vite/node_modules/fdir": {
      "version": "6.4.6",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.6.tgz",
      "integrity": "sha512-hiFoqpyZcfNm1yc4u8oWCf9A2c4D3QjCrks3zmoVKVxpQRzmPNar1hUJcBG2RQHvEVGDN+Jm81ZheVLAQMK6+w==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/vite/node_modules/picomatch": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yaml": {
      "version": "2.8.0",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.8.0.tgz",
      "integrity": "sha512-4lLa/EcQCB0cJkyts+FpIRx5G/llPxfP6VQU5KByHEhLxY3IJCH0f0Hy1MHI8sClTvsIb8qwRJ6R/ZdlDJ/leQ==",
      "dev": true,
      "license": "ISC",
      "optional": true,
      "peer": true,
      "bin": {
        "yaml": "bin.mjs"
      },
      "engines": {
        "node": ">= 14.6"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}



client/package.json
===================

{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-navigation-menu": "^1.2.13",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tabs": "^1.1.12",
    "@tanstack/react-query": "^5.83.0",
    "@types/react-router-dom": "^5.3.3",
    "axios": "^1.10.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.525.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.6.3",
    "tailwind-merge": "^3.3.1",
    "tw-animate-css": "^1.3.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.30.1",
    "@tailwindcss/postcss": "^4.1.11",
    "@tailwindcss/vite": "^4.1.11",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.6.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.30.1",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.11",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.35.1",
    "vite": "^7.0.4"
  }
}



client/README.md
================

# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```



client/tsconfig.app.json
========================

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Path Aliases */
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    },

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}



client/tsconfig.json
====================

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}



client/tsconfig.node.json
=========================

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}



client/vite.config.ts
=====================

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [
    tailwindcss(),
    react()
  ],
  resolve: {
    alias: {
      '@': '/src',
    },
  },
})



client/@/components/ui/separator.tsx
====================================

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }



client/src/App.tsx
==================

import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import MainLayout from './components/Layout/MainLayout';
import Monitor from './pages/Monitor';
import Config from './pages/Config';

const queryClient = new QueryClient();

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <Router>
        <MainLayout>
          <Routes>
            <Route path="/" element={<Monitor />} />
            <Route path="/config" element={<Config />} />
          </Routes>
        </MainLayout>
      </Router>
    </QueryClientProvider>
  )
}

export default App



client/src/main.tsx
===================

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './styles/index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)



client/src/vite-env.d.ts
========================

/// <reference types="vite/client" />



client/src/components/Layout/MainLayout.tsx
===========================================

import { useState } from 'react';
import type { ReactNode } from 'react';
import Navbar from './Navbar';
import Sidebar from './Sidebar';

const drawerWidth = 240;

interface MainLayoutProps {
  children: ReactNode;
}

export default function MainLayout({ children }: MainLayoutProps) {
  const [mode, setMode] = useState<'light' | 'dark'>('light');
  const [sidebarOpen, setSidebarOpen] = useState(false);

  const handleDrawerToggle = () => {
    setSidebarOpen(!sidebarOpen);
  };

  const toggleColorMode = () => {
    setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));
  };

  return (
    <div className={`min-h-screen bg-gray-50 ${mode === 'dark' ? 'dark' : ''}`}>
      {/* Navbar fijo en la parte superior */}
      <Navbar
        open={sidebarOpen}
        drawerWidth={drawerWidth}
        onDrawerToggle={handleDrawerToggle}
        onThemeToggle={toggleColorMode}
        mode={mode}
      />

      {/* Sidebar */}
      <Sidebar
        open={sidebarOpen}
        drawerWidth={drawerWidth}
        onDrawerToggle={handleDrawerToggle}
      />

      {/* Contenido principal con margen apropiado */}
      <main className="pt-16 md:ml-60 transition-all duration-300 min-h-screen">
        <div className="p-6">
          {children}
        </div>
      </main>
    </div>
  );
}



client/src/components/Layout/Navbar.tsx
=======================================

import { Menu, Sun, Moon } from "lucide-react"
import { Button } from "@/components/ui/button"

interface NavbarProps {
  open: boolean;
  drawerWidth: number;
  onDrawerToggle: () => void;
  onThemeToggle?: () => void;
  mode?: 'light' | 'dark';
}

export default function Navbar({
  onDrawerToggle,
  onThemeToggle,
  mode = 'light',
}: NavbarProps) {
  return (
    <nav className="fixed top-0 left-0 md:left-60 right-0 z-40 bg-white border-b border-gray-200 h-16">
      <div className="container flex justify-between h-16 items-center px-4">
        <div>
          <Button
            variant="ghost"
            className="md:hidden"
            onClick={onDrawerToggle}
          >
            <Menu className="h-5 w-5" />
          </Button>
        </div>

        <div className="flex-1 text-center md:text-left">
          <h1 className="text-lg font-semibold text-gray-800">DevPipe Monitor</h1>
        </div>

        <div>
          {onThemeToggle && (
            <Button
              variant="ghost"
              className="w-9 px-0"
              onClick={onThemeToggle}
            >
              {mode === 'dark' ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
            </Button>
          )}
        </div>
      </div>
    </nav>
  );
}



client/src/components/Layout/Sidebar.tsx
========================================

import { useNavigate, useLocation } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { MonitorIcon, SettingsIcon } from 'lucide-react';

interface SidebarProps {
  open: boolean;
  drawerWidth: number;
  onDrawerToggle: () => void;
}

export default function Sidebar({
  open,
  drawerWidth,
  onDrawerToggle,
}: SidebarProps) {
  const navigate = useNavigate();
  const location = useLocation();

  const menuItems = [
    { text: 'Monitor', icon: MonitorIcon, path: '/' },
    { text: 'Configuraci√≥n', icon: SettingsIcon, path: '/config' },
  ];

  const sidebarContent = (
    <div className="p-4 space-y-2">
      <div className="mb-6">
        <h2 className="text-lg font-semibold text-gray-800">DevPipe</h2>
        <p className="text-sm text-gray-600">Monitor de Logs</p>
      </div>

      <nav className="space-y-1">
        {menuItems.map((item) => {
          const Icon = item.icon;
          const isActive = location.pathname === item.path;

          return (
            <Button
              key={item.text}
              variant={isActive ? "default" : "ghost"}
              className="w-full justify-start"
              onClick={() => {
                navigate(item.path);
                onDrawerToggle();
              }}
            >
              <Icon className="h-4 w-4 mr-2" />
              {item.text}
            </Button>
          );
        })}
      </nav>
    </div>
  );

  return (
    <>
      {/* Mobile sidebar overlay */}
      {open && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden"
          onClick={onDrawerToggle}
        />
      )}

      {/* Mobile sidebar */}
      <div className={`
        fixed top-0 left-0 h-full bg-white z-50 transform transition-transform duration-300 ease-in-out md:hidden
        ${open ? 'translate-x-0' : '-translate-x-full'}
      `} style={{ width: drawerWidth }}>
        <Card className="h-full rounded-none border-r">
          <CardContent className="p-0">
            {sidebarContent}
          </CardContent>
        </Card>
      </div>

      {/* Desktop sidebar - fijo en la izquierda */}
      <div
        className="hidden md:block fixed top-0 left-0 h-full z-30 bg-white border-r border-gray-200"
        style={{ width: drawerWidth }}
      >
        <div className="h-full overflow-y-auto">
          {sidebarContent}
        </div>
      </div>
    </>
  );
}



client/src/components/ui/button.tsx
===================================

import { cva, type VariantProps } from "class-variance-authority"
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 dark:ring-offset-slate-950 dark:focus-visible:ring-slate-300",
  {
    variants: {
      variant: {
        default: "bg-slate-900 text-slate-50 hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90",
        destructive:
          "bg-red-500 text-slate-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-slate-50 dark:hover:bg-red-900/90",
        outline:
          "border border-slate-200 bg-white hover:bg-slate-100 hover:text-slate-900 dark:border-slate-800 dark:bg-slate-950 dark:hover:bg-slate-800 dark:hover:text-slate-50",
        secondary:
          "bg-slate-100 text-slate-900 hover:bg-slate-100/80 dark:bg-slate-800 dark:text-slate-50 dark:hover:bg-slate-800/80",
        ghost: "hover:bg-slate-100 hover:text-slate-900 dark:hover:bg-slate-800 dark:hover:text-slate-50",
        link: "text-slate-900 underline-offset-4 hover:underline dark:text-slate-50",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

export function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: ButtonProps) {
  const Comp = asChild ? Slot : "button"
  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}



client/src/components/ui/card.tsx
=================================

import * as React from "react"
import { cn } from "@/lib/utils"

const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      data-slot="card"
      className={cn(
        "rounded-lg border bg-card text-card-foreground shadow-sm",
        className
      )}
      {...props}
    />
  )
)
Card.displayName = "Card"

const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      data-slot="card-header"
      className={cn("flex flex-col space-y-1.5 p-6", className)}
      {...props}
    />
  )
)
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
  ({ className, ...props }, ref) => (
    <h3
      ref={ref}
      data-slot="card-title"
      className={cn(
        "text-2xl font-semibold leading-none tracking-tight",
        className
      )}
      {...props}
    />
  )
)
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => (
    <p
      ref={ref}
      data-slot="card-description"
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
)
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} data-slot="card-content" className={cn("p-6 pt-0", className)} {...props} />
  )
)
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      data-slot="card-footer"
      className={cn("flex items-center p-6 pt-0", className)}
      {...props}
    />
  )
)
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



client/src/components/ui/dialog.tsx
===================================

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"
import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogClose = DialogPrimitive.Close

const DialogPortal = DialogPrimitive.Portal

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    data-slot="dialog-overlay"
    className={cn(
      "fixed inset-0 z-50 bg-black/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      data-slot="dialog-content"
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    data-slot="dialog-header"
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    data-slot="dialog-footer"
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    data-slot="dialog-title"
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    data-slot="dialog-description"
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}



client/src/components/ui/dropdown-menu.tsx
==========================================

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"
import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}



client/src/components/ui/input.tsx
==================================

import * as React from "react"
import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }



client/src/components/ui/label.tsx
==================================

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cn } from "@/lib/utils"

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(
      "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
      className
    )}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



client/src/components/ui/navigation-menu.tsx
============================================

import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-white shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(
      "group inline-flex h-10 w-max items-center justify-center rounded-md bg-white px-4 py-2 text-sm font-medium transition-colors hover:bg-slate-100 hover:text-slate-900 focus:bg-slate-100 focus:text-slate-900 focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-slate-100/50 data-[state=open]:bg-slate-100/50 dark:bg-slate-950 dark:hover:bg-slate-800 dark:hover:text-slate-50 dark:focus:bg-slate-800 dark:focus:text-slate-50 dark:data-[active]:bg-slate-800/50 dark:data-[state=open]:bg-slate-800/50",
      className
    )}
    {...props}
  >
    {children}
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

export {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
  NavigationMenuViewport,
}



client/src/components/ui/separator.tsx
======================================

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"
import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(({ className, orientation = "horizontal", decorative = true, ...props }, ref) => (
  <SeparatorPrimitive.Root
    ref={ref}
    data-slot="separator"
    decorative={decorative}
    orientation={orientation}
    className={cn(
      "shrink-0 bg-border",
      orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
      className
    )}
    {...props}
  />
))
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }



client/src/lib/api.ts
=====================

import axios from 'axios';

// Funci√≥n para obtener la URL del servidor (similar a devpipe.js)
function getServerUrl(): string {
  const customPort = localStorage.getItem('devpipe_port');
  const hostname = window.location.hostname || 'localhost';

  if (customPort) {
    return `http://${hostname}:${customPort}`;
  }

  return `http://${hostname}:7845`;
}

const API_URL = getServerUrl();

export const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 5000,
});

// Interfaces que coinciden con el servidor real
interface ServerResponse<T = any> {
  status: 'success' | 'error' | 'monitoring_disabled' | 'filtered_out';
  message?: string;
  data?: T;
}

interface ConfigData {
  maxFileSize: number;    // KB
  maxLogs: number;
  urlFilters: string[];
  port: number;
  logDir: string;
  monitoring: {
    enabled: boolean;
    intervalMs: number;
  };
  fileInfo?: {
    path: string;
    size: number;
    lastModified: string;
  };
  isActive?: boolean;
}

interface LogEntry {
  level: string;
  message: string;
  url?: string;
  timestamp: string;
  user_agent?: string;
  source?: string;
}

// API para configuraci√≥n
export const configApi = {
  async getConfig(): Promise<ServerResponse<ConfigData>> {
    try {
      const response = await api.get<ServerResponse<ConfigData>>('/config');
      return response.data;
    } catch (error) {
      console.error('Error getting config:', error);
      throw error;
    }
  },

  async updateConfig(config: Partial<ConfigData>): Promise<ServerResponse> {
    try {
      const response = await api.post<ServerResponse>('/config', config);
      return response.data;
    } catch (error) {
      console.error('Error updating config:', error);
      throw error;
    }
  },
};

// API para logs
export const logsApi = {
  async getRecentLogs(limit: number = 10): Promise<ServerResponse<LogEntry[]>> {
    try {
      const response = await api.get<ServerResponse<LogEntry[]>>(`/logs?limit=${limit}`);
      return response.data;
    } catch (error) {
      console.error('Error getting logs:', error);
      throw error;
    }
  },

  async clearLogs(): Promise<ServerResponse> {
    try {
      const response = await api.post<ServerResponse>('/logs/clear');
      return response.data;
    } catch (error) {
      console.error('Error clearing logs:', error);
      throw error;
    }
  },

  async sendLog(logData: LogEntry): Promise<ServerResponse> {
    try {
      const response = await api.post<ServerResponse>('/log', logData);
      return response.data;
    } catch (error) {
      console.error('Error sending log:', error);
      throw error;
    }
  },
};

// API para monitoreo
export const monitoringApi = {
  async getStatus(): Promise<ServerResponse<{ isActive: boolean }>> {
    try {
      const response = await api.get<ServerResponse<{ isActive: boolean }>>('/monitoring/status');
      return response.data;
    } catch (error) {
      console.error('Error getting monitoring status:', error);
      throw error;
    }
  },

  async startMonitoring(): Promise<ServerResponse> {
    try {
      const response = await api.post<ServerResponse>('/monitoring/start');
      return response.data;
    } catch (error) {
      console.error('Error starting monitoring:', error);
      throw error;
    }
  },

  async stopMonitoring(): Promise<ServerResponse> {
    try {
      const response = await api.post<ServerResponse>('/monitoring/stop');
      return response.data;
    } catch (error) {
      console.error('Error stopping monitoring:', error);
      throw error;
    }
  },
};

// Funci√≥n para actualizar la URL base si cambia el puerto
export const updateApiBaseUrl = () => {
  api.defaults.baseURL = getServerUrl();
};

// Interceptor para manejar errores comunes
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.code === 'ECONNREFUSED' || error.code === 'ERR_NETWORK') {
      console.error('DevPipe server is not running. Please start the server with: python server/main.py');
    }
    return Promise.reject(error);
  }
);

// Exportar tipos para uso en componentes
export type { ConfigData, LogEntry, ServerResponse };



client/src/lib/hooks.ts
=======================

import { useEffect, useRef } from "react";

export function useInterval(callback: () => void, delay: number | null) {
  const savedCallback = useRef<() => void>(() => {});

  useEffect(() => {
    savedCallback.current = callback;
  }, [callback]);

  useEffect(() => {
    function tick() {
      savedCallback.current?.();
    }

    if (delay !== null) {
      const id = setInterval(tick, delay);
      return () => clearInterval(id);
    }
  }, [delay]);
}



client/src/lib/utils.ts
=======================

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}



client/src/pages/Config.tsx
===========================

import { useEffect, useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { configApi, monitoringApi } from '@/lib/api';
import { Separator } from '@/components/ui/separator';

interface ConfigFormData {
  maxFileSize: number;    // KB
  maxLogs: number;
  urlFilters: string;     // Como string para el input, se convertir√° a array
  port: number;
  logDir: string;
  customLogPath: string;  // Ruta personalizada seleccionada por el usuario
  monitoringEnabled: boolean;
  monitoringInterval: number;
}

export default function Config() {
  const [formData, setFormData] = useState<ConfigFormData>({
    maxFileSize: 50,          // KB
    maxLogs: 10,
    urlFilters: '',           // Como string, se convertir√° a array
    port: 7845,
    logDir: 'logs',
    customLogPath: '',        // Ruta personalizada vac√≠a por defecto
    monitoringEnabled: false,
    monitoringInterval: 1000
  });

  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState<{ type: 'success' | 'error', text: string } | null>(null);
  const [serverInfo, setServerInfo] = useState<{ isActive: boolean, fileInfo?: any } | null>(null);
  const [monitoringActive, setMonitoringActive] = useState(false);

  // Funci√≥n para manejar la selecci√≥n de directorio
  const handleDirectorySelect = async () => {
    try {
      // Usar la API de File System Access (moderna)
      if ('showDirectoryPicker' in window) {
        const dirHandle = await (window as any).showDirectoryPicker();
        setFormData(prev => ({ ...prev, customLogPath: dirHandle.name }));
        setMessage({ type: 'success', text: `Directorio seleccionado: ${dirHandle.name}` });
      } else {
        // Fallback para navegadores que no soportan File System Access API
        setMessage({ type: 'error', text: 'Tu navegador no soporta selecci√≥n de directorios. Usa el campo de texto.' });
      }
    } catch (error) {
      if ((error as any).name !== 'AbortError') {
        console.error('Error selecting directory:', error);
        setMessage({ type: 'error', text: 'Error al seleccionar directorio' });
      }
    }
  };

  // Funci√≥n para obtener el estado del monitoreo
  const checkMonitoringStatus = async () => {
    try {
      const statusResponse = await monitoringApi.getStatus();
      if (statusResponse.status === 'success' && statusResponse.data) {
        setMonitoringActive(statusResponse.data.isActive);
      }
    } catch (error) {
      console.error('Error getting monitoring status:', error);
    }
  };

  useEffect(() => {
    const loadConfig = async () => {
      try {
        setLoading(true);
        const response = await configApi.getConfig();

        if (response.status === 'success' && response.data) {
          const config = response.data;
          setFormData({
            maxFileSize: config.maxFileSize,
            maxLogs: config.maxLogs,
            urlFilters: config.urlFilters.join(', '), // Convertir array a string
            port: config.port,
            logDir: config.logDir,
            customLogPath: '',        // Mantener vac√≠o, se llenar√° cuando el usuario seleccione
            monitoringEnabled: config.monitoring.enabled,
            monitoringInterval: config.monitoring.intervalMs
          });

          setServerInfo({
            isActive: config.isActive || false,
            fileInfo: config.fileInfo
          });

          // Actualizar estado del monitoreo
          setMonitoringActive(config.isActive || false);
        }
      } catch (error) {
        console.error('Error al cargar la configuraci√≥n:', error);
        setMessage({ type: 'error', text: 'Error al cargar la configuraci√≥n del servidor' });
      } finally {
        setLoading(false);
      }
    };

    loadConfig();

    // Verificar estado del monitoreo
    checkMonitoringStatus();

    // Configurar un intervalo para verificar el estado del monitoreo peri√≥dicamente
    const intervalId = setInterval(checkMonitoringStatus, 5000);

    // Limpiar intervalo al desmontar
    return () => clearInterval(intervalId);
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      setLoading(true);
      setMessage(null);

      // Convertir formData al formato esperado por el servidor
      const configToSend = {
        maxFileSize: formData.maxFileSize,
        maxLogs: formData.maxLogs,
        urlFilters: formData.urlFilters.split(',').map(f => f.trim()).filter(f => f.length > 0),
        port: formData.port,
        logDir: formData.customLogPath || formData.logDir, // Usar directorio personalizado si est√° disponible
        monitoring: {
          enabled: formData.monitoringEnabled,
          intervalMs: formData.monitoringInterval
        }
      };

      const response = await configApi.updateConfig(configToSend);

      if (response.status === 'success') {
        setMessage({ type: 'success', text: 'Configuraci√≥n guardada correctamente' });
      } else {
        setMessage({ type: 'error', text: response.message || 'Error al guardar la configuraci√≥n' });
      }
    } catch (error) {
      console.error('Error al guardar la configuraci√≥n:', error);
      setMessage({ type: 'error', text: 'Error de conexi√≥n con el servidor' });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* Estado del servidor */}
      {serverInfo && (
        <Card>
          <CardHeader>
            <CardTitle>Estado del Servidor</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center space-x-2">
              <div className={`w-3 h-3 rounded-full ${serverInfo.isActive ? 'bg-green-500' : 'bg-red-500'}`}></div>
              <span>{serverInfo.isActive ? 'Monitoreo Activo' : 'Monitoreo Inactivo'}</span>
            </div>
            {serverInfo.fileInfo && (
              <div className="mt-2 text-sm text-gray-600">
                <p>Archivo: {serverInfo.fileInfo.path}</p>
                <p>Tama√±o: {(serverInfo.fileInfo.size / 1024).toFixed(2)} KB</p>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Mensajes */}
      {message && (
        <Card className={message.type === 'error' ? 'border-red-500' : 'border-green-500'}>
          <CardContent className="pt-6">
            <p className={message.type === 'error' ? 'text-red-600' : 'text-green-600'}>
              {message.text}
            </p>
          </CardContent>
        </Card>
      )}

      {/* Estado del servicio */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>Estado del Servicio</span>
            <div className="flex items-center space-x-2">
              <div className={`w-3 h-3 rounded-full ${
                monitoringActive ? 'bg-green-500' : 'bg-red-500'
              }`}></div>
              <span className="text-sm text-gray-600">
                {monitoringActive ? 'Monitoreo Activo' : 'Monitoreo Detenido'}
              </span>
            </div>
          </CardTitle>
          <CardDescription>
            {monitoringActive
              ? "El servicio de monitoreo est√° activo. Algunas configuraciones no se pueden cambiar."
              : "El servicio de monitoreo est√° detenido. Puedes cambiar todas las configuraciones."}
          </CardDescription>
        </CardHeader>
      </Card>

      {/* Formulario de configuraci√≥n */}
      <form onSubmit={handleSubmit}>
        <Card>
          <CardHeader>
            <CardTitle>Configuraci√≥n del Sistema</CardTitle>
            <CardDescription>
              Ajusta la configuraci√≥n del monitor de logs DevPipe
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Configuraci√≥n de archivos */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium">Archivos y Logs</h3>

              <div className="space-y-2">
                <Label htmlFor="logDir">Directorio de logs (por defecto)</Label>
                <Input
                  id="logDir"
                  value={formData.logDir}
                  onChange={(e) => setFormData(prev => ({ ...prev, logDir: e.target.value }))}
                  placeholder="logs"
                />
                <p className="text-sm text-gray-500">
                  Directorio por defecto donde se guardar√°n los logs
                </p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="customLogPath">Directorio personalizado para esta sesi√≥n</Label>
                <div className="flex space-x-2">
                  <Input
                    id="customLogPath"
                    value={formData.customLogPath}
                    onChange={(e) => setFormData(prev => ({ ...prev, customLogPath: e.target.value }))}
                    placeholder="Selecciona un directorio o escribe la ruta..."
                    className="flex-1"
                    disabled={monitoringActive}
                  />
                  <Button
                    type="button"
                    variant="outline"
                    onClick={handleDirectorySelect}
                    disabled={monitoringActive}
                  >
                    Examinar
                  </Button>
                </div>
                <p className="text-sm text-gray-500">
                  {monitoringActive
                    ? "Debes detener el servicio de monitoreo para cambiar el directorio de logs"
                    : "Selecciona un directorio espec√≠fico donde guardar los logs de esta sesi√≥n"}
                </p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="maxFileSize">Tama√±o m√°ximo del archivo (KB)</Label>
                <Input
                  id="maxFileSize"
                  type="number"
                  value={formData.maxFileSize}
                  onChange={(e) => setFormData(prev => ({ ...prev, maxFileSize: parseInt(e.target.value) || 0 }))}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="maxLogs">N√∫mero m√°ximo de logs a mostrar</Label>
                <Input
                  id="maxLogs"
                  type="number"
                  value={formData.maxLogs}
                  onChange={(e) => setFormData(prev => ({ ...prev, maxLogs: parseInt(e.target.value) || 0 }))}
                />
              </div>
            </div>

            <Separator />

            {/* Configuraci√≥n de red */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium">Red y Puerto</h3>

              <div className="space-y-2">
                <Label htmlFor="port">Puerto del servidor</Label>
                <Input
                  id="port"
                  type="number"
                  value={formData.port}
                  onChange={(e) => setFormData(prev => ({ ...prev, port: parseInt(e.target.value) || 7845 }))}
                />
                <p className="text-sm text-gray-500">
                  Puerto donde el servidor DevPipe escuchar√° las conexiones
                </p>
              </div>
            </div>

            <Separator />

            {/* Configuraci√≥n de filtros */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium">Filtros</h3>

              <div className="space-y-2">
                <Label htmlFor="urlFilters">Filtros de URL (separados por comas)</Label>
                <Input
                  id="urlFilters"
                  value={formData.urlFilters}
                  onChange={(e) => setFormData(prev => ({ ...prev, urlFilters: e.target.value }))}
                  placeholder="localhost, 127.0.0.1, example.com"
                />
                <p className="text-sm text-gray-500">
                  URLs que ser√°n filtradas del monitoreo
                </p>
              </div>
            </div>

            <Separator />

            {/* Configuraci√≥n de monitoreo */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium">Monitoreo</h3>

              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="monitoringEnabled"
                  checked={formData.monitoringEnabled}
                  onChange={(e) => setFormData(prev => ({ ...prev, monitoringEnabled: e.target.checked }))}
                  className="rounded"
                />
                <Label htmlFor="monitoringEnabled">Habilitar monitoreo autom√°tico</Label>
              </div>

              <div className="space-y-2">
                <Label htmlFor="monitoringInterval">Intervalo de monitoreo (ms)</Label>
                <Input
                  id="monitoringInterval"
                  type="number"
                  value={formData.monitoringInterval}
                  onChange={(e) => setFormData(prev => ({ ...prev, monitoringInterval: parseInt(e.target.value) || 1000 }))}
                />
              </div>
            </div>

            <div className="pt-4">
              <Button type="submit" disabled={loading}>
                {loading ? 'Guardando...' : 'Guardar Configuraci√≥n'}
              </Button>
            </div>
          </CardContent>
        </Card>
      </form>
    </div>
  );
}



client/src/pages/Monitor.tsx
============================

import { useEffect, useState } from "react"
import { useInterval } from "@/lib/hooks"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Separator } from "@/components/ui/separator"
import { logsApi, monitoringApi, type LogEntry } from "@/lib/api"
import { PlayIcon, PauseIcon, SquareIcon, TrashIcon, RefreshCwIcon } from "lucide-react"

type MonitoringState = "stopped" | "running" | "paused";

export default function Monitor() {
  const [logs, setLogs] = useState<LogEntry[]>([]);
  const [filter, setFilter] = useState("");
  const [monitoringState, setMonitoringState] = useState<MonitoringState>("stopped");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [logLimit, setLogLimit] = useState(25);

  const fetchLogs = async () => {
    try {
      setError(null);
      const response = await logsApi.getRecentLogs(logLimit);

      if (response.status === 'success' && response.data) {
        setLogs(response.data);
      } else if (response.status === 'monitoring_disabled') {
        setError('El monitoreo est√° desactivado en el servidor');
      } else {
        setError(response.message || 'Error al obtener logs');
      }
    } catch (error) {
      console.error("Error fetching logs:", error);
      setError('Error de conexi√≥n con el servidor');
    }
  };

  const toggleMonitoring = async (newState: MonitoringState) => {
    try {
      setLoading(true);
      setError(null);

      switch (newState) {
        case "running":
          const startResponse = await monitoringApi.startMonitoring();
          if (startResponse.status === 'success') {
            setMonitoringState(newState);
          } else {
            setError(startResponse.message || 'Error al iniciar monitoreo');
          }
          break;
        case "stopped":
          const stopResponse = await monitoringApi.stopMonitoring();
          if (stopResponse.status === 'success') {
            setMonitoringState(newState);
          } else {
            setError(stopResponse.message || 'Error al detener monitoreo');
          }
          break;
        case "paused":
          // Para pausar, simplemente cambiamos el estado local
          setMonitoringState(newState);
          break;
      }
    } catch (error) {
      console.error("Error toggling monitoring:", error);
      setError('Error de conexi√≥n con el servidor');
    } finally {
      setLoading(false);
    }
  };

  const clearLogs = async () => {
    try {
      setLoading(true);
      const response = await logsApi.clearLogs();

      if (response.status === 'success') {
        setLogs([]);
      } else {
        setError(response.message || 'Error al limpiar logs');
      }
    } catch (error) {
      console.error("Error clearing logs:", error);
      setError('Error de conexi√≥n con el servidor');
    } finally {
      setLoading(false);
    }
  };

  useInterval(fetchLogs, monitoringState === "running" ? 1000 : null);

  // Obtener estado inicial del monitoreo
  useEffect(() => {
    const getInitialStatus = async () => {
      try {
        const statusResponse = await monitoringApi.getStatus();
        if (statusResponse.status === 'success' && statusResponse.data) {
          setMonitoringState(statusResponse.data.isActive ? 'running' : 'stopped');
        }
      } catch (error) {
        console.error('Error getting initial monitoring status:', error);
      }
    };

    getInitialStatus();
    fetchLogs();
  }, [logLimit]);

  const filteredLogs = filter
    ? logs.filter(log =>
        log.message.toLowerCase().includes(filter.toLowerCase()) ||
        log.level.toLowerCase().includes(filter.toLowerCase()) ||
        (log.url && log.url.toLowerCase().includes(filter.toLowerCase())) ||
        (log.source && log.source.toLowerCase().includes(filter.toLowerCase()))
      )
    : logs;

  const formatTimestamp = (timestamp: string) => {
    try {
      return new Date(timestamp).toLocaleTimeString();
    } catch {
      return timestamp;
    }
  };

  const getLevelColor = (level: string) => {
    switch (level.toLowerCase()) {
      case 'error': return 'text-red-600';
      case 'warn': return 'text-yellow-600';
      case 'info': return 'text-blue-600';
      case 'external': return 'text-purple-600';
      default: return 'text-gray-600';
    }
  };

  return (
    <div className="space-y-6">
      {/* Estado y controles */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>Monitor de Logs DevPipe</span>
            <div className="flex items-center space-x-2">
              <div className={`w-3 h-3 rounded-full ${
                monitoringState === 'running' ? 'bg-green-500' :
                monitoringState === 'paused' ? 'bg-yellow-500' : 'bg-red-500'
              }`}></div>
              <span className="text-sm text-gray-600 capitalize">{monitoringState}</span>
            </div>
          </CardTitle>
          <CardDescription>
            Monitor y analiza logs en tiempo real desde el servidor DevPipe
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {/* Controles de monitoreo */}
            <div className="flex items-center gap-2">
              <Button
                variant={monitoringState === "running" ? "secondary" : "default"}
                onClick={() => toggleMonitoring("running")}
                disabled={loading}
              >
                <PlayIcon className="h-4 w-4 mr-2" />
                Iniciar
              </Button>
              <Button
                variant={monitoringState === "paused" ? "secondary" : "default"}
                onClick={() => toggleMonitoring("paused")}
                disabled={loading}
              >
                <PauseIcon className="h-4 w-4 mr-2" />
                Pausar
              </Button>
              <Button
                variant={monitoringState === "stopped" ? "secondary" : "default"}
                onClick={() => toggleMonitoring("stopped")}
                disabled={loading}
              >
                <SquareIcon className="h-4 w-4 mr-2" />
                Detener
              </Button>

              <Separator orientation="vertical" className="h-8" />

              <Button
                variant="outline"
                onClick={fetchLogs}
                disabled={loading}
              >
                <RefreshCwIcon className="h-4 w-4 mr-2" />
                Actualizar
              </Button>

              <Button
                variant="outline"
                onClick={clearLogs}
                disabled={loading}
              >
                <TrashIcon className="h-4 w-4 mr-2" />
                Limpiar
              </Button>
            </div>

            {/* Configuraci√≥n */}
            <div className="flex items-center gap-4">
              <div className="flex items-center space-x-2">
                <Label htmlFor="logLimit">L√≠mite:</Label>
                <Input
                  id="logLimit"
                  type="number"
                  value={logLimit}
                  onChange={(e) => setLogLimit(parseInt(e.target.value) || 25)}
                  className="w-20"
                  min="1"
                  max="100"
                />
              </div>

              <div className="flex-1">
                <Label htmlFor="filter">Filtrar logs:</Label>
                <Input
                  id="filter"
                  placeholder="Buscar en mensaje, nivel, URL o fuente..."
                  value={filter}
                  onChange={(e) => setFilter(e.target.value)}
                />
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Mensajes de error */}
      {error && (
        <Card className="border-red-500">
          <CardContent className="pt-6">
            <p className="text-red-600">{error}</p>
          </CardContent>
        </Card>
      )}

      {/* Lista de logs */}
      <Card>
        <CardHeader>
          <CardTitle>
            Logs Recientes ({filteredLogs.length} de {logs.length})
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="h-[500px] overflow-auto rounded-md border bg-gray-50 p-4">
            {filteredLogs.length === 0 ? (
              <div className="flex items-center justify-center h-full text-gray-500">
                {logs.length === 0 ? 'No hay logs disponibles' : 'No hay logs que coincidan con el filtro'}
              </div>
            ) : (
              <div className="space-y-2">
                {filteredLogs.map((log, index) => (
                  <div key={index} className="border-b border-gray-200 pb-2 last:border-b-0">
                    <div className="flex items-start justify-between text-xs text-gray-500 mb-1">
                      <div className="flex items-center space-x-2">
                        <span className={`font-medium ${getLevelColor(log.level)}`}>
                          [{log.level.toUpperCase()}]
                        </span>
                        {log.source && (
                          <span className="bg-gray-200 px-1 rounded">
                            {log.source}
                          </span>
                        )}
                      </div>
                      <span>{formatTimestamp(log.timestamp)}</span>
                    </div>
                    <div className="font-mono text-sm text-gray-800 whitespace-pre-wrap">
                      {log.message}
                    </div>
                    {log.url && (
                      <div className="text-xs text-blue-600 mt-1">
                        {log.url}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}



client/src/styles/index.css
===========================

@import "tailwindcss";

/* Estilos base para la aplicaci√≥n */
:root {
  --primary-50: #f0f9ff;
  --primary-100: #e0f2fe;
  --primary-200: #bae6fd;
  --primary-300: #7dd3fc;
  --primary-400: #38bdf8;
  --primary-500: #0ea5e9;
  --primary-600: #0284c7;
  --primary-700: #0369a1;
  --primary-800: #075985;
  --primary-900: #0c4a6e;
}

/* Estilos globales */
body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Estilos para componentes personalizados */
.devpipe-card {
  @apply bg-white rounded-lg border border-gray-200 shadow-sm;
}

.devpipe-button-primary {
  @apply bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors duration-200;
}

.devpipe-button-secondary {
  @apply bg-white hover:bg-gray-50 text-gray-700 font-medium py-2 px-4 rounded-md border border-gray-300 transition-colors duration-200;
}



config/config.json
==================

{
  "maxFileSize": 120,
  "maxLogs": 25,
  "urlFilters": [],
  "port": 7845,
  "logDir": "ewm-modal-cta",
  "monitoring": {
    "enabled": false,
    "intervalMs": 1000
  }
}


scripts/devpipe.sh
==================

#!/bin/bash

# Verificar si el servidor est√° corriendo
is_server_running() {
    if [ -f ".pid" ]; then
        pid=$(cat .pid)
        if ps -p $pid > /dev/null; then
            return 0
        fi
    fi
    return 1
}

# Iniciar el servidor
start_server() {
    if is_server_running; then
        echo "El servidor ya est√° corriendo"
        return 1
    fi

    echo "Iniciando servidor DevPipe..."
    source venv/bin/activate
    python server/main.py &
    echo $! > .pid
    echo "Servidor iniciado en http://localhost:7845"
}

# Detener el servidor
stop_server() {
    if [ -f ".pid" ]; then
        pid=$(cat .pid)
        if ps -p $pid > /dev/null; then
            kill $pid
            rm .pid
            echo "Servidor detenido"
        else
            echo "El servidor no est√° corriendo"
            rm .pid
        fi
    else
        echo "No se encontr√≥ archivo PID"
    fi
}

# Limpiar logs
clean_logs() {
    echo "Limpiando logs..."
    # TODO: Implementar limpieza de logs
}

# Mostrar estado
show_status() {
    if is_server_running; then
        echo "DevPipe est√° corriendo"
        pid=$(cat .pid)
        echo "PID: $pid"
    else
        echo "DevPipe no est√° corriendo"
    fi
}

# Comando principal
case "$1" in
    start)
        start_server
        ;;
    stop)
        stop_server
        ;;
    clean)
        clean_logs
        ;;
    status)
        show_status
        ;;
    *)
        echo "Uso: devpipe {start|stop|clean|status}"
        exit 1
esac



server/.gitignore
=================

# Python
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Entorno virtual
venv/
ENV/

# IDE
.idea/
.vscode/
*.swp
*.swo

# Logs
logs/
*.log

# Config
config/



server/main.py
==============

from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import signal
import socket
import subprocess
import sys
from datetime import datetime

from core.log_manager import LogManager
from core.config_manager import ConfigManager
from core.file_watcher import FileWatcher

def kill_process_on_port(port):
    """
    Mata cualquier proceso que est√© usando el puerto especificado.

    Args:
        port (int): Puerto a liberar

    Returns:
        bool: True si se liber√≥ el puerto, False si no hab√≠a procesos
    """
    try:
        # Buscar procesos usando el puerto
        result = subprocess.run(['lsof', '-ti', f':{port}'],
                              capture_output=True, text=True, check=False)

        if result.returncode == 0 and result.stdout.strip():
            pids = result.stdout.strip().split('\n')
            print(f"üîç Encontrados procesos usando el puerto {port}: {', '.join(pids)}")

            for pid in pids:
                if pid.strip():
                    try:
                        print(f"üî™ Terminando proceso {pid}...")
                        os.kill(int(pid), signal.SIGTERM)
                        print(f"‚úÖ Proceso {pid} terminado")
                    except ProcessLookupError:
                        print(f"‚ö†Ô∏è  Proceso {pid} ya no existe")
                    except PermissionError:
                        print(f"‚ùå Sin permisos para terminar proceso {pid}")
                        # Intentar con SIGKILL como √∫ltimo recurso
                        try:
                            os.kill(int(pid), signal.SIGKILL)
                            print(f"üî• Proceso {pid} forzado a terminar")
                        except:
                            print(f"‚ùå No se pudo terminar proceso {pid}")
            return True
        else:
            print(f"‚úÖ Puerto {port} est√° libre")
            return False

    except FileNotFoundError:
        print("‚ö†Ô∏è  Comando 'lsof' no encontrado, intentando m√©todo alternativo...")
        # M√©todo alternativo usando netstat
        try:
            result = subprocess.run(['netstat', '-tlnp'],
                                  capture_output=True, text=True, check=False)
            if result.returncode == 0:
                lines = result.stdout.split('\n')
                for line in lines:
                    if f':{port} ' in line and 'LISTEN' in line:
                        # Extraer PID de la l√≠nea de netstat
                        parts = line.split()
                        if len(parts) > 6 and '/' in parts[6]:
                            pid = parts[6].split('/')[0]
                            try:
                                print(f"üî™ Terminando proceso {pid} (m√©todo alternativo)...")
                                os.kill(int(pid), signal.SIGTERM)
                                print(f"‚úÖ Proceso {pid} terminado")
                                return True
                            except:
                                print(f"‚ùå No se pudo terminar proceso {pid}")
        except:
            pass
        return False
    except Exception as e:
        print(f"‚ùå Error al liberar puerto {port}: {e}")
        return False

def is_port_available(port):
    """
    Verifica si un puerto est√° disponible.

    Args:
        port (int): Puerto a verificar

    Returns:
        bool: True si est√° disponible, False si est√° ocupado
    """
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('localhost', port))
            return True
    except OSError:
        return False

def ensure_port_available(port):
    """
    Asegura que el puerto est√© disponible, liber√°ndolo si es necesario.
    Intenta m√∫ltiples veces y m√©todos para liberar el puerto.

    Args:
        port (int): Puerto a asegurar

    Returns:
        bool: True si el puerto est√° disponible, False si no se pudo liberar
    """
    max_attempts = 3

    for attempt in range(max_attempts):
        if is_port_available(port):
            print(f"‚úÖ Puerto {port} est√° disponible")
            return True

        print(f"‚ö†Ô∏è  Puerto {port} est√° ocupado (intento {attempt + 1}/{max_attempts}), intentando liberar...")

        # Intentar liberar el puerto
        if kill_process_on_port(port):
            # Esperar un momento para que el puerto se libere
            import time
            time.sleep(2)  # Aumentar el tiempo de espera

            # Verificar nuevamente
            if is_port_available(port):
                print(f"‚úÖ Puerto {port} liberado exitosamente")
                return True

        # Si no se pudo liberar, esperar un poco m√°s antes del siguiente intento
        if attempt < max_attempts - 1:
            print(f"üîÑ Esperando antes del siguiente intento...")
            import time
            time.sleep(3)

    print(f"‚ùå No se pudo liberar el puerto {port} despu√©s de {max_attempts} intentos")
    return False

app = Flask(__name__)
CORS(app)  # Habilitar CORS para desarrollo

# Inicializar managers
config_manager = ConfigManager()
log_manager = LogManager(config_manager.get_config().get('logDir', 'logs'))
file_watcher = FileWatcher()

def on_external_log(file_path: str):
    """Callback para cuando hay cambios en un archivo externo"""
    if not file_watcher.is_active() or not log_manager.is_active():
        return
    
    new_lines = file_watcher.get_new_content(file_path)
    for line in new_lines:
        log_manager.write_log({  # type: ignore
            "level": "external",
            "message": line,
            "url": f"file://{file_path}",
            "timestamp": datetime.now().isoformat(),
            "user_agent": "file_watcher",
            "source": os.path.basename(file_path)
        })

@app.route('/log', methods=['POST'])
def log():
    try:
        log_data = request.json
        if not log_manager.is_active():
            return jsonify({
                "status": "monitoring_disabled",
                "message": "El monitoreo est√° desactivado"
            })

        # Validar que log_data no sea None
        if log_data is None:
            return jsonify({
                "status": "error",
                "message": "No se recibieron datos de log"
            }), 400

        if log_manager.write_log(log_data):  # type: ignore
            return jsonify({
                "status": "success",
                "message": "Log recibido correctamente"
            })
        else:
            return jsonify({
                "status": "filtered_out",
                "message": "Log filtrado por configuraci√≥n"
            })
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/logs', methods=['GET'])
def get_logs():
    try:
        limit = request.args.get('limit', default=10, type=int)
        logs = log_manager.get_recent_logs(limit)  # type: ignore
        return jsonify({
            "status": "success",
            "data": logs
        })
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/logs/clear', methods=['POST'])
def clear_logs():
    try:
        log_manager.clear_logs()
        return jsonify({
            "status": "success",
            "message": "Logs eliminados correctamente"
        })
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/monitoring/start', methods=['POST'])
def start_monitoring():
    try:
        log_manager.start()
        return jsonify({
            "status": "success",
            "message": "Monitoreo iniciado"
        })
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/monitoring/stop', methods=['POST'])
def stop_monitoring():
    try:
        log_manager.stop()
        return jsonify({
            "status": "success",
            "message": "Monitoreo detenido"
        })
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/monitoring/status', methods=['GET'])
def get_monitoring_status():
    """Obtener el estado actual del monitoreo"""
    try:
        is_active = log_manager.is_active()
        return jsonify({
            'status': 'success',
            'data': {
                'isActive': is_active
            }
        })
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'Error al obtener estado: {str(e)}'
        }), 500

@app.route('/config', methods=['GET'])
def get_config():
    try:
        config = config_manager.get_config()
        file_info = log_manager.get_log_file_info()  # type: ignore
        return jsonify({
            "status": "success",
            "data": {
                **config,
                "fileInfo": file_info,
                "isActive": log_manager.is_active()
            }
        })
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

@app.route('/config', methods=['POST'])
def update_config():
    try:
        new_config = request.json

        # Validar que new_config no sea None
        if new_config is None:
            return jsonify({
                "status": "error",
                "message": "No se recibieron datos de configuraci√≥n"
            }), 400

        # Verificar si se est√° intentando cambiar el directorio de logs
        if 'logDir' in new_config and new_config['logDir'] != config_manager.get_config().get('logDir'):
            # Intentar cambiar el directorio de logs
            if log_manager.is_active():
                return jsonify({
                    "status": "error",
                    "message": "No se puede cambiar el directorio de logs mientras el servicio est√° activo"
                }), 400

            # Cambiar el directorio de logs
            if not log_manager.set_log_directory(new_config['logDir']):
                return jsonify({
                    "status": "error",
                    "message": "No se pudo cambiar el directorio de logs"
                }), 500

        if config_manager.update_config(new_config):  # type: ignore
            # Actualizar configuraci√≥n del log manager
            log_manager.set_max_file_size(new_config.get('maxFileSize', 50))
            return jsonify({
                "status": "success",
                "message": "Configuraci√≥n actualizada"
            })
        else:
            return jsonify({
                "status": "error",
                "message": "Error actualizando configuraci√≥n"
            }), 500
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500

if __name__ == '__main__':
    # Obtener puerto de configuraci√≥n
    port = int(os.environ.get('PORT', config_manager.get_config().get('port', 7845)))

    print(f"üöÄ Iniciando DevPipe Server en puerto {port}...")

    # Asegurar que el puerto est√© disponible
    if not ensure_port_available(port):
        print(f"‚ùå No se pudo liberar el puerto {port}. Saliendo...")
        sys.exit(1)

    try:
        print(f"‚úÖ Servidor DevPipe iniciado en http://localhost:{port}")
        print("üìù Endpoints disponibles:")
        print(f"   ‚Ä¢ GET  /config - Obtener configuraci√≥n")
        print(f"   ‚Ä¢ POST /config - Actualizar configuraci√≥n")
        print(f"   ‚Ä¢ POST /log - Enviar log")
        print(f"   ‚Ä¢ GET  /logs - Obtener logs recientes")
        print(f"   ‚Ä¢ POST /logs/clear - Limpiar logs")
        print(f"   ‚Ä¢ POST /monitoring/start - Iniciar monitoreo")
        print(f"   ‚Ä¢ POST /monitoring/stop - Detener monitoreo")
        print("üîó Presiona Ctrl+C para detener el servidor")

        app.run(host='0.0.0.0', port=port, debug=False)

    except KeyboardInterrupt:
        print("\nüõë Servidor detenido por el usuario")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå Error al iniciar el servidor: {e}")
        sys.exit(1)



server/config/config.json
=========================

{
  "maxFileSize": 50,
  "maxLogs": 10,
  "urlFilters": [],
  "port": 7845,
  "logDir": "ewm-modal-cta",
  "monitoring": {
    "enabled": false,
    "intervalMs": 1000
  }
}


server/core/config_manager.py
=============================

import json
import os
from typing import Dict, List, Any

class ConfigManager:
    def __init__(self, config_file: str = "config/config.json"):
        """
        Inicializa el gestor de configuraci√≥n.
        
        Args:
            config_file: Ruta al archivo de configuraci√≥n
        """
        self.config_file = config_file
        self.config = self.load_default_config()
        self._ensure_config_dir()
        self.load_config()
    
    def _ensure_config_dir(self):
        """Asegura que existe el directorio de configuraci√≥n."""
        config_dir = os.path.dirname(self.config_file)
        if not os.path.exists(config_dir):
            os.makedirs(config_dir)
    
    def load_default_config(self) -> Dict[str, Any]:
        """
        Carga la configuraci√≥n por defecto.
        
        Returns:
            Dict: Configuraci√≥n por defecto
        """
        return {
            "maxFileSize": 50,  # KB
            "maxLogs": 10,
            "urlFilters": [],
            "port": 7845,
            "logDir": "logs",
            "monitoring": {
                "enabled": False,
                "intervalMs": 1000
            }
        }
    
    def load_config(self) -> None:
        """Carga la configuraci√≥n desde el archivo."""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, "r", encoding="utf-8") as f:
                    loaded_config = json.load(f)
                    # Actualizar solo las claves que existen en la configuraci√≥n por defecto
                    for key in self.config:
                        if key in loaded_config:
                            self.config[key] = loaded_config[key]
        except Exception as e:
            print(f"Error cargando configuraci√≥n: {e}")
            # Si hay error, usar configuraci√≥n por defecto
            self.save_config()
    
    def save_config(self) -> bool:
        """
        Guarda la configuraci√≥n en el archivo.
        
        Returns:
            bool: True si la configuraci√≥n se guard√≥ correctamente
        """
        try:
            with open(self.config_file, "w", encoding="utf-8") as f:
                json.dump(self.config, f, indent=2)
            return True
        except Exception as e:
            print(f"Error guardando configuraci√≥n: {e}")
            return False
    
    def get_config(self) -> Dict[str, Any]:
        """
        Obtiene la configuraci√≥n actual.
        
        Returns:
            Dict: Configuraci√≥n actual
        """
        return self.config
    
    def update_config(self, new_config: Dict[str, Any]) -> bool:
        """
        Actualiza la configuraci√≥n.
        
        Args:
            new_config: Nueva configuraci√≥n
            
        Returns:
            bool: True si la configuraci√≥n se actualiz√≥ correctamente
        """
        try:
            # Solo actualizar claves v√°lidas
            for key in self.config:
                if key in new_config:
                    self.config[key] = new_config[key]
            
            return self.save_config()
        except Exception as e:
            print(f"Error actualizando configuraci√≥n: {e}")
            return False
    
    def get_url_filters(self) -> List[str]:
        """
        Obtiene los filtros de URL.
        
        Returns:
            List[str]: Lista de filtros
        """
        return self.config.get("urlFilters", [])



server/core/file_watcher.py
===========================

import os
import time
from typing import Dict, List, Optional, Callable, Any
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler, FileModifiedEvent

class LogFileHandler(FileSystemEventHandler):
    def __init__(self, callback: Callable[[str], None]):
        """
        Inicializa el manejador de eventos de archivo.
        
        Args:
            callback: Funci√≥n a llamar cuando el archivo cambia
        """
        self.callback = callback
    
    def on_modified(self, event: FileModifiedEvent) -> None:
        """Maneja el evento de modificaci√≥n de archivo."""
        try:
            if hasattr(event, 'src_path') and event.src_path is not None:
                # Convertir a string de forma segura
                path_str = str(event.src_path)  # type: ignore
                self.callback(path_str)
        except Exception as e:
            print(f"Error en on_modified: {e}")

class FileWatcher:
    def __init__(self):
        """Inicializa el monitor de archivos."""
        self.observer = Observer()
        self.watched_files: Dict[str, Dict[str, Any]] = {}
        self.active = False
    
    def start(self):
        """Inicia el monitoreo de archivos."""
        if not self.active:
            self.observer.start()
            self.active = True
    
    def stop(self):
        """Detiene el monitoreo de archivos."""
        if self.active:
            self.observer.stop()
            self.observer.join()
            self.active = False
            self.watched_files.clear()
    
    def is_active(self) -> bool:
        """
        Verifica si el monitoreo est√° activo.
        
        Returns:
            bool: True si el monitoreo est√° activo
        """
        return self.active
    
    def add_file(self, file_path: str, callback: Optional[Callable[[str], None]] = None) -> bool:
        """
        A√±ade un archivo al monitoreo.
        
        Args:
            file_path: Ruta absoluta al archivo
            callback: Funci√≥n opcional a llamar cuando el archivo cambie
            
        Returns:
            bool: True si el archivo se a√±adi√≥ correctamente
        """
        if not os.path.exists(file_path):
            print(f"El archivo {file_path} no existe")
            return False
        
        if file_path in self.watched_files:
            print(f"El archivo {file_path} ya est√° siendo monitoreado")
            return False
        
        try:
            file_dir = os.path.dirname(file_path)
            handler = LogFileHandler(callback if callback else lambda x: None)
            
            watch = self.observer.schedule(handler, file_dir, recursive=False)  # type: ignore
            
            self.watched_files[file_path] = {
                "handler": handler,
                "watch": watch,
                "last_position": os.path.getsize(file_path),
                "last_modified": os.path.getmtime(file_path)
            }
            
            if not self.active:
                self.start()
            
            return True
        except Exception as e:
            print(f"Error a√±adiendo archivo {file_path}: {e}")
            return False
    
    def remove_file(self, file_path: str) -> bool:
        """
        Elimina un archivo del monitoreo.
        
        Args:
            file_path: Ruta al archivo
            
        Returns:
            bool: True si el archivo se elimin√≥ correctamente
        """
        if file_path not in self.watched_files:
            return False
        
        try:
            watch = self.watched_files[file_path]["watch"]
            self.observer.unschedule(watch)  # type: ignore
            del self.watched_files[file_path]
            return True
        except Exception as e:
            print(f"Error eliminando archivo {file_path}: {e}")
            return False
    
    def get_new_content(self, file_path: str) -> List[str]:
        """
        Obtiene el nuevo contenido de un archivo desde la √∫ltima lectura.
        
        Args:
            file_path: Ruta al archivo
            
        Returns:
            List[str]: Lista de nuevas l√≠neas
        """
        if file_path not in self.watched_files:
            return []
        
        try:
            file_info = self.watched_files[file_path]
            current_size = os.path.getsize(file_path)
            last_position = file_info["last_position"]
            
            if current_size < last_position:
                # El archivo fue truncado
                last_position = 0
            
            if current_size == last_position:
                return []
            
            with open(file_path, 'r', encoding='utf-8') as f:
                f.seek(last_position)
                new_lines = f.readlines()
                
                # Actualizar posici√≥n
                file_info["last_position"] = current_size
                file_info["last_modified"] = os.path.getmtime(file_path)
                
                return [line.strip() for line in new_lines if line.strip()]
        except Exception as e:
            print(f"Error leyendo archivo {file_path}: {e}")
            return []
    
    def get_watched_files(self) -> List[Dict[str, Any]]:
        """
        Obtiene la lista de archivos monitoreados.
        
        Returns:
            List[Dict]: Lista de informaci√≥n de archivos
        """
        files: List[Dict[str, Any]] = []
        for path, info in self.watched_files.items():
            try:
                current_size = os.path.getsize(path)
                file_info: Dict[str, Any] = {
                    "path": path,
                    "size": current_size,
                    "last_modified": time.ctime(info["last_modified"]),
                    "name": os.path.basename(path)
                }
                files.append(file_info)
            except Exception as e:
                print(f"Error obteniendo informaci√≥n de {path}: {e}")
                continue
        return files



server/core/log_manager.py
==========================

import json
import os
from datetime import datetime
from typing import Dict, List, Any

class LogManager:
    def __init__(self, log_dir: str = "logs"):
        """
        Inicializa el gestor de logs.
        
        Args:
            log_dir: Directorio donde se guardar√°n los logs
        """
        self.log_dir = log_dir
        self.max_file_size = 50 * 1024  # 50KB por defecto
        self.active = False
        self._ensure_log_dir()
    
    def _ensure_log_dir(self):
        """Asegura que existe el directorio de logs."""
        if not os.path.exists(self.log_dir):
            os.makedirs(self.log_dir)
    
    def _get_log_file(self) -> str:
        """Obtiene el nombre del archivo de log actual."""
        return os.path.join(self.log_dir, "devpipe.log")
    
    def start(self):
        """Inicia la captura de logs."""
        self.active = True
    
    def stop(self):
        """Detiene la captura de logs."""
        self.active = False
    
    def is_active(self) -> bool:
        """Retorna si la captura est√° activa."""
        return self.active
    
    def should_accept_log(self, log_data: Dict[str, Any]) -> bool:
        """
        Determina si un log debe ser aceptado seg√∫n los filtros.
        
        Args:
            log_data: Datos del log a evaluar
            
        Returns:
            bool: True si el log debe ser aceptado
        """
        # TODO: Implementar filtros de URL
        return True
    
    def write_log(self, log_data: Dict[str, Any]) -> bool:
        """
        Escribe un log en el archivo.
        
        Args:
            log_data: Datos del log a escribir
            
        Returns:
            bool: True si el log fue escrito correctamente
        """
        if not self.active:
            return False
            
        if not self.should_accept_log(log_data):
            return False
        
        try:
            log_file = self._get_log_file()
            
            # Verificar tama√±o del archivo
            if os.path.exists(log_file):
                if os.path.getsize(log_file) >= self.max_file_size:
                    # Rotar archivo
                    self._rotate_log_file(log_file)
            
            # A√±adir timestamp de servidor
            log_data["server_timestamp"] = datetime.now().isoformat()
            
            # Escribir log
            with open(log_file, "a", encoding="utf-8") as f:
                f.write(json.dumps(log_data) + "\n")
            
            return True
        except Exception as e:
            print(f"Error escribiendo log: {e}")
            return False
    
    def _rotate_log_file(self, log_file: str):
        """
        Rota el archivo de log cuando alcanza el tama√±o m√°ximo.
        
        Args:
            log_file: Ruta al archivo de log
        """
        if os.path.exists(log_file):
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup = f"{log_file}.{timestamp}"
            os.rename(log_file, backup)
    
    def get_recent_logs(self, limit: int = 10) -> List[Dict[str, Any]]:
        """
        Obtiene los logs m√°s recientes.
        
        Args:
            limit: N√∫mero m√°ximo de logs a retornar
            
        Returns:
            List[Dict]: Lista de logs
        """
        logs: List[Dict[str, Any]] = []
        log_file = self._get_log_file()
        
        if not os.path.exists(log_file):
            return logs
        
        try:
            with open(log_file, "r", encoding="utf-8") as f:
                # Leer las √∫ltimas 'limit' l√≠neas
                lines = f.readlines()[-limit:]
                for line in lines:
                    try:
                        log = json.loads(line.strip())
                        logs.append(log)
                    except:
                        continue
        except Exception as e:
            print(f"Error leyendo logs: {e}")
        
        return logs
    
    def clear_logs(self):
        """Limpia todos los logs."""
        log_file = self._get_log_file()
        if os.path.exists(log_file):
            os.remove(log_file)
    
    def set_max_file_size(self, size_in_kb: int):
        """
        Establece el tama√±o m√°ximo del archivo de logs.

        Args:
            size_in_kb: Tama√±o m√°ximo en kilobytes
        """
        self.max_file_size = size_in_kb * 1024

    def set_log_directory(self, new_log_dir: str) -> bool:
        """
        Cambia el directorio de logs. Solo permitido cuando el servicio est√° detenido.

        Args:
            new_log_dir: Nuevo directorio donde se guardar√°n los logs

        Returns:
            bool: True si el directorio se cambi√≥ correctamente, False si el servicio est√° activo
        """
        if self.active:
            return False

        self.log_dir = new_log_dir
        self._ensure_log_dir()
        return True

    def get_log_directory(self) -> str:
        """
        Obtiene el directorio actual de logs.

        Returns:
            str: Directorio actual de logs
        """
        return self.log_dir
    
    def get_log_file_info(self) -> Dict[str, Any]:
        """
        Obtiene informaci√≥n sobre el archivo de log actual.
        
        Returns:
            Dict: Informaci√≥n del archivo
        """
        log_file = self._get_log_file()
        info: Dict[str, Any] = {
            "path": log_file,
            "exists": os.path.exists(log_file),
            "size": 0,
            "size_kb": 0,
            "last_modified": None
        }
        
        if info["exists"]:
            info["size"] = os.path.getsize(log_file)
            info["size_kb"] = info["size"] / 1024
            info["last_modified"] = datetime.fromtimestamp(
                os.path.getmtime(log_file)
            ).isoformat()
        
        return info



server/core/models.py
=====================

from dataclasses import dataclass
from typing import Dict, Optional, Union

@dataclass
class LogEntry:
    """Estructura de un log."""
    level: str
    message: str
    url: str
    timestamp: str
    user_agent: str
    stack_trace: Optional[str] = None
    additional_data: Optional[Dict[str, Union[str, int, float, bool]]] = None
    server_timestamp: Optional[str] = None

